
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08002d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  20000074  08002df0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e4  08002df0  000201e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e668  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fde  00000000  00000000  0002e70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007678  00000000  00000000  000306ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a30  00000000  00000000  00037d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b88  00000000  00000000  00038798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000057c5  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003b40  00000000  00000000  0003eae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00042625  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001fc4  00000000  00000000  000426a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002cc0 	.word	0x08002cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002cc0 	.word	0x08002cc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_InitTick+0x2c>)
{
 8000594:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 f880 	bl	80006a4 <HAL_SYSTICK_Config>
 80005a4:	4604      	mov	r4, r0
 80005a6:	b938      	cbnz	r0, 80005b8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80005a8:	4602      	mov	r2, r0
 80005aa:	4629      	mov	r1, r5
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f844 	bl	800063c <HAL_NVIC_SetPriority>
 80005b4:	4620      	mov	r0, r4
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	2000000c 	.word	0x2000000c

080005c0 <HAL_Init>:
{
 80005c0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f828 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffe1 	bl	8000590 <HAL_InitTick>
 80005ce:	4604      	mov	r4, r0
 80005d0:	b918      	cbnz	r0, 80005da <HAL_Init+0x1a>
    HAL_MspInit();
 80005d2:	f001 fe0d 	bl	80021f0 <HAL_MspInit>
}
 80005d6:	4620      	mov	r0, r4
 80005d8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005da:	2401      	movs	r4, #1
 80005dc:	e7fb      	b.n	80005d6 <HAL_Init+0x16>
	...

080005e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <HAL_IncTick+0xc>)
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000a0 	.word	0x200000a0

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000a0 	.word	0x200000a0

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000604:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000606:	4605      	mov	r5, r0
  {
    wait++;
 8000608:	bf18      	it	ne
 800060a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	4284      	cmp	r4, r0
 8000614:	d8fa      	bhi.n	800060c <HAL_Delay+0x10>
  {
  }
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000620:	041b      	lsls	r3, r3, #16
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	0200      	lsls	r0, r0, #8
 800062a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000634:	60d3      	str	r3, [r2, #12]
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	68dc      	ldr	r4, [r3, #12]
 8000642:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000646:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064c:	2b04      	cmp	r3, #4
 800064e:	bf28      	it	cs
 8000650:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 0501 	mov.w	r5, #1
 8000658:	fa05 f303 	lsl.w	r3, r5, r3
 800065c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	4019      	ands	r1, r3
 8000668:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066a:	fa05 f404 	lsl.w	r4, r5, r4
 800066e:	3c01      	subs	r4, #1
 8000670:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000672:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	ea42 0201 	orr.w	r2, r2, r1
 8000678:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	bfaf      	iteee	ge
 800067e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	f000 000f 	andlt.w	r0, r0, #15
 8000686:	4b06      	ldrlt	r3, [pc, #24]	; (80006a0 <HAL_NVIC_SetPriority+0x64>)
 8000688:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	bfa5      	ittet	ge
 800068c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000690:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a4:	3801      	subs	r0, #1
 80006a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006aa:	d20a      	bcs.n	80006c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	21f0      	movs	r1, #240	; 0xf0
 80006b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e010 	.word	0xe000e010
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006d2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006d4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006d6:	bf0c      	ite	eq
 80006d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006dc:	f022 0204 	bicne.w	r2, r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	4770      	bx	lr
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006e8:	4770      	bx	lr

080006ea <HAL_SYSTICK_IRQHandler>:
{
 80006ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006ec:	f7ff fffc 	bl	80006e8 <HAL_SYSTICK_Callback>
 80006f0:	bd08      	pop	{r3, pc}
	...

080006f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006f8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006fa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fc:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000858 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000700:	4a53      	ldr	r2, [pc, #332]	; (8000850 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000702:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000704:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000708:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800070a:	9c01      	ldr	r4, [sp, #4]
 800070c:	40dc      	lsrs	r4, r3
 800070e:	d102      	bne.n	8000716 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000710:	b005      	add	sp, #20
 8000712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000716:	2401      	movs	r4, #1
 8000718:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 800071c:	9c01      	ldr	r4, [sp, #4]
 800071e:	ea14 050a 	ands.w	r5, r4, sl
 8000722:	f000 808f 	beq.w	8000844 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000726:	684c      	ldr	r4, [r1, #4]
 8000728:	f024 0b10 	bic.w	fp, r4, #16
 800072c:	f1bb 0f02 	cmp.w	fp, #2
 8000730:	d111      	bne.n	8000756 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8000732:	08df      	lsrs	r7, r3, #3
 8000734:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000738:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800073c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800073e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000742:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000746:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800074a:	690e      	ldr	r6, [r1, #16]
 800074c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000750:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000754:	623e      	str	r6, [r7, #32]
 8000756:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800075a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800075c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800075e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000762:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000764:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000768:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800076a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800076e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000772:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000776:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800077a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800077c:	d811      	bhi.n	80007a2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800077e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000780:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000784:	68ce      	ldr	r6, [r1, #12]
 8000786:	fa06 fe0c 	lsl.w	lr, r6, ip
 800078a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800078e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000790:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000792:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000796:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800079a:	409e      	lsls	r6, r3
 800079c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80007a0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80007a2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80007a4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007a6:	688e      	ldr	r6, [r1, #8]
 80007a8:	fa06 f60c 	lsl.w	r6, r6, ip
 80007ac:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007ae:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80007b0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007b2:	d547      	bpl.n	8000844 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80007b8:	f046 0601 	orr.w	r6, r6, #1
 80007bc:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80007c0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80007c4:	f023 0703 	bic.w	r7, r3, #3
 80007c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007cc:	f006 0601 	and.w	r6, r6, #1
 80007d0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80007d4:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007d6:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80007dc:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007e2:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007e6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80007ea:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80007ee:	d02b      	beq.n	8000848 <HAL_GPIO_Init+0x154>
 80007f0:	4e18      	ldr	r6, [pc, #96]	; (8000854 <HAL_GPIO_Init+0x160>)
 80007f2:	42b0      	cmp	r0, r6
 80007f4:	d02a      	beq.n	800084c <HAL_GPIO_Init+0x158>
 80007f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007fa:	42b0      	cmp	r0, r6
 80007fc:	bf14      	ite	ne
 80007fe:	2607      	movne	r6, #7
 8000800:	2602      	moveq	r6, #2
 8000802:	fa06 f60e 	lsl.w	r6, r6, lr
 8000806:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800080a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800080c:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800080e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000810:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000814:	bf0c      	ite	eq
 8000816:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000818:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800081a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 800081c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800081e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000822:	bf0c      	ite	eq
 8000824:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000826:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000828:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800082a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800082c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000830:	bf0c      	ite	eq
 8000832:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000834:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000836:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000838:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800083a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800083c:	bf54      	ite	pl
 800083e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000840:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8000842:	60d6      	str	r6, [r2, #12]
    position++;
 8000844:	3301      	adds	r3, #1
 8000846:	e760      	b.n	800070a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000848:	2600      	movs	r6, #0
 800084a:	e7da      	b.n	8000802 <HAL_GPIO_Init+0x10e>
 800084c:	2601      	movs	r6, #1
 800084e:	e7d8      	b.n	8000802 <HAL_GPIO_Init+0x10e>
 8000850:	40010400 	.word	0x40010400
 8000854:	48000400 	.word	0x48000400
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800085c:	b10a      	cbz	r2, 8000862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085e:	6181      	str	r1, [r0, #24]
 8000860:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000862:	6281      	str	r1, [r0, #40]	; 0x28
 8000864:	4770      	bx	lr

08000866 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000866:	6803      	ldr	r3, [r0, #0]
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800086c:	bf44      	itt	mi
 800086e:	2200      	movmi	r2, #0
 8000870:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000872:	699a      	ldr	r2, [r3, #24]
 8000874:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000876:	bf5e      	ittt	pl
 8000878:	699a      	ldrpl	r2, [r3, #24]
 800087a:	f042 0201 	orrpl.w	r2, r2, #1
 800087e:	619a      	strpl	r2, [r3, #24]
 8000880:	4770      	bx	lr

08000882 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000886:	6805      	ldr	r5, [r0, #0]
 8000888:	4323      	orrs	r3, r4
 800088a:	0d64      	lsrs	r4, r4, #21
 800088c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8000890:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8000894:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8000898:	6868      	ldr	r0, [r5, #4]
 800089a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800089e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80008a2:	4319      	orrs	r1, r3
 80008a4:	f044 0403 	orr.w	r4, r4, #3
 80008a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80008ac:	ea20 0404 	bic.w	r4, r0, r4
 80008b0:	4321      	orrs	r1, r4
 80008b2:	6069      	str	r1, [r5, #4]
 80008b4:	bd30      	pop	{r4, r5, pc}

080008b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80008b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ba:	9f06      	ldr	r7, [sp, #24]
 80008bc:	4604      	mov	r4, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	4616      	mov	r6, r2
 80008c2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008c4:	6822      	ldr	r2, [r4, #0]
 80008c6:	6993      	ldr	r3, [r2, #24]
 80008c8:	ea38 0303 	bics.w	r3, r8, r3
 80008cc:	bf0c      	ite	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	2300      	movne	r3, #0
 80008d2:	42b3      	cmp	r3, r6
 80008d4:	d002      	beq.n	80008dc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80008d6:	2000      	movs	r0, #0
}
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80008dc:	1c6b      	adds	r3, r5, #1
 80008de:	d0f2      	beq.n	80008c6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008e0:	f7ff fe86 	bl	80005f0 <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	4285      	cmp	r5, r0
 80008e8:	d301      	bcc.n	80008ee <I2C_WaitOnFlagUntilTimeout+0x38>
 80008ea:	2d00      	cmp	r5, #0
 80008ec:	d1ea      	bne.n	80008c4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80008ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008f6:	2320      	movs	r3, #32
 80008f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000902:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000906:	2001      	movs	r0, #1
 8000908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800090c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800090c:	6803      	ldr	r3, [r0, #0]
{
 800090e:	b570      	push	{r4, r5, r6, lr}
 8000910:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000912:	6998      	ldr	r0, [r3, #24]
 8000914:	f010 0010 	ands.w	r0, r0, #16
{
 8000918:	460d      	mov	r5, r1
 800091a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800091c:	d116      	bne.n	800094c <I2C_IsAcknowledgeFailed+0x40>
 800091e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000920:	1c69      	adds	r1, r5, #1
 8000922:	d014      	beq.n	800094e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000924:	f7ff fe64 	bl	80005f0 <HAL_GetTick>
 8000928:	1b80      	subs	r0, r0, r6
 800092a:	4285      	cmp	r5, r0
 800092c:	d300      	bcc.n	8000930 <I2C_IsAcknowledgeFailed+0x24>
 800092e:	b96d      	cbnz	r5, 800094c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000930:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000938:	2320      	movs	r3, #32
 800093a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000944:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
}
 800094a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	6999      	ldr	r1, [r3, #24]
 8000950:	068a      	lsls	r2, r1, #26
 8000952:	d5e5      	bpl.n	8000920 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000954:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000956:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000958:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800095a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800095c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800095e:	f7ff ff82 	bl	8000866 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000962:	6822      	ldr	r2, [r4, #0]
 8000964:	6853      	ldr	r3, [r2, #4]
 8000966:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800096a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800096e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000972:	f023 0301 	bic.w	r3, r3, #1
 8000976:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000978:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000980:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8000984:	e7db      	b.n	800093e <I2C_IsAcknowledgeFailed+0x32>

08000986 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000986:	b570      	push	{r4, r5, r6, lr}
 8000988:	4604      	mov	r4, r0
 800098a:	460d      	mov	r5, r1
 800098c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	079b      	lsls	r3, r3, #30
 8000994:	d501      	bpl.n	800099a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000996:	2000      	movs	r0, #0
 8000998:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800099a:	4632      	mov	r2, r6
 800099c:	4629      	mov	r1, r5
 800099e:	4620      	mov	r0, r4
 80009a0:	f7ff ffb4 	bl	800090c <I2C_IsAcknowledgeFailed>
 80009a4:	b9a0      	cbnz	r0, 80009d0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80009a6:	1c6a      	adds	r2, r5, #1
 80009a8:	d0f1      	beq.n	800098e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009aa:	f7ff fe21 	bl	80005f0 <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	4285      	cmp	r5, r0
 80009b2:	d301      	bcc.n	80009b8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d1ea      	bne.n	800098e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009c0:	2320      	movs	r3, #32
 80009c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009d0:	2001      	movs	r0, #1
}
 80009d2:	bd70      	pop	{r4, r5, r6, pc}

080009d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	4604      	mov	r4, r0
 80009d8:	460d      	mov	r5, r1
 80009da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	069b      	lsls	r3, r3, #26
 80009e2:	d501      	bpl.n	80009e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80009e4:	2000      	movs	r0, #0
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80009e8:	4632      	mov	r2, r6
 80009ea:	4629      	mov	r1, r5
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff ff8d 	bl	800090c <I2C_IsAcknowledgeFailed>
 80009f2:	b990      	cbnz	r0, 8000a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009f4:	f7ff fdfc 	bl	80005f0 <HAL_GetTick>
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	4285      	cmp	r5, r0
 80009fc:	d301      	bcc.n	8000a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80009fe:	2d00      	cmp	r5, #0
 8000a00:	d1ec      	bne.n	80009dc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
}
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}

08000a1e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000a1e:	b570      	push	{r4, r5, r6, lr}
 8000a20:	4604      	mov	r4, r0
 8000a22:	460d      	mov	r5, r1
 8000a24:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000a26:	6823      	ldr	r3, [r4, #0]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	075b      	lsls	r3, r3, #29
 8000a2c:	d40e      	bmi.n	8000a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a2e:	4632      	mov	r2, r6
 8000a30:	4629      	mov	r1, r5
 8000a32:	4620      	mov	r0, r4
 8000a34:	f7ff ff6a 	bl	800090c <I2C_IsAcknowledgeFailed>
 8000a38:	b9f0      	cbnz	r0, 8000a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	0691      	lsls	r1, r2, #26
 8000a40:	d51c      	bpl.n	8000a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8000a42:	699a      	ldr	r2, [r3, #24]
 8000a44:	0752      	lsls	r2, r2, #29
 8000a46:	d503      	bpl.n	8000a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000a48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a4a:	b10a      	cbz	r2, 8000a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a50:	2120      	movs	r1, #32
 8000a52:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000a5a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000a5e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000a62:	f022 0201 	bic.w	r2, r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000a6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000a78:	2001      	movs	r0, #1
}
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a7c:	f7ff fdb8 	bl	80005f0 <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	4285      	cmp	r5, r0
 8000a84:	d301      	bcc.n	8000a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d1cd      	bne.n	8000a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a8c:	f043 0320 	orr.w	r3, r3, #32
 8000a90:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a92:	2320      	movs	r3, #32
 8000a94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e7eb      	b.n	8000a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08000a9c <HAL_I2C_Init>:
{
 8000a9c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d04a      	beq.n	8000b3a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000aa4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000aac:	b91b      	cbnz	r3, 8000ab6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000aae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ab2:	f001 fbe3 	bl	800227c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ab6:	2324      	movs	r3, #36	; 0x24
 8000ab8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000abc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000abe:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	f022 0201 	bic.w	r2, r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ac8:	6862      	ldr	r2, [r4, #4]
 8000aca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ace:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ad0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ad2:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000adc:	d124      	bne.n	8000b28 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ae2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ae4:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ae6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ae8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000af0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000af8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000afa:	6922      	ldr	r2, [r4, #16]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	69a1      	ldr	r1, [r4, #24]
 8000b00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b04:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b06:	6a21      	ldr	r1, [r4, #32]
 8000b08:	69e2      	ldr	r2, [r4, #28]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	f042 0201 	orr.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b16:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000b18:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b1a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b20:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b22:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000b26:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b2c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b2e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b30:	bf04      	itt	eq
 8000b32:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000b36:	605a      	streq	r2, [r3, #4]
 8000b38:	e7d4      	b.n	8000ae4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
}
 8000b3c:	bd10      	pop	{r4, pc}
	...

08000b40 <HAL_I2C_Master_Transmit>:
{
 8000b40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000b44:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000b4a:	2b20      	cmp	r3, #32
{
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	460e      	mov	r6, r1
 8000b50:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b52:	f040 8084 	bne.w	8000c5e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000b56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d07f      	beq.n	8000c5e <HAL_I2C_Master_Transmit+0x11e>
 8000b5e:	2701      	movs	r7, #1
 8000b60:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000b64:	f7ff fd44 	bl	80005f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b68:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000b6a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b6c:	9000      	str	r0, [sp, #0]
 8000b6e:	463a      	mov	r2, r7
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff fe9e 	bl	80008b6 <I2C_WaitOnFlagUntilTimeout>
 8000b7a:	b118      	cbz	r0, 8000b84 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000b7c:	2001      	movs	r0, #1
}
 8000b7e:	b003      	add	sp, #12
 8000b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000b84:	2321      	movs	r3, #33	; 0x21
 8000b86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b90:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000b92:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000b98:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ba4:	d926      	bls.n	8000bf4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ba6:	22ff      	movs	r2, #255	; 0xff
 8000ba8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000baa:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f7ff fe65 	bl	8000882 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000bb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bba:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000bbc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bbe:	462a      	mov	r2, r5
 8000bc0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000bc2:	b9fb      	cbnz	r3, 8000c04 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bc4:	f7ff ff06 	bl	80009d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d1d7      	bne.n	8000b7c <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	2120      	movs	r1, #32
 8000bd0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000bd8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000bdc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000be0:	f022 0201 	bic.w	r2, r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000be6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000bea:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000bee:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000bf2:	e7c4      	b.n	8000b7e <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000bf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000bf6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	e7d5      	b.n	8000bb0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c04:	f7ff febf 	bl	8000986 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1b7      	bne.n	8000b7c <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000c14:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c16:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c24:	3a01      	subs	r2, #1
 8000c26:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c28:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000c2a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0c3      	beq.n	8000bb8 <HAL_I2C_Master_Transmit+0x78>
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d1c1      	bne.n	8000bb8 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000c34:	9500      	str	r5, [sp, #0]
 8000c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff fe3b 	bl	80008b6 <I2C_WaitOnFlagUntilTimeout>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d19b      	bne.n	8000b7c <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	2bff      	cmp	r3, #255	; 0xff
 8000c4a:	d903      	bls.n	8000c54 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c50:	9000      	str	r0, [sp, #0]
 8000c52:	e7ab      	b.n	8000bac <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000c54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c56:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000c58:	b292      	uxth	r2, r2
 8000c5a:	8522      	strh	r2, [r4, #40]	; 0x28
 8000c5c:	e7ce      	b.n	8000bfc <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000c5e:	2002      	movs	r0, #2
 8000c60:	e78d      	b.n	8000b7e <HAL_I2C_Master_Transmit+0x3e>
 8000c62:	bf00      	nop
 8000c64:	80002000 	.word	0x80002000

08000c68 <HAL_I2C_Master_Receive>:
{
 8000c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c6c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c72:	2b20      	cmp	r3, #32
{
 8000c74:	4604      	mov	r4, r0
 8000c76:	460e      	mov	r6, r1
 8000c78:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c7a:	f040 8086 	bne.w	8000d8a <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8000c7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	f000 8081 	beq.w	8000d8a <HAL_I2C_Master_Receive+0x122>
 8000c88:	2701      	movs	r7, #1
 8000c8a:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000c8e:	f7ff fcaf 	bl	80005f0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c92:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000c94:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c96:	9000      	str	r0, [sp, #0]
 8000c98:	463a      	mov	r2, r7
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff fe09 	bl	80008b6 <I2C_WaitOnFlagUntilTimeout>
 8000ca4:	b118      	cbz	r0, 8000cae <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
}
 8000ca8:	b003      	add	sp, #12
 8000caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000cae:	2322      	movs	r3, #34	; 0x22
 8000cb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cba:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000cbc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000cc2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000cca:	6360      	str	r0, [r4, #52]	; 0x34
 8000ccc:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cce:	d926      	bls.n	8000d1e <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cd0:	22ff      	movs	r2, #255	; 0xff
 8000cd2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000cd4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cda:	4631      	mov	r1, r6
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff fdd0 	bl	8000882 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ce4:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000ce6:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ce8:	462a      	mov	r2, r5
 8000cea:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000cec:	b9fb      	cbnz	r3, 8000d2e <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cee:	f7ff fe71 	bl	80009d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d1d7      	bne.n	8000ca6 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d02:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d06:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d14:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000d1c:	e7c4      	b.n	8000ca8 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8000d1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000d20:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000d22:	b292      	uxth	r2, r2
 8000d24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	e7d5      	b.n	8000cda <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d2e:	f7ff fe76 	bl	8000a1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d1b7      	bne.n	8000ca6 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000d40:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000d42:	3301      	adds	r3, #1
 8000d44:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000d46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000d50:	3a01      	subs	r2, #1
 8000d52:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d54:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000d56:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0c2      	beq.n	8000ce2 <HAL_I2C_Master_Receive+0x7a>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d1c0      	bne.n	8000ce2 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d60:	9500      	str	r5, [sp, #0]
 8000d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff fda5 	bl	80008b6 <I2C_WaitOnFlagUntilTimeout>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d19a      	bne.n	8000ca6 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2bff      	cmp	r3, #255	; 0xff
 8000d76:	d903      	bls.n	8000d80 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d78:	22ff      	movs	r2, #255	; 0xff
 8000d7a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	e7aa      	b.n	8000cd6 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8000d80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d82:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000d84:	b292      	uxth	r2, r2
 8000d86:	8522      	strh	r2, [r4, #40]	; 0x28
 8000d88:	e7cd      	b.n	8000d26 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	e78c      	b.n	8000ca8 <HAL_I2C_Master_Receive+0x40>
 8000d8e:	bf00      	nop
 8000d90:	80002400 	.word	0x80002400

08000d94 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d94:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	2a20      	cmp	r2, #32
{
 8000d9c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9e:	d11d      	bne.n	8000ddc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000da0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d019      	beq.n	8000ddc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000da8:	2324      	movs	r3, #36	; 0x24
 8000daa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dae:	6803      	ldr	r3, [r0, #0]
 8000db0:	681c      	ldr	r4, [r3, #0]
 8000db2:	f024 0401 	bic.w	r4, r4, #1
 8000db6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000db8:	681c      	ldr	r4, [r3, #0]
 8000dba:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000dbe:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000dc0:	681c      	ldr	r4, [r3, #0]
 8000dc2:	4321      	orrs	r1, r4
 8000dc4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	f041 0101 	orr.w	r1, r1, #1
 8000dcc:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dce:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000dd0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000dd4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000ddc:	2002      	movs	r0, #2
  }
}
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000de0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000de6:	b2e4      	uxtb	r4, r4
 8000de8:	2c20      	cmp	r4, #32
 8000dea:	d11c      	bne.n	8000e26 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d018      	beq.n	8000e26 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000df4:	2324      	movs	r3, #36	; 0x24
 8000df6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dfa:	6803      	ldr	r3, [r0, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e04:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e06:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e0a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000e0e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e18:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e1a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000e26:	2002      	movs	r0, #2
  }
}
 8000e28:	bd10      	pop	{r4, pc}
	...

08000e2c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e2c:	4a02      	ldr	r2, [pc, #8]	; (8000e38 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	4770      	bx	lr
 8000e38:	40007000 	.word	0x40007000

08000e3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_PWREx_GetVoltageRange+0xc>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000e40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40007000 	.word	0x40007000

08000e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e4e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e54:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e58:	d11c      	bne.n	8000e94 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000e5e:	d015      	beq.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e6a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000e6e:	6811      	ldr	r1, [r2, #0]
 8000e70:	2232      	movs	r2, #50	; 0x32
 8000e72:	434a      	muls	r2, r1
 8000e74:	490f      	ldr	r1, [pc, #60]	; (8000eb4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000e76:	fbb2 f2f1 	udiv	r2, r2, r1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e7e:	6958      	ldr	r0, [r3, #20]
 8000e80:	0540      	lsls	r0, r0, #21
 8000e82:	d500      	bpl.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000e84:	b922      	cbnz	r2, 8000e90 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e86:	694b      	ldr	r3, [r1, #20]
 8000e88:	055b      	lsls	r3, r3, #21
 8000e8a:	d40d      	bmi.n	8000ea8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	4770      	bx	lr
        wait_loop_index--;
 8000e90:	3a01      	subs	r2, #1
 8000e92:	e7f4      	b.n	8000e7e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e98:	bf1f      	itttt	ne
 8000e9a:	681a      	ldrne	r2, [r3, #0]
 8000e9c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000ea0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000ea4:	601a      	strne	r2, [r3, #0]
 8000ea6:	e7f1      	b.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000ea8:	2003      	movs	r0, #3
}
 8000eaa:	4770      	bx	lr
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	000f4240 	.word	0x000f4240

08000eb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000eba:	4d1e      	ldr	r5, [pc, #120]	; (8000f34 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000ebc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ebe:	00da      	lsls	r2, r3, #3
{
 8000ec0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ec2:	d518      	bpl.n	8000ef6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000ec4:	f7ff ffba 	bl	8000e3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ec8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000ecc:	d123      	bne.n	8000f16 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000ece:	2c80      	cmp	r4, #128	; 0x80
 8000ed0:	d929      	bls.n	8000f26 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000ed2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ed4:	bf8c      	ite	hi
 8000ed6:	2002      	movhi	r0, #2
 8000ed8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	f023 0307 	bic.w	r3, r3, #7
 8000ee2:	4303      	orrs	r3, r0
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000eec:	1a18      	subs	r0, r3, r0
 8000eee:	bf18      	it	ne
 8000ef0:	2001      	movne	r0, #1
 8000ef2:	b003      	add	sp, #12
 8000ef4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	65ab      	str	r3, [r5, #88]	; 0x58
 8000efe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000f08:	f7ff ff98 	bl	8000e3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000f0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f12:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f14:	e7d8      	b.n	8000ec8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000f16:	2c80      	cmp	r4, #128	; 0x80
 8000f18:	d807      	bhi.n	8000f2a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000f1a:	d008      	beq.n	8000f2e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000f1c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000f20:	4258      	negs	r0, r3
 8000f22:	4158      	adcs	r0, r3
 8000f24:	e7d9      	b.n	8000eda <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000f26:	2000      	movs	r0, #0
 8000f28:	e7d7      	b.n	8000eda <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e7d5      	b.n	8000eda <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000f2e:	2002      	movs	r0, #2
 8000f30:	e7d3      	b.n	8000eda <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f40:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f42:	f012 020c 	ands.w	r2, r2, #12
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x18>
 8000f48:	2a0c      	cmp	r2, #12
 8000f4a:	d115      	bne.n	8000f78 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f50:	2901      	cmp	r1, #1
 8000f52:	d118      	bne.n	8000f86 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f54:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000f56:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f58:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f5a:	bf55      	itete	pl
 8000f5c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f60:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f62:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f66:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000f6a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f6e:	b382      	cbz	r2, 8000fd2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f70:	2a0c      	cmp	r2, #12
 8000f72:	d009      	beq.n	8000f88 <HAL_RCC_GetSysClockFreq+0x4c>
 8000f74:	2000      	movs	r0, #0
  return sysclockfreq;
 8000f76:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f78:	2a04      	cmp	r2, #4
 8000f7a:	d029      	beq.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x94>
 8000f7c:	2a08      	cmp	r2, #8
 8000f7e:	4817      	ldr	r0, [pc, #92]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f80:	bf18      	it	ne
 8000f82:	2000      	movne	r0, #0
 8000f84:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f86:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f88:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f8a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f8c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f90:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000f94:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f96:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x6c>
 8000f9c:	2903      	cmp	r1, #3
 8000f9e:	d012      	beq.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fa0:	68d9      	ldr	r1, [r3, #12]
 8000fa2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000fa6:	e003      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fa8:	68d9      	ldr	r1, [r3, #12]
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fac:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fb0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fb2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fb6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000fba:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fbc:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fbe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000fc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fc6:	68d9      	ldr	r1, [r3, #12]
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fca:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000fce:	e7ef      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	08002d08 	.word	0x08002d08
 8000fdc:	007a1200 	.word	0x007a1200
 8000fe0:	00f42400 	.word	0x00f42400

08000fe4 <HAL_RCC_OscConfig>:
{
 8000fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000fe8:	4605      	mov	r5, r0
 8000fea:	b908      	cbnz	r0, 8000ff0 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e046      	b.n	800107e <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff0:	4ca8      	ldr	r4, [pc, #672]	; (8001294 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ff2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff4:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ff8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ffa:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ffe:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001002:	d572      	bpl.n	80010ea <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001004:	b11e      	cbz	r6, 800100e <HAL_RCC_OscConfig+0x2a>
 8001006:	2e0c      	cmp	r6, #12
 8001008:	d151      	bne.n	80010ae <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800100a:	2f01      	cmp	r7, #1
 800100c:	d14f      	bne.n	80010ae <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	0798      	lsls	r0, r3, #30
 8001012:	d502      	bpl.n	800101a <HAL_RCC_OscConfig+0x36>
 8001014:	69ab      	ldr	r3, [r5, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0e8      	beq.n	8000fec <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	6a28      	ldr	r0, [r5, #32]
 800101e:	0719      	lsls	r1, r3, #28
 8001020:	bf56      	itet	pl
 8001022:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001026:	6823      	ldrmi	r3, [r4, #0]
 8001028:	091b      	lsrpl	r3, r3, #4
 800102a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800102e:	4283      	cmp	r3, r0
 8001030:	d228      	bcs.n	8001084 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001032:	f7ff ff41 	bl	8000eb8 <RCC_SetFlashLatencyFromMSIRange>
 8001036:	2800      	cmp	r0, #0
 8001038:	d1d8      	bne.n	8000fec <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	6a2a      	ldr	r2, [r5, #32]
 8001046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800104a:	4313      	orrs	r3, r2
 800104c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800104e:	6863      	ldr	r3, [r4, #4]
 8001050:	69ea      	ldr	r2, [r5, #28]
 8001052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001056:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800105a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800105c:	f7ff ff6e 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	4a8d      	ldr	r2, [pc, #564]	; (8001298 <HAL_RCC_OscConfig+0x2b4>)
 8001064:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	40d8      	lsrs	r0, r3
 8001070:	4b8a      	ldr	r3, [pc, #552]	; (800129c <HAL_RCC_OscConfig+0x2b8>)
 8001072:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fa8b 	bl	8000590 <HAL_InitTick>
        if(status != HAL_OK)
 800107a:	2800      	cmp	r0, #0
 800107c:	d035      	beq.n	80010ea <HAL_RCC_OscConfig+0x106>
}
 800107e:	b003      	add	sp, #12
 8001080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6023      	str	r3, [r4, #0]
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001092:	4303      	orrs	r3, r0
 8001094:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	69ea      	ldr	r2, [r5, #28]
 800109a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800109e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010a2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a4:	f7ff ff08 	bl	8000eb8 <RCC_SetFlashLatencyFromMSIRange>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d0d7      	beq.n	800105c <HAL_RCC_OscConfig+0x78>
 80010ac:	e79e      	b.n	8000fec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010ae:	69ab      	ldr	r3, [r5, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03a      	beq.n	800112a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010bc:	f7ff fa98 	bl	80005f0 <HAL_GetTick>
 80010c0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	079a      	lsls	r2, r3, #30
 80010c6:	d528      	bpl.n	800111a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6023      	str	r3, [r4, #0]
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	6a2a      	ldr	r2, [r5, #32]
 80010d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010d8:	4313      	orrs	r3, r2
 80010da:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	69ea      	ldr	r2, [r5, #28]
 80010e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80010e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010e8:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	682b      	ldr	r3, [r5, #0]
 80010ec:	07d8      	lsls	r0, r3, #31
 80010ee:	d42d      	bmi.n	800114c <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	0799      	lsls	r1, r3, #30
 80010f4:	d46b      	bmi.n	80011ce <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	0718      	lsls	r0, r3, #28
 80010fa:	f100 80a0 	bmi.w	800123e <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	0759      	lsls	r1, r3, #29
 8001102:	f100 80cd 	bmi.w	80012a0 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001106:	682b      	ldr	r3, [r5, #0]
 8001108:	0699      	lsls	r1, r3, #26
 800110a:	f100 8136 	bmi.w	800137a <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800110e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	f040 815c 	bne.w	80013ce <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001116:	2000      	movs	r0, #0
 8001118:	e7b1      	b.n	800107e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800111a:	f7ff fa69 	bl	80005f0 <HAL_GetTick>
 800111e:	eba0 0008 	sub.w	r0, r0, r8
 8001122:	2802      	cmp	r0, #2
 8001124:	d9cd      	bls.n	80010c2 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e7a9      	b.n	800107e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001132:	f7ff fa5d 	bl	80005f0 <HAL_GetTick>
 8001136:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	079b      	lsls	r3, r3, #30
 800113c:	d5d5      	bpl.n	80010ea <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800113e:	f7ff fa57 	bl	80005f0 <HAL_GetTick>
 8001142:	eba0 0008 	sub.w	r0, r0, r8
 8001146:	2802      	cmp	r0, #2
 8001148:	d9f6      	bls.n	8001138 <HAL_RCC_OscConfig+0x154>
 800114a:	e7ec      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800114c:	2e08      	cmp	r6, #8
 800114e:	d003      	beq.n	8001158 <HAL_RCC_OscConfig+0x174>
 8001150:	2e0c      	cmp	r6, #12
 8001152:	d108      	bne.n	8001166 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001154:	2f03      	cmp	r7, #3
 8001156:	d106      	bne.n	8001166 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	039a      	lsls	r2, r3, #14
 800115c:	d5c8      	bpl.n	80010f0 <HAL_RCC_OscConfig+0x10c>
 800115e:	686b      	ldr	r3, [r5, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1c5      	bne.n	80010f0 <HAL_RCC_OscConfig+0x10c>
 8001164:	e742      	b.n	8000fec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001166:	686b      	ldr	r3, [r5, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d110      	bne.n	8001190 <HAL_RCC_OscConfig+0x1ac>
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001176:	f7ff fa3b 	bl	80005f0 <HAL_GetTick>
 800117a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	039b      	lsls	r3, r3, #14
 8001180:	d4b6      	bmi.n	80010f0 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fa35 	bl	80005f0 <HAL_GetTick>
 8001186:	eba0 0008 	sub.w	r0, r0, r8
 800118a:	2864      	cmp	r0, #100	; 0x64
 800118c:	d9f6      	bls.n	800117c <HAL_RCC_OscConfig+0x198>
 800118e:	e7ca      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d104      	bne.n	80011a0 <HAL_RCC_OscConfig+0x1bc>
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	e7e6      	b.n	800116e <HAL_RCC_OscConfig+0x18a>
 80011a0:	6822      	ldr	r2, [r4, #0]
 80011a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a6:	6022      	str	r2, [r4, #0]
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011ae:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e0      	bne.n	8001176 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80011b4:	f7ff fa1c 	bl	80005f0 <HAL_GetTick>
 80011b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	0398      	lsls	r0, r3, #14
 80011be:	d597      	bpl.n	80010f0 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fa16 	bl	80005f0 <HAL_GetTick>
 80011c4:	eba0 0008 	sub.w	r0, r0, r8
 80011c8:	2864      	cmp	r0, #100	; 0x64
 80011ca:	d9f6      	bls.n	80011ba <HAL_RCC_OscConfig+0x1d6>
 80011cc:	e7ab      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011ce:	2e04      	cmp	r6, #4
 80011d0:	d003      	beq.n	80011da <HAL_RCC_OscConfig+0x1f6>
 80011d2:	2e0c      	cmp	r6, #12
 80011d4:	d110      	bne.n	80011f8 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80011d6:	2f02      	cmp	r7, #2
 80011d8:	d10e      	bne.n	80011f8 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	0559      	lsls	r1, r3, #21
 80011de:	d503      	bpl.n	80011e8 <HAL_RCC_OscConfig+0x204>
 80011e0:	68eb      	ldr	r3, [r5, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f43f af02 	beq.w	8000fec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	692a      	ldr	r2, [r5, #16]
 80011ec:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80011f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011f4:	6063      	str	r3, [r4, #4]
 80011f6:	e77e      	b.n	80010f6 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f8:	68eb      	ldr	r3, [r5, #12]
 80011fa:	b17b      	cbz	r3, 800121c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff f9f4 	bl	80005f0 <HAL_GetTick>
 8001208:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	055a      	lsls	r2, r3, #21
 800120e:	d4eb      	bmi.n	80011e8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff f9ee 	bl	80005f0 <HAL_GetTick>
 8001214:	1bc0      	subs	r0, r0, r7
 8001216:	2802      	cmp	r0, #2
 8001218:	d9f7      	bls.n	800120a <HAL_RCC_OscConfig+0x226>
 800121a:	e784      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001222:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001224:	f7ff f9e4 	bl	80005f0 <HAL_GetTick>
 8001228:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	055b      	lsls	r3, r3, #21
 800122e:	f57f af62 	bpl.w	80010f6 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff f9dd 	bl	80005f0 <HAL_GetTick>
 8001236:	1bc0      	subs	r0, r0, r7
 8001238:	2802      	cmp	r0, #2
 800123a:	d9f6      	bls.n	800122a <HAL_RCC_OscConfig+0x246>
 800123c:	e773      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123e:	696b      	ldr	r3, [r5, #20]
 8001240:	b19b      	cbz	r3, 800126a <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001242:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800124e:	f7ff f9cf 	bl	80005f0 <HAL_GetTick>
 8001252:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001254:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001258:	079a      	lsls	r2, r3, #30
 800125a:	f53f af50 	bmi.w	80010fe <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff f9c7 	bl	80005f0 <HAL_GetTick>
 8001262:	1bc0      	subs	r0, r0, r7
 8001264:	2802      	cmp	r0, #2
 8001266:	d9f5      	bls.n	8001254 <HAL_RCC_OscConfig+0x270>
 8001268:	e75d      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 800126a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001276:	f7ff f9bb 	bl	80005f0 <HAL_GetTick>
 800127a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001280:	079b      	lsls	r3, r3, #30
 8001282:	f57f af3c 	bpl.w	80010fe <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001286:	f7ff f9b3 	bl	80005f0 <HAL_GetTick>
 800128a:	1bc0      	subs	r0, r0, r7
 800128c:	2802      	cmp	r0, #2
 800128e:	d9f5      	bls.n	800127c <HAL_RCC_OscConfig+0x298>
 8001290:	e749      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000
 8001298:	08002cef 	.word	0x08002cef
 800129c:	2000000c 	.word	0x2000000c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012a2:	00d8      	lsls	r0, r3, #3
 80012a4:	d429      	bmi.n	80012fa <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80012ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012b8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012bc:	4f71      	ldr	r7, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x4a0>)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	05d9      	lsls	r1, r3, #23
 80012c2:	d51d      	bpl.n	8001300 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	68ab      	ldr	r3, [r5, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d12b      	bne.n	8001322 <HAL_RCC_OscConfig+0x33e>
 80012ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80012d6:	f7ff f98b 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012de:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012e4:	079b      	lsls	r3, r3, #30
 80012e6:	d542      	bpl.n	800136e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80012e8:	f1b8 0f00 	cmp.w	r8, #0
 80012ec:	f43f af0b 	beq.w	8001106 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80012f8:	e705      	b.n	8001106 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80012fa:	f04f 0800 	mov.w	r8, #0
 80012fe:	e7dd      	b.n	80012bc <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001308:	f7ff f972 	bl	80005f0 <HAL_GetTick>
 800130c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	05da      	lsls	r2, r3, #23
 8001312:	d4d7      	bmi.n	80012c4 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001314:	f7ff f96c 	bl	80005f0 <HAL_GetTick>
 8001318:	eba0 0009 	sub.w	r0, r0, r9
 800131c:	2802      	cmp	r0, #2
 800131e:	d9f6      	bls.n	800130e <HAL_RCC_OscConfig+0x32a>
 8001320:	e701      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001322:	2b05      	cmp	r3, #5
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x350>
 8001326:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001332:	e7ca      	b.n	80012ca <HAL_RCC_OscConfig+0x2e6>
 8001334:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001340:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001344:	f022 0204 	bic.w	r2, r2, #4
 8001348:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1c2      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8001350:	f7ff f94e 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001358:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800135a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800135e:	0798      	lsls	r0, r3, #30
 8001360:	d5c2      	bpl.n	80012e8 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff f945 	bl	80005f0 <HAL_GetTick>
 8001366:	1bc0      	subs	r0, r0, r7
 8001368:	4548      	cmp	r0, r9
 800136a:	d9f6      	bls.n	800135a <HAL_RCC_OscConfig+0x376>
 800136c:	e6db      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff f93f 	bl	80005f0 <HAL_GetTick>
 8001372:	1bc0      	subs	r0, r0, r7
 8001374:	4548      	cmp	r0, r9
 8001376:	d9b3      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2fc>
 8001378:	e6d5      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800137a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800137c:	b19b      	cbz	r3, 80013a6 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800137e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800138a:	f7ff f931 	bl	80005f0 <HAL_GetTick>
 800138e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001390:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001394:	079a      	lsls	r2, r3, #30
 8001396:	f53f aeba 	bmi.w	800110e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800139a:	f7ff f929 	bl	80005f0 <HAL_GetTick>
 800139e:	1bc0      	subs	r0, r0, r7
 80013a0:	2802      	cmp	r0, #2
 80013a2:	d9f5      	bls.n	8001390 <HAL_RCC_OscConfig+0x3ac>
 80013a4:	e6bf      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 80013a6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80013b2:	f7ff f91d 	bl	80005f0 <HAL_GetTick>
 80013b6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80013bc:	079b      	lsls	r3, r3, #30
 80013be:	f57f aea6 	bpl.w	800110e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013c2:	f7ff f915 	bl	80005f0 <HAL_GetTick>
 80013c6:	1bc0      	subs	r0, r0, r7
 80013c8:	2802      	cmp	r0, #2
 80013ca:	d9f5      	bls.n	80013b8 <HAL_RCC_OscConfig+0x3d4>
 80013cc:	e6ab      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ce:	2e0c      	cmp	r6, #12
 80013d0:	f43f ae0c 	beq.w	8000fec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013d4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013dc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013de:	d136      	bne.n	800144e <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80013e0:	f7ff f906 	bl	80005f0 <HAL_GetTick>
 80013e4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	0198      	lsls	r0, r3, #6
 80013ea:	d42a      	bmi.n	8001442 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80013ee:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80013f0:	06db      	lsls	r3, r3, #27
 80013f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80013f6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80013f8:	4313      	orrs	r3, r2
 80013fa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80013fc:	3a01      	subs	r2, #1
 80013fe:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001402:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001404:	0852      	lsrs	r2, r2, #1
 8001406:	3a01      	subs	r2, #1
 8001408:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800140c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800140e:	0852      	lsrs	r2, r2, #1
 8001410:	3a01      	subs	r2, #1
 8001412:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001416:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141e:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001420:	68e3      	ldr	r3, [r4, #12]
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001428:	f7ff f8e2 	bl	80005f0 <HAL_GetTick>
 800142c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	0199      	lsls	r1, r3, #6
 8001432:	f53f ae70 	bmi.w	8001116 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001436:	f7ff f8db 	bl	80005f0 <HAL_GetTick>
 800143a:	1b40      	subs	r0, r0, r5
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f6      	bls.n	800142e <HAL_RCC_OscConfig+0x44a>
 8001440:	e671      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001442:	f7ff f8d5 	bl	80005f0 <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	2802      	cmp	r0, #2
 800144a:	d9cc      	bls.n	80013e6 <HAL_RCC_OscConfig+0x402>
 800144c:	e66b      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001452:	bf5e      	ittt	pl
 8001454:	68e3      	ldrpl	r3, [r4, #12]
 8001456:	f023 0303 	bicpl.w	r3, r3, #3
 800145a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800145c:	68e3      	ldr	r3, [r4, #12]
 800145e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001466:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001468:	f7ff f8c2 	bl	80005f0 <HAL_GetTick>
 800146c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	f57f ae50 	bpl.w	8001116 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff f8bb 	bl	80005f0 <HAL_GetTick>
 800147a:	1b40      	subs	r0, r0, r5
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f6      	bls.n	800146e <HAL_RCC_OscConfig+0x48a>
 8001480:	e651      	b.n	8001126 <HAL_RCC_OscConfig+0x142>
 8001482:	bf00      	nop
 8001484:	40007000 	.word	0x40007000

08001488 <HAL_RCC_ClockConfig>:
{
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800148e:	4604      	mov	r4, r0
 8001490:	b910      	cbnz	r0, 8001498 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001492:	2001      	movs	r0, #1
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4a40      	ldr	r2, [pc, #256]	; (800159c <HAL_RCC_ClockConfig+0x114>)
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	428b      	cmp	r3, r1
 80014a2:	d329      	bcc.n	80014f8 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	07d9      	lsls	r1, r3, #31
 80014a8:	d431      	bmi.n	800150e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014aa:	6821      	ldr	r1, [r4, #0]
 80014ac:	078a      	lsls	r2, r1, #30
 80014ae:	d45b      	bmi.n	8001568 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4a3a      	ldr	r2, [pc, #232]	; (800159c <HAL_RCC_ClockConfig+0x114>)
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	429e      	cmp	r6, r3
 80014ba:	d35d      	bcc.n	8001578 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	f011 0f04 	tst.w	r1, #4
 80014c0:	4d37      	ldr	r5, [pc, #220]	; (80015a0 <HAL_RCC_ClockConfig+0x118>)
 80014c2:	d164      	bne.n	800158e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	070b      	lsls	r3, r1, #28
 80014c6:	d506      	bpl.n	80014d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c8:	68ab      	ldr	r3, [r5, #8]
 80014ca:	6922      	ldr	r2, [r4, #16]
 80014cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014d4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d6:	f7ff fd31 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 80014da:	68ab      	ldr	r3, [r5, #8]
 80014dc:	4a31      	ldr	r2, [pc, #196]	; (80015a4 <HAL_RCC_ClockConfig+0x11c>)
 80014de:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80014e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	40d8      	lsrs	r0, r3
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_RCC_ClockConfig+0x120>)
 80014f0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff b84c 	b.w	8000590 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f023 0307 	bic.w	r3, r3, #7
 80014fe:	430b      	orrs	r3, r1
 8001500:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	4299      	cmp	r1, r3
 800150a:	d1c2      	bne.n	8001492 <HAL_RCC_ClockConfig+0xa>
 800150c:	e7ca      	b.n	80014a4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150e:	6862      	ldr	r2, [r4, #4]
 8001510:	4d23      	ldr	r5, [pc, #140]	; (80015a0 <HAL_RCC_ClockConfig+0x118>)
 8001512:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001514:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001516:	d11b      	bne.n	8001550 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001518:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	d0b9      	beq.n	8001492 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800151e:	68ab      	ldr	r3, [r5, #8]
 8001520:	f023 0303 	bic.w	r3, r3, #3
 8001524:	4313      	orrs	r3, r2
 8001526:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001528:	f7ff f862 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001530:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	68ab      	ldr	r3, [r5, #8]
 8001534:	6862      	ldr	r2, [r4, #4]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800153e:	d0b4      	beq.n	80014aa <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff f856 	bl	80005f0 <HAL_GetTick>
 8001544:	1bc0      	subs	r0, r0, r7
 8001546:	4540      	cmp	r0, r8
 8001548:	d9f3      	bls.n	8001532 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 800154a:	2003      	movs	r0, #3
}
 800154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001550:	2a02      	cmp	r2, #2
 8001552:	d102      	bne.n	800155a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001554:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001558:	e7e0      	b.n	800151c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800155a:	b912      	cbnz	r2, 8001562 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800155c:	f013 0f02 	tst.w	r3, #2
 8001560:	e7dc      	b.n	800151c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001562:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001566:	e7d9      	b.n	800151c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_RCC_ClockConfig+0x118>)
 800156a:	68a0      	ldr	r0, [r4, #8]
 800156c:	6893      	ldr	r3, [r2, #8]
 800156e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001572:	4303      	orrs	r3, r0
 8001574:	6093      	str	r3, [r2, #8]
 8001576:	e79b      	b.n	80014b0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001578:	6813      	ldr	r3, [r2, #0]
 800157a:	f023 0307 	bic.w	r3, r3, #7
 800157e:	4333      	orrs	r3, r6
 8001580:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	429e      	cmp	r6, r3
 800158a:	d182      	bne.n	8001492 <HAL_RCC_ClockConfig+0xa>
 800158c:	e796      	b.n	80014bc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158e:	68ab      	ldr	r3, [r5, #8]
 8001590:	68e2      	ldr	r2, [r4, #12]
 8001592:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001596:	4313      	orrs	r3, r2
 8001598:	60ab      	str	r3, [r5, #8]
 800159a:	e793      	b.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
 800159c:	40022000 	.word	0x40022000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08002cef 	.word	0x08002cef
 80015a8:	2000000c 	.word	0x2000000c

080015ac <HAL_RCC_GetHCLKFreq>:
}
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015ba:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c6:	6810      	ldr	r0, [r2, #0]
 80015c8:	f003 031f 	and.w	r3, r3, #31
}
 80015cc:	40d8      	lsrs	r0, r3
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08002cff 	.word	0x08002cff
 80015d8:	2000000c 	.word	0x2000000c

080015dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015de:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015e6:	5cd3      	ldrb	r3, [r2, r3]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015ea:	6810      	ldr	r0, [r2, #0]
 80015ec:	f003 031f 	and.w	r3, r3, #31
}
 80015f0:	40d8      	lsrs	r0, r3
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08002cff 	.word	0x08002cff
 80015fc:	2000000c 	.word	0x2000000c

08001600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <RCCEx_PLLSAI1_Config+0x114>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	f012 0f03 	tst.w	r2, #3
{
 800160a:	4605      	mov	r5, r0
 800160c:	460e      	mov	r6, r1
 800160e:	461c      	mov	r4, r3
 8001610:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001612:	d039      	beq.n	8001688 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	4282      	cmp	r2, r0
 800161c:	d14b      	bne.n	80016b6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800161e:	2a00      	cmp	r2, #0
 8001620:	d049      	beq.n	80016b6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001622:	68db      	ldr	r3, [r3, #12]
       ||
 8001624:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001626:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800162a:	3301      	adds	r3, #1
       ||
 800162c:	4293      	cmp	r3, r2
 800162e:	d142      	bne.n	80016b6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001636:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001638:	f7fe ffda 	bl	80005f0 <HAL_GetTick>
 800163c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	011a      	lsls	r2, r3, #4
 8001642:	d441      	bmi.n	80016c8 <RCCEx_PLLSAI1_Config+0xc8>
 8001644:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001646:	2e00      	cmp	r6, #0
 8001648:	d045      	beq.n	80016d6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800164a:	2e01      	cmp	r6, #1
 800164c:	d14f      	bne.n	80016ee <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800164e:	6922      	ldr	r2, [r4, #16]
 8001650:	6928      	ldr	r0, [r5, #16]
 8001652:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001656:	0840      	lsrs	r0, r0, #1
 8001658:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800165c:	3801      	subs	r0, #1
 800165e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001662:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001666:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7fe ffbe 	bl	80005f0 <HAL_GetTick>
 8001674:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	d545      	bpl.n	8001708 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800167c:	6923      	ldr	r3, [r4, #16]
 800167e:	69aa      	ldr	r2, [r5, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	6123      	str	r3, [r4, #16]
 8001684:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001688:	2802      	cmp	r0, #2
 800168a:	d010      	beq.n	80016ae <RCCEx_PLLSAI1_Config+0xae>
 800168c:	2803      	cmp	r0, #3
 800168e:	d014      	beq.n	80016ba <RCCEx_PLLSAI1_Config+0xba>
 8001690:	2801      	cmp	r0, #1
 8001692:	d110      	bne.n	80016b6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	079f      	lsls	r7, r3, #30
 8001698:	d5f5      	bpl.n	8001686 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800169a:	68e3      	ldr	r3, [r4, #12]
 800169c:	686a      	ldr	r2, [r5, #4]
 800169e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80016a2:	3a01      	subs	r2, #1
 80016a4:	4318      	orrs	r0, r3
 80016a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80016aa:	60e0      	str	r0, [r4, #12]
 80016ac:	e7c0      	b.n	8001630 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80016b4:	d1f1      	bne.n	800169a <RCCEx_PLLSAI1_Config+0x9a>
 80016b6:	2001      	movs	r0, #1
 80016b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	0391      	lsls	r1, r2, #14
 80016be:	d4ec      	bmi.n	800169a <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80016c6:	e7f5      	b.n	80016b4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80016c8:	f7fe ff92 	bl	80005f0 <HAL_GetTick>
 80016cc:	1bc0      	subs	r0, r0, r7
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d9b5      	bls.n	800163e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80016d2:	2003      	movs	r0, #3
 80016d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016d6:	6922      	ldr	r2, [r4, #16]
 80016d8:	68e9      	ldr	r1, [r5, #12]
 80016da:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80016de:	06c9      	lsls	r1, r1, #27
 80016e0:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80016e4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80016e8:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016ea:	6123      	str	r3, [r4, #16]
 80016ec:	e7bc      	b.n	8001668 <RCCEx_PLLSAI1_Config+0x68>
 80016ee:	6923      	ldr	r3, [r4, #16]
 80016f0:	6968      	ldr	r0, [r5, #20]
 80016f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80016f6:	0840      	lsrs	r0, r0, #1
 80016f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80016fc:	3801      	subs	r0, #1
 80016fe:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001702:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001706:	e7f0      	b.n	80016ea <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001708:	f7fe ff72 	bl	80005f0 <HAL_GetTick>
 800170c:	1b80      	subs	r0, r0, r6
 800170e:	2802      	cmp	r0, #2
 8001710:	d9b1      	bls.n	8001676 <RCCEx_PLLSAI1_Config+0x76>
 8001712:	e7de      	b.n	80016d2 <RCCEx_PLLSAI1_Config+0xd2>
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800171c:	6805      	ldr	r5, [r0, #0]
 800171e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001722:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001724:	d00e      	beq.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001726:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001728:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800172c:	d053      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800172e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001732:	d055      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001734:	2900      	cmp	r1, #0
 8001736:	d15e      	bne.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001738:	3004      	adds	r0, #4
 800173a:	f7ff ff61 	bl	8001600 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800173e:	4605      	mov	r5, r0
 8001740:	2800      	cmp	r0, #0
 8001742:	d04d      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	039e      	lsls	r6, r3, #14
 8001748:	d563      	bpl.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800174a:	4e93      	ldr	r6, [pc, #588]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800174c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800174e:	00d8      	lsls	r0, r3, #3
 8001750:	f140 8116 	bpl.w	8001980 <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 8001754:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001756:	f8df 8244 	ldr.w	r8, [pc, #580]	; 800199c <HAL_RCCEx_PeriphCLKConfig+0x284>
 800175a:	f8d8 3000 	ldr.w	r3, [r8]
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001766:	f7fe ff43 	bl	80005f0 <HAL_GetTick>
 800176a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800176c:	f8d8 3000 	ldr.w	r3, [r8]
 8001770:	05d9      	lsls	r1, r3, #23
 8001772:	d542      	bpl.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8001774:	2d00      	cmp	r5, #0
 8001776:	d147      	bne.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001778:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800177c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001780:	d014      	beq.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001782:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001784:	4293      	cmp	r3, r2
 8001786:	d011      	beq.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001788:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800178c:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001790:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001794:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001798:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800179c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017a4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80017a8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017ac:	07da      	lsls	r2, r3, #31
 80017ae:	d509      	bpl.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80017b0:	f7fe ff1e 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017b8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80017be:	079b      	lsls	r3, r3, #30
 80017c0:	f140 80c0 	bpl.w	8001944 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80017c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80017d4:	e018      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80017d6:	4a70      	ldr	r2, [pc, #448]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017d8:	68d3      	ldr	r3, [r2, #12]
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017e0:	4a6d      	ldr	r2, [pc, #436]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017e2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80017e8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017ec:	430b      	orrs	r3, r1
 80017ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80017f2:	2500      	movs	r5, #0
 80017f4:	e7a6      	b.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 80017f6:	2501      	movs	r5, #1
 80017f8:	e7a4      	b.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fa:	f7fe fef9 	bl	80005f0 <HAL_GetTick>
 80017fe:	eba0 0009 	sub.w	r0, r0, r9
 8001802:	2802      	cmp	r0, #2
 8001804:	d9b2      	bls.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001806:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001808:	b11f      	cbz	r7, 8001812 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	07df      	lsls	r7, r3, #31
 8001816:	d508      	bpl.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001818:	495f      	ldr	r1, [pc, #380]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800181a:	6a20      	ldr	r0, [r4, #32]
 800181c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001820:	f022 0203 	bic.w	r2, r2, #3
 8001824:	4302      	orrs	r2, r0
 8001826:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800182a:	079e      	lsls	r6, r3, #30
 800182c:	d508      	bpl.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800182e:	495a      	ldr	r1, [pc, #360]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001830:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001832:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001836:	f022 020c 	bic.w	r2, r2, #12
 800183a:	4302      	orrs	r2, r0
 800183c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001840:	0698      	lsls	r0, r3, #26
 8001842:	d508      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001844:	4954      	ldr	r1, [pc, #336]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001846:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800184c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001850:	4302      	orrs	r2, r0
 8001852:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001856:	0599      	lsls	r1, r3, #22
 8001858:	d508      	bpl.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800185a:	494f      	ldr	r1, [pc, #316]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800185c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800185e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001862:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001866:	4302      	orrs	r2, r0
 8001868:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800186c:	055a      	lsls	r2, r3, #21
 800186e:	d508      	bpl.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001870:	4949      	ldr	r1, [pc, #292]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001872:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001874:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001878:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800187c:	4302      	orrs	r2, r0
 800187e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001882:	065f      	lsls	r7, r3, #25
 8001884:	d508      	bpl.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001886:	4944      	ldr	r1, [pc, #272]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001888:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800188a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800188e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001892:	4302      	orrs	r2, r0
 8001894:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001898:	05de      	lsls	r6, r3, #23
 800189a:	d508      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800189c:	493e      	ldr	r1, [pc, #248]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800189e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80018a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80018a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80018a8:	4302      	orrs	r2, r0
 80018aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018ae:	0498      	lsls	r0, r3, #18
 80018b0:	d50f      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018b2:	4a39      	ldr	r2, [pc, #228]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80018b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018be:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80018c8:	d144      	bne.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018ca:	68d3      	ldr	r3, [r2, #12]
 80018cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018d0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	0359      	lsls	r1, r3, #13
 80018d6:	d50f      	bpl.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80018da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018e0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018e4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80018e6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80018ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80018ee:	d13c      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80018f0:	68d3      	ldr	r3, [r2, #12]
 80018f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018f6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	045a      	lsls	r2, r3, #17
 80018fc:	d512      	bpl.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018fe:	4926      	ldr	r1, [pc, #152]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001900:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001902:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001906:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800190a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800190c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001914:	d106      	bne.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001916:	2102      	movs	r1, #2
 8001918:	1d20      	adds	r0, r4, #4
 800191a:	f7ff fe71 	bl	8001600 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800191e:	2800      	cmp	r0, #0
 8001920:	bf18      	it	ne
 8001922:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	d508      	bpl.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800192c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800192e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001932:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001936:	430b      	orrs	r3, r1
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800193c:	4628      	mov	r0, r5
 800193e:	b003      	add	sp, #12
 8001940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7fe fe54 	bl	80005f0 <HAL_GetTick>
 8001948:	eba0 0008 	sub.w	r0, r0, r8
 800194c:	4548      	cmp	r0, r9
 800194e:	f67f af34 	bls.w	80017ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001952:	e758      	b.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001954:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001958:	d1bb      	bne.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800195a:	2101      	movs	r1, #1
 800195c:	1d20      	adds	r0, r4, #4
 800195e:	f7ff fe4f 	bl	8001600 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001962:	2800      	cmp	r0, #0
 8001964:	bf18      	it	ne
 8001966:	4605      	movne	r5, r0
 8001968:	e7b3      	b.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800196a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800196e:	d1c3      	bne.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001970:	2101      	movs	r1, #1
 8001972:	1d20      	adds	r0, r4, #4
 8001974:	f7ff fe44 	bl	8001600 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001978:	2800      	cmp	r0, #0
 800197a:	bf18      	it	ne
 800197c:	4605      	movne	r5, r0
 800197e:	e7bb      	b.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001986:	65b3      	str	r3, [r6, #88]	; 0x58
 8001988:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001992:	2701      	movs	r7, #1
 8001994:	e6df      	b.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000

080019a0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80019a0:	4a02      	ldr	r2, [pc, #8]	; (80019ac <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80019a2:	6813      	ldr	r3, [r2, #0]
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000

080019b0 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80019b0:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b2:	69c1      	ldr	r1, [r0, #28]
{
 80019b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019b8:	6883      	ldr	r3, [r0, #8]
 80019ba:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019bc:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019be:	4303      	orrs	r3, r0
 80019c0:	6960      	ldr	r0, [r4, #20]
 80019c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019c4:	4882      	ldr	r0, [pc, #520]	; (8001bd0 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80019c6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80019c8:	4028      	ands	r0, r5
 80019ca:	4303      	orrs	r3, r0
 80019cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ce:	6853      	ldr	r3, [r2, #4]
 80019d0:	68e0      	ldr	r0, [r4, #12]
 80019d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019d6:	4303      	orrs	r3, r0
 80019d8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019da:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019dc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019de:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80019e0:	bf1c      	itt	ne
 80019e2:	6a23      	ldrne	r3, [r4, #32]
 80019e4:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019e6:	6893      	ldr	r3, [r2, #8]
 80019e8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80019ec:	4303      	orrs	r3, r0
 80019ee:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <UART_SetConfig+0x228>)
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d114      	bne.n	8001a20 <UART_SetConfig+0x70>
 80019f6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80019fa:	4a78      	ldr	r2, [pc, #480]	; (8001bdc <UART_SetConfig+0x22c>)
 80019fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a00:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a08:	5cd3      	ldrb	r3, [r2, r3]
 8001a0a:	f040 80aa 	bne.w	8001b62 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d820      	bhi.n	8001a54 <UART_SetConfig+0xa4>
 8001a12:	e8df f003 	tbb	[pc, r3]
 8001a16:	8f77      	.short	0x8f77
 8001a18:	1f9b1f92 	.word	0x1f9b1f92
 8001a1c:	1f1f      	.short	0x1f1f
 8001a1e:	9e          	.byte	0x9e
 8001a1f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a20:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <UART_SetConfig+0x230>)
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d107      	bne.n	8001a36 <UART_SetConfig+0x86>
 8001a26:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	; (8001be4 <UART_SetConfig+0x234>)
 8001a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	e7e6      	b.n	8001a04 <UART_SetConfig+0x54>
 8001a36:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <UART_SetConfig+0x224>)
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 80c2 	bne.w	8001bc2 <UART_SetConfig+0x212>
 8001a3e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001a42:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001a46:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001a4a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001a4e:	d02a      	beq.n	8001aa6 <UART_SetConfig+0xf6>
 8001a50:	d806      	bhi.n	8001a60 <UART_SetConfig+0xb0>
 8001a52:	b315      	cbz	r5, 8001a9a <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001a54:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001a5a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a60:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001a64:	d006      	beq.n	8001a74 <UART_SetConfig+0xc4>
 8001a66:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001a6a:	d1f3      	bne.n	8001a54 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001a6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a70:	2508      	movs	r5, #8
 8001a72:	e001      	b.n	8001a78 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001a74:	485c      	ldr	r0, [pc, #368]	; (8001be8 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a76:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001a78:	6862      	ldr	r2, [r4, #4]
 8001a7a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001a7e:	4283      	cmp	r3, r0
 8001a80:	d8e8      	bhi.n	8001a54 <UART_SetConfig+0xa4>
 8001a82:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001a86:	d8e5      	bhi.n	8001a54 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001a88:	2d08      	cmp	r5, #8
 8001a8a:	d838      	bhi.n	8001afe <UART_SetConfig+0x14e>
 8001a8c:	e8df f005 	tbb	[pc, r5]
 8001a90:	3726370f 	.word	0x3726370f
 8001a94:	3737372e 	.word	0x3737372e
 8001a98:	31          	.byte	0x31
 8001a99:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001a9a:	f7ff fd8d 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d1ea      	bne.n	8001a78 <UART_SetConfig+0xc8>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	e7d7      	b.n	8001a56 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001aa6:	f7ff fa49 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
        break;
 8001aaa:	2504      	movs	r5, #4
 8001aac:	e7f7      	b.n	8001a9e <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001aae:	f7ff fd83 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ab2:	6862      	ldr	r2, [r4, #4]
 8001ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab8:	0856      	lsrs	r6, r2, #1
 8001aba:	2700      	movs	r7, #0
 8001abc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ac6:	f7fe fbdb 	bl	8000280 <__aeabi_uldivmod>
            break;
 8001aca:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <UART_SetConfig+0x23c>)
 8001ace:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001ad2:	4299      	cmp	r1, r3
 8001ad4:	d8be      	bhi.n	8001a54 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	60d8      	str	r0, [r3, #12]
 8001ada:	e7bc      	b.n	8001a56 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001adc:	4844      	ldr	r0, [pc, #272]	; (8001bf0 <UART_SetConfig+0x240>)
 8001ade:	0855      	lsrs	r5, r2, #1
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001ae6:	f141 0100 	adc.w	r1, r1, #0
 8001aea:	e7ec      	b.n	8001ac6 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001aec:	f7ff fa26 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001af0:	e7df      	b.n	8001ab2 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001af2:	0850      	lsrs	r0, r2, #1
 8001af4:	2100      	movs	r1, #0
 8001af6:	2300      	movs	r3, #0
 8001af8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001afc:	e7f3      	b.n	8001ae6 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8001afe:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b00:	2000      	movs	r0, #0
 8001b02:	e7e3      	b.n	8001acc <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b04:	f7ff fd58 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b08:	6861      	ldr	r1, [r4, #4]
 8001b0a:	084a      	lsrs	r2, r1, #1
 8001b0c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001b10:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b14:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b16:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b18:	f1a3 0010 	sub.w	r0, r3, #16
 8001b1c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b20:	4288      	cmp	r0, r1
 8001b22:	d897      	bhi.n	8001a54 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001b24:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001b28:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b2a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001b2e:	430b      	orrs	r3, r1
 8001b30:	60c3      	str	r3, [r0, #12]
 8001b32:	e790      	b.n	8001a56 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b34:	f7ff fd52 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001b38:	e7e6      	b.n	8001b08 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001b3a:	6860      	ldr	r0, [r4, #4]
 8001b3c:	0843      	lsrs	r3, r0, #1
 8001b3e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001b42:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b46:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b4a:	e7e3      	b.n	8001b14 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b4c:	f7ff f9f6 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001b50:	e7da      	b.n	8001b08 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b52:	6860      	ldr	r0, [r4, #4]
 8001b54:	0843      	lsrs	r3, r0, #1
 8001b56:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b5a:	e7f4      	b.n	8001b46 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001b5c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e7da      	b.n	8001b18 <UART_SetConfig+0x168>
    switch (clocksource)
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d830      	bhi.n	8001bc8 <UART_SetConfig+0x218>
 8001b66:	e8df f003 	tbb	[pc, r3]
 8001b6a:	1805      	.short	0x1805
 8001b6c:	2f242f1b 	.word	0x2f242f1b
 8001b70:	2f2f      	.short	0x2f2f
 8001b72:	27          	.byte	0x27
 8001b73:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001b74:	f7ff fd20 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b78:	6862      	ldr	r2, [r4, #4]
 8001b7a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b82:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b84:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b86:	f1a3 0010 	sub.w	r0, r3, #16
 8001b8a:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001b8e:	4288      	cmp	r0, r1
 8001b90:	f63f af60 	bhi.w	8001a54 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001b94:	6821      	ldr	r1, [r4, #0]
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e75d      	b.n	8001a56 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b9a:	f7ff fd1f 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001b9e:	e7eb      	b.n	8001b78 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ba0:	6860      	ldr	r0, [r4, #4]
 8001ba2:	0843      	lsrs	r3, r0, #1
 8001ba4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ba8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bac:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bb0:	e7e7      	b.n	8001b82 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bb2:	f7ff f9c3 	bl	8000f3c <HAL_RCC_GetSysClockFreq>
 8001bb6:	e7df      	b.n	8001b78 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bb8:	6860      	ldr	r0, [r4, #4]
 8001bba:	0843      	lsrs	r3, r0, #1
 8001bbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bc0:	e7f4      	b.n	8001bac <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bc6:	d0c9      	beq.n	8001b5c <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8001bc8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e7db      	b.n	8001b86 <UART_SetConfig+0x1d6>
 8001bce:	bf00      	nop
 8001bd0:	efff69f3 	.word	0xefff69f3
 8001bd4:	40008000 	.word	0x40008000
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	08002cd8 	.word	0x08002cd8
 8001be0:	40004400 	.word	0x40004400
 8001be4:	08002cdc 	.word	0x08002cdc
 8001be8:	00f42400 	.word	0x00f42400
 8001bec:	000ffcff 	.word	0x000ffcff
 8001bf0:	f4240000 	.word	0xf4240000

08001bf4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bf4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bf6:	07da      	lsls	r2, r3, #31
{
 8001bf8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bfa:	d506      	bpl.n	8001c0a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bfc:	6801      	ldr	r1, [r0, #0]
 8001bfe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c00:	684a      	ldr	r2, [r1, #4]
 8001c02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c06:	4322      	orrs	r2, r4
 8001c08:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c0a:	079c      	lsls	r4, r3, #30
 8001c0c:	d506      	bpl.n	8001c1c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c0e:	6801      	ldr	r1, [r0, #0]
 8001c10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001c12:	684a      	ldr	r2, [r1, #4]
 8001c14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c18:	4322      	orrs	r2, r4
 8001c1a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c1c:	0759      	lsls	r1, r3, #29
 8001c1e:	d506      	bpl.n	8001c2e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c20:	6801      	ldr	r1, [r0, #0]
 8001c22:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001c24:	684a      	ldr	r2, [r1, #4]
 8001c26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c2e:	071a      	lsls	r2, r3, #28
 8001c30:	d506      	bpl.n	8001c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c32:	6801      	ldr	r1, [r0, #0]
 8001c34:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001c36:	684a      	ldr	r2, [r1, #4]
 8001c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c3c:	4322      	orrs	r2, r4
 8001c3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c40:	06dc      	lsls	r4, r3, #27
 8001c42:	d506      	bpl.n	8001c52 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c44:	6801      	ldr	r1, [r0, #0]
 8001c46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001c48:	688a      	ldr	r2, [r1, #8]
 8001c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c4e:	4322      	orrs	r2, r4
 8001c50:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c52:	0699      	lsls	r1, r3, #26
 8001c54:	d506      	bpl.n	8001c64 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c56:	6801      	ldr	r1, [r0, #0]
 8001c58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c5a:	688a      	ldr	r2, [r1, #8]
 8001c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c60:	4322      	orrs	r2, r4
 8001c62:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c64:	065a      	lsls	r2, r3, #25
 8001c66:	d50f      	bpl.n	8001c88 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c68:	6801      	ldr	r1, [r0, #0]
 8001c6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c6c:	684a      	ldr	r2, [r1, #4]
 8001c6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001c72:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c7a:	d105      	bne.n	8001c88 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c7c:	684a      	ldr	r2, [r1, #4]
 8001c7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c80:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001c84:	4322      	orrs	r2, r4
 8001c86:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	d506      	bpl.n	8001c9a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c90:	6853      	ldr	r3, [r2, #4]
 8001c92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6053      	str	r3, [r2, #4]
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	9d06      	ldr	r5, [sp, #24]
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460f      	mov	r7, r1
 8001ca6:	4616      	mov	r6, r2
 8001ca8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001caa:	6821      	ldr	r1, [r4, #0]
 8001cac:	69ca      	ldr	r2, [r1, #28]
 8001cae:	ea37 0302 	bics.w	r3, r7, r2
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2201      	moveq	r2, #1
 8001cb6:	2200      	movne	r2, #0
 8001cb8:	42b2      	cmp	r2, r6
 8001cba:	d002      	beq.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001cbc:	2000      	movs	r0, #0
}
 8001cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	1c6b      	adds	r3, r5, #1
 8001cc4:	d0f2      	beq.n	8001cac <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc6:	b99d      	cbnz	r5, 8001cf0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001cea:	2003      	movs	r0, #3
 8001cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cf0:	f7fe fc7e 	bl	80005f0 <HAL_GetTick>
 8001cf4:	eba0 0008 	sub.w	r0, r0, r8
 8001cf8:	4285      	cmp	r5, r0
 8001cfa:	d2d6      	bcs.n	8001caa <UART_WaitOnFlagUntilTimeout+0xe>
 8001cfc:	e7e4      	b.n	8001cc8 <UART_WaitOnFlagUntilTimeout+0x2c>

08001cfe <HAL_UART_Transmit>:
{
 8001cfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d02:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d04:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001d08:	2b20      	cmp	r3, #32
{
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	460d      	mov	r5, r1
 8001d0e:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d10:	d14a      	bne.n	8001da8 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001d12:	2900      	cmp	r1, #0
 8001d14:	d046      	beq.n	8001da4 <HAL_UART_Transmit+0xa6>
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001d1a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d042      	beq.n	8001da8 <HAL_UART_Transmit+0xaa>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d2c:	2321      	movs	r3, #33	; 0x21
 8001d2e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001d32:	f7fe fc5d 	bl	80005f0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001d36:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001d3a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001d3c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001d40:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d44:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001d46:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d48:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001d4a:	b952      	cbnz	r2, 8001d62 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d4c:	2140      	movs	r1, #64	; 0x40
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff ffa4 	bl	8001c9c <UART_WaitOnFlagUntilTimeout>
 8001d54:	b958      	cbnz	r0, 8001d6e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001d56:	2320      	movs	r3, #32
 8001d58:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001d5c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001d60:	e006      	b.n	8001d70 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d62:	2200      	movs	r2, #0
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ff98 	bl	8001c9c <UART_WaitOnFlagUntilTimeout>
 8001d6c:	b118      	cbz	r0, 8001d76 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
}
 8001d70:	b002      	add	sp, #8
 8001d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d76:	68a3      	ldr	r3, [r4, #8]
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7e:	d10d      	bne.n	8001d9c <HAL_UART_Transmit+0x9e>
 8001d80:	6923      	ldr	r3, [r4, #16]
 8001d82:	b95b      	cbnz	r3, 8001d9c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001d84:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001d8e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001d9a:	e7d1      	b.n	8001d40 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001d9c:	782b      	ldrb	r3, [r5, #0]
 8001d9e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001da0:	3501      	adds	r5, #1
 8001da2:	e7f4      	b.n	8001d8e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	e7e3      	b.n	8001d70 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001da8:	2002      	movs	r0, #2
 8001daa:	e7e1      	b.n	8001d70 <HAL_UART_Transmit+0x72>

08001dac <UART_CheckIdleState>:
{
 8001dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db0:	2600      	movs	r6, #0
 8001db2:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001db4:	f7fe fc1c 	bl	80005f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001dbe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dc0:	d417      	bmi.n	8001df2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	075b      	lsls	r3, r3, #29
 8001dc8:	d50a      	bpl.n	8001de0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff ff5f 	bl	8001c9c <UART_WaitOnFlagUntilTimeout>
 8001dde:	b9a0      	cbnz	r0, 8001e0a <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001de0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001de2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001de4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001de8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001dec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001df0:	e00c      	b.n	8001e0c <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001df2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4632      	mov	r2, r6
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff ff4b 	bl	8001c9c <UART_WaitOnFlagUntilTimeout>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d0db      	beq.n	8001dc2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e0a:	2003      	movs	r0, #3
}
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}

08001e10 <HAL_UART_Init>:
{
 8001e10:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001e12:	4604      	mov	r4, r0
 8001e14:	b360      	cbz	r0, 8001e70 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001e1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e1e:	b91b      	cbnz	r3, 8001e28 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e20:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e24:	f000 fa52 	bl	80022cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e28:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e2a:	2324      	movs	r3, #36	; 0x24
 8001e2c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff fdb9 	bl	80019b0 <UART_SetConfig>
 8001e3e:	2801      	cmp	r0, #1
 8001e40:	d016      	beq.n	8001e70 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e44:	b113      	cbz	r3, 8001e4c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001e46:	4620      	mov	r0, r4
 8001e48:	f7ff fed4 	bl	8001bf4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e5c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e64:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e6c:	f7ff bf9e 	b.w	8001dac <UART_CheckIdleState>
}
 8001e70:	2001      	movs	r0, #1
 8001e72:	bd10      	pop	{r4, pc}

08001e74 <airq5_writeData>:
static void MX_I2C1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void airq5_writeData(uint8_t reg, uint16_t _data)
{
 8001e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t writeReg[ 3 ];

    writeReg[ 0 ] = reg;
    writeReg[ 1 ] = _data >> 8;
 8001e76:	0a0b      	lsrs	r3, r1, #8
 8001e78:	f88d 300d 	strb.w	r3, [sp, #13]
    writeReg[ 2 ] = _data & 0x00FF;

    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <airq5_writeData+0x28>)
    writeReg[ 2 ] = _data & 0x00FF;
 8001e7e:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001e82:	7819      	ldrb	r1, [r3, #0]
    writeReg[ 0 ] = reg;
 8001e84:	f88d 000c 	strb.w	r0, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001e88:	2364      	movs	r3, #100	; 0x64
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	aa03      	add	r2, sp, #12
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <airq5_writeData+0x2c>)
 8001e92:	f7fe fe55 	bl	8000b40 <HAL_I2C_Master_Transmit>
}
 8001e96:	b005      	add	sp, #20
 8001e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e9c:	20000003 	.word	0x20000003
 8001ea0:	200000a4 	.word	0x200000a4

08001ea4 <airq5_readData>:

uint16_t airq5_readData(uint8_t reg)
{
 8001ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t readReg[ 2 ];
    uint16_t dataValue;

    writeReg[ 0 ] = reg;

    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001ea6:	4d0d      	ldr	r5, [pc, #52]	; (8001edc <airq5_readData+0x38>)
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <airq5_readData+0x3c>)
    writeReg[ 0 ] = reg;
 8001eaa:	aa04      	add	r2, sp, #16
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001eac:	2664      	movs	r6, #100	; 0x64
    writeReg[ 0 ] = reg;
 8001eae:	f802 0d08 	strb.w	r0, [r2, #-8]!
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001eb2:	7819      	ldrb	r1, [r3, #0]
 8001eb4:	9600      	str	r6, [sp, #0]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4628      	mov	r0, r5
 8001eba:	f7fe fe41 	bl	8000b40 <HAL_I2C_Master_Transmit>
 8001ebe:	aa04      	add	r2, sp, #16

    dataValue = readReg[ 0 ];
    dataValue = dataValue << 8;
    dataValue = dataValue | readReg[ 1 ];
    HAL_I2C_Master_Receive(&hi2c1, address_for_read, readReg, 2, 100);
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <airq5_readData+0x40>)
 8001ec2:	f832 4d04 	ldrh.w	r4, [r2, #-4]!
 8001ec6:	7819      	ldrb	r1, [r3, #0]
 8001ec8:	9600      	str	r6, [sp, #0]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	4628      	mov	r0, r5
 8001ece:	f7fe fecb 	bl	8000c68 <HAL_I2C_Master_Receive>
 8001ed2:	ba64      	rev16	r4, r4
 8001ed4:	b2a4      	uxth	r4, r4
    return dataValue;
}
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	200000a4 	.word	0x200000a4
 8001ee0:	20000003 	.word	0x20000003
 8001ee4:	20000002 	.word	0x20000002

08001ee8 <airq5_readSensorData>:
{
    _dataConfig = config;
}

uint16_t airq5_readSensorData(uint16_t channel_data)
{
 8001ee8:	b508      	push	{r3, lr}
	uint16_t setConfig;
	uint16_t getData;

	setConfig = _dataConfig;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <airq5_readSensorData+0x1c>)
 8001eec:	8819      	ldrh	r1, [r3, #0]
	setConfig = setConfig | channel_data;
    airq5_writeData(_AIRQ5_REG_POINTER_CONFIG, setConfig );
 8001eee:	4301      	orrs	r1, r0
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f7ff ffbf 	bl	8001e74 <airq5_writeData>
    getData = airq5_readData( _AIRQ5_REG_POINTER_CONVERT );
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff ffd4 	bl	8001ea4 <airq5_readData>

    getData = getData >> 4;

    return getData;
}
 8001efc:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8001f00:	bd08      	pop	{r3, pc}
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <applicationTask>:
                            _AIRQ5_CONFIG_COMP_LAT_NOT_LATCH |
                            _AIRQ5_CONFIG_COMP_QUE_0CONV );
}

uint8_t applicationTask()
{
 8001f08:	b510      	push	{r4, lr}
      uint8_t CO_sensorData = airq5_readSensorData(_AIRQ5_DATA_CHANNEL_CO);
 8001f0a:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001f0e:	f7ff ffeb 	bl	8001ee8 <airq5_readSensorData>
 8001f12:	4604      	mov	r4, r0
      HAL_Delay( 200 );
 8001f14:	20c8      	movs	r0, #200	; 0xc8
 8001f16:	f7fe fb71 	bl	80005fc <HAL_Delay>
      return CO_sensorData;
}
 8001f1a:	b2e0      	uxtb	r0, r4
 8001f1c:	bd10      	pop	{r4, pc}
	...

08001f20 <send_to_xbee>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void send_to_xbee(char dataHexa[8]){
 8001f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int sum2 = 0x00;
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB + option;
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <send_to_xbee+0xc0>)
 8001f26:	f893 a000 	ldrb.w	sl, [r3]
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <send_to_xbee+0xc4>)
 8001f2c:	f893 9000 	ldrb.w	r9, [r3]
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <send_to_xbee+0xc8>)
 8001f32:	f893 8000 	ldrb.w	r8, [r3]
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <send_to_xbee+0xcc>)
 8001f38:	781f      	ldrb	r7, [r3, #0]
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <send_to_xbee+0xd0>)
 8001f3c:	eb0a 0209 	add.w	r2, sl, r9
 8001f40:	781e      	ldrb	r6, [r3, #0]
 8001f42:	4442      	add	r2, r8
 8001f44:	443a      	add	r2, r7
void send_to_xbee(char dataHexa[8]){
 8001f46:	4605      	mov	r5, r0
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB + option;
 8001f48:	1994      	adds	r4, r2, r6
	for (int i = 0; i < strlen(dataHexa); i++) {
 8001f4a:	f7fe f941 	bl	80001d0 <strlen>
 8001f4e:	462b      	mov	r3, r5
 8001f50:	4428      	add	r0, r5
	int sum2 = 0x00;
 8001f52:	2200      	movs	r2, #0
	for (int i = 0; i < strlen(dataHexa); i++) {
 8001f54:	4283      	cmp	r3, r0
 8001f56:	d13e      	bne.n	8001fd6 <send_to_xbee+0xb6>
	}
	int sum = 0;
	sum = sum1 + sum2;
	unsigned char two_last_digit = sum & 0xFF;
	unsigned char checksum = 255 - two_last_digit;
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <send_to_xbee+0xd4>)
 8001f5a:	f88d a003 	strb.w	sl, [sp, #3]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f88d 3000 	strb.w	r3, [sp]
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <send_to_xbee+0xd8>)
 8001f66:	f88d 9004 	strb.w	r9, [sp, #4]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f88d 3001 	strb.w	r3, [sp, #1]
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <send_to_xbee+0xdc>)
 8001f72:	f88d 8005 	strb.w	r8, [sp, #5]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f88d 3002 	strb.w	r3, [sp, #2]
	sum = sum1 + sum2;
 8001f7c:	4422      	add	r2, r4
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 8001f7e:	2300      	movs	r3, #0
	unsigned char checksum = 255 - two_last_digit;
 8001f80:	43d2      	mvns	r2, r2
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 8001f82:	f88d 7006 	strb.w	r7, [sp, #6]
 8001f86:	f88d 6007 	strb.w	r6, [sp, #7]
 8001f8a:	f88d 3008 	strb.w	r3, [sp, #8]
 8001f8e:	f88d 3009 	strb.w	r3, [sp, #9]
 8001f92:	f88d 300a 	strb.w	r3, [sp, #10]
 8001f96:	f88d 300b 	strb.w	r3, [sp, #11]
 8001f9a:	f88d 300c 	strb.w	r3, [sp, #12]
 8001f9e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001fa2:	f88d 300e 	strb.w	r3, [sp, #14]
 8001fa6:	f88d 200f 	strb.w	r2, [sp, #15]
	for (int i = 0; i < 7; i++) {
		message[8 + i] = dataHexa[i];
 8001faa:	eb0d 0203 	add.w	r2, sp, r3
 8001fae:	5ce9      	ldrb	r1, [r5, r3]
 8001fb0:	7211      	strb	r1, [r2, #8]
	for (int i = 0; i < 7; i++) {
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d1f8      	bne.n	8001faa <send_to_xbee+0x8a>
	}
	HAL_UART_Transmit(&huart1, message, 16, 100);
 8001fb8:	4669      	mov	r1, sp
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <send_to_xbee+0xe0>)
 8001fc0:	f7ff fe9d 	bl	8001cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, message, 16, 100);
 8001fc4:	2364      	movs	r3, #100	; 0x64
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4669      	mov	r1, sp
 8001fca:	480e      	ldr	r0, [pc, #56]	; (8002004 <send_to_xbee+0xe4>)
 8001fcc:	f7ff fe97 	bl	8001cfe <HAL_UART_Transmit>
}
 8001fd0:	b004      	add	sp, #16
 8001fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sum2 += dataHexa[i];
 8001fd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001fda:	440a      	add	r2, r1
 8001fdc:	e7ba      	b.n	8001f54 <send_to_xbee+0x34>
 8001fde:	bf00      	nop
 8001fe0:	20000007 	.word	0x20000007
 8001fe4:	20000006 	.word	0x20000006
 8001fe8:	20000005 	.word	0x20000005
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	20000091 	.word	0x20000091
 8001ff4:	20000009 	.word	0x20000009
 8001ff8:	20000090 	.word	0x20000090
 8001ffc:	20000008 	.word	0x20000008
 8002000:	200000f0 	.word	0x200000f0
 8002004:	20000168 	.word	0x20000168

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b510      	push	{r4, lr}
 800200a:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 800200c:	f7fe ff0e 	bl	8000e2c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <SystemClock_Config+0xac>)
 8002012:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002016:	f023 0318 	bic.w	r3, r3, #24
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800201e:	2314      	movs	r3, #20
 8002020:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002022:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002024:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002026:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002028:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800202a:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800202c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 16;
 800202e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002030:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002032:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002034:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002036:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002038:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800203c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800203e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002040:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002042:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002044:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002046:	f7fe ffcd 	bl	8000fe4 <HAL_RCC_OscConfig>
 800204a:	b100      	cbz	r0, 800204e <SystemClock_Config+0x46>
 800204c:	e7fe      	b.n	800204c <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204e:	230f      	movs	r3, #15
 8002050:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002052:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002054:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002056:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002058:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800205a:	4621      	mov	r1, r4
 800205c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002060:	f7ff fa12 	bl	8001488 <HAL_RCC_ClockConfig>
 8002064:	b100      	cbz	r0, 8002068 <SystemClock_Config+0x60>
 8002066:	e7fe      	b.n	8002066 <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002068:	2343      	movs	r3, #67	; 0x43
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800206a:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800206c:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800206e:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002072:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	f7ff fb50 	bl	8001718 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	b100      	cbz	r0, 800207c <SystemClock_Config+0x74>
 800207a:	e7fe      	b.n	800207a <SystemClock_Config+0x72>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800207c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002080:	f7fe fee4 	bl	8000e4c <HAL_PWREx_ControlVoltageScaling>
 8002084:	4604      	mov	r4, r0
 8002086:	b100      	cbz	r0, 800208a <SystemClock_Config+0x82>
 8002088:	e7fe      	b.n	8002088 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800208a:	f7ff fa8f 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb0 f0f3 	udiv	r0, r0, r3
 8002096:	f7fe fb05 	bl	80006a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800209a:	2004      	movs	r0, #4
 800209c:	f7fe fb18 	bl	80006d0 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 80020a0:	f7ff fc7e 	bl	80019a0 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020a4:	4622      	mov	r2, r4
 80020a6:	4621      	mov	r1, r4
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7fe fac6 	bl	800063c <HAL_NVIC_SetPriority>
}
 80020b0:	b02c      	add	sp, #176	; 0xb0
 80020b2:	bd10      	pop	{r4, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <main>:
{
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	b088      	sub	sp, #32
  HAL_Init();
 80020bc:	f7fe fa80 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 80020c0:	f7ff ffa2 	bl	8002008 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <main+0x110>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020c6:	4841      	ldr	r0, [pc, #260]	; (80021cc <main+0x114>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ca:	f042 0204 	orr.w	r2, r2, #4
 80020ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80020d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d2:	f002 0204 	and.w	r2, r2, #4
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80020e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e4:	f002 0201 	and.w	r2, r2, #1
 80020e8:	9201      	str	r2, [sp, #4]
 80020ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002104:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002106:	f7fe fba9 	bl	800085c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 800210a:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800210c:	482f      	ldr	r0, [pc, #188]	; (80021cc <main+0x114>)
  GPIO_InitStruct.Pin = LD3_Pin;
 800210e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002110:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002118:	f7fe faec 	bl	80006f4 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800211c:	482c      	ldr	r0, [pc, #176]	; (80021d0 <main+0x118>)
  huart2.Init.BaudRate = 115200;
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <main+0x11c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002120:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002122:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8002126:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800212a:	260c      	movs	r6, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800212c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002130:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002136:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002138:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	f7ff fe69 	bl	8001e10 <HAL_UART_Init>
 800213e:	b100      	cbz	r0, 8002142 <main+0x8a>
 8002140:	e7fe      	b.n	8002140 <main+0x88>
  huart1.Instance = USART1;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <main+0x120>)
  huart1.Init.BaudRate = 9600;
 8002144:	4925      	ldr	r1, [pc, #148]	; (80021dc <main+0x124>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8002148:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
 800214c:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214e:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002150:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002152:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002154:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002156:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002158:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 800215a:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800215e:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002160:	f7ff fe56 	bl	8001e10 <HAL_UART_Init>
 8002164:	b100      	cbz	r0, 8002168 <main+0xb0>
 8002166:	e7fe      	b.n	8002166 <main+0xae>
  hi2c1.Instance = I2C1;
 8002168:	4c1d      	ldr	r4, [pc, #116]	; (80021e0 <main+0x128>)
  hi2c1.Init.Timing = 0x00707CBB;
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <main+0x12c>)
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <main+0x130>)
  hi2c1.Init.OwnAddress1 = 0;
 800216e:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002170:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002172:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002174:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002176:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002178:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217a:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 800217c:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002180:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002182:	f7fe fc8b 	bl	8000a9c <HAL_I2C_Init>
 8002186:	4601      	mov	r1, r0
 8002188:	b100      	cbz	r0, 800218c <main+0xd4>
 800218a:	e7fe      	b.n	800218a <main+0xd2>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218c:	4620      	mov	r0, r4
 800218e:	f7fe fe01 	bl	8000d94 <HAL_I2CEx_ConfigAnalogFilter>
 8002192:	4601      	mov	r1, r0
 8002194:	b100      	cbz	r0, 8002198 <main+0xe0>
 8002196:	e7fe      	b.n	8002196 <main+0xde>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fe21 	bl	8000de0 <HAL_I2CEx_ConfigDigitalFilter>
 800219e:	b990      	cbnz	r0, 80021c6 <main+0x10e>
	  sprintf(data,"CO=%d", CO);
 80021a0:	4d12      	ldr	r5, [pc, #72]	; (80021ec <main+0x134>)
	  char data[8]="";
 80021a2:	4604      	mov	r4, r0
 80021a4:	9403      	str	r4, [sp, #12]
 80021a6:	9404      	str	r4, [sp, #16]
	  uint16_t CO=applicationTask();
 80021a8:	f7ff feae 	bl	8001f08 <applicationTask>
	  sprintf(data,"CO=%d", CO);
 80021ac:	4629      	mov	r1, r5
 80021ae:	4602      	mov	r2, r0
 80021b0:	a803      	add	r0, sp, #12
 80021b2:	f000 f959 	bl	8002468 <siprintf>
	  send_to_xbee(data);
 80021b6:	a803      	add	r0, sp, #12
 80021b8:	f7ff feb2 	bl	8001f20 <send_to_xbee>
	  HAL_Delay(1000);
 80021bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021c0:	f7fe fa1c 	bl	80005fc <HAL_Delay>
 80021c4:	e7ee      	b.n	80021a4 <main+0xec>
 80021c6:	e7fe      	b.n	80021c6 <main+0x10e>
 80021c8:	40021000 	.word	0x40021000
 80021cc:	48000400 	.word	0x48000400
 80021d0:	20000168 	.word	0x20000168
 80021d4:	40004400 	.word	0x40004400
 80021d8:	200000f0 	.word	0x200000f0
 80021dc:	40013800 	.word	0x40013800
 80021e0:	200000a4 	.word	0x200000a4
 80021e4:	40005400 	.word	0x40005400
 80021e8:	00707cbb 	.word	0x00707cbb
 80021ec:	08002ce9 	.word	0x08002ce9

080021f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_MspInit+0x88>)
{
 80021f2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
 80021fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021fe:	f002 0201 	and.w	r2, r2, #1
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002208:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800220c:	659a      	str	r2, [r3, #88]	; 0x58
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002216:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	f7fe f9fd 	bl	8000618 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	4611      	mov	r1, r2
 8002222:	f06f 000b 	mvn.w	r0, #11
 8002226:	f7fe fa09 	bl	800063c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	4611      	mov	r1, r2
 800222e:	f06f 000a 	mvn.w	r0, #10
 8002232:	f7fe fa03 	bl	800063c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	4611      	mov	r1, r2
 800223a:	f06f 0009 	mvn.w	r0, #9
 800223e:	f7fe f9fd 	bl	800063c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	4611      	mov	r1, r2
 8002246:	f06f 0004 	mvn.w	r0, #4
 800224a:	f7fe f9f7 	bl	800063c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	4611      	mov	r1, r2
 8002252:	f06f 0003 	mvn.w	r0, #3
 8002256:	f7fe f9f1 	bl	800063c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	4611      	mov	r1, r2
 800225e:	f06f 0001 	mvn.w	r0, #1
 8002262:	f7fe f9eb 	bl	800063c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	4611      	mov	r1, r2
 800226a:	f04f 30ff 	mov.w	r0, #4294967295
 800226e:	f7fe f9e5 	bl	800063c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	b003      	add	sp, #12
 8002274:	f85d fb04 	ldr.w	pc, [sp], #4
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800227c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_I2C_MspInit+0x44>)
 8002282:	429a      	cmp	r2, r3
 8002284:	d118      	bne.n	80022b8 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002286:	23c0      	movs	r3, #192	; 0xc0
 8002288:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228a:	2312      	movs	r3, #18
 800228c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002296:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	eb0d 0103 	add.w	r1, sp, r3
 800229c:	4809      	ldr	r0, [pc, #36]	; (80022c4 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800229e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f7fe fa28 	bl	80006f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_I2C_MspInit+0x4c>)
 80022a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022b8:	b007      	add	sp, #28
 80022ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80022be:	bf00      	nop
 80022c0:	40005400 	.word	0x40005400
 80022c4:	48000400 	.word	0x48000400
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80022ce:	6803      	ldr	r3, [r0, #0]
 80022d0:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_UART_MspInit+0x8c>)
 80022d2:	4293      	cmp	r3, r2
{
 80022d4:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80022d6:	d11b      	bne.n	8002310 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_UART_MspInit+0x90>)
 80022da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022e0:	661a      	str	r2, [r3, #96]	; 0x60
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022fe:	2307      	movs	r3, #7
 8002300:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002302:	a903      	add	r1, sp, #12
 8002304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002308:	f7fe f9f4 	bl	80006f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800230c:	b008      	add	sp, #32
 800230e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_UART_MspInit+0x94>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d1fa      	bne.n	800230c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_UART_MspInit+0x90>)
 8002318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800231a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800231e:	659a      	str	r2, [r3, #88]	; 0x58
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800232a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800232e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002332:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002336:	a903      	add	r1, sp, #12
 8002338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800233c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002344:	f7fe f9d6 	bl	80006f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002354:	9407      	str	r4, [sp, #28]
 8002356:	e7d4      	b.n	8002302 <HAL_UART_MspInit+0x36>
 8002358:	40013800 	.word	0x40013800
 800235c:	40021000 	.word	0x40021000
 8002360:	40004400 	.word	0x40004400

08002364 <NMI_Handler>:
 8002364:	4770      	bx	lr

08002366 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler>

08002368 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler>

0800236a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800236a:	e7fe      	b.n	800236a <BusFault_Handler>

0800236c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler>

0800236e <SVC_Handler>:
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:
 8002370:	4770      	bx	lr

08002372 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002372:	4770      	bx	lr

08002374 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002374:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002376:	f7fe f933 	bl	80005e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800237e:	f7fe b9b4 	b.w	80006ea <HAL_SYSTICK_IRQHandler>
	...

08002384 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	490f      	ldr	r1, [pc, #60]	; (80023c4 <SystemInit+0x40>)
 8002386:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800238a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <SystemInit+0x44>)
 8002394:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002396:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800239e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80023a6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80023aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023b8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023ba:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023c0:	608b      	str	r3, [r1, #8]
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00
 80023c8:	40021000 	.word	0x40021000

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <LoopForever+0xa>)
	ldr	r3, =_edata
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
	ldr	r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <LoopForever+0x16>)
	cmp	r2, r3
 80023f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023f6:	f7ff ffc5 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f000 f811 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7ff fe5b 	bl	80020b8 <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002404:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002408:	08002d7c 	.word	0x08002d7c
	ldr	r0, =_sdata
 800240c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002410:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002414:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002418:	200001e4 	.word	0x200001e4

0800241c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_IRQHandler>
	...

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4e0d      	ldr	r6, [pc, #52]	; (8002458 <__libc_init_array+0x38>)
 8002424:	4c0d      	ldr	r4, [pc, #52]	; (800245c <__libc_init_array+0x3c>)
 8002426:	1ba4      	subs	r4, r4, r6
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	2500      	movs	r5, #0
 800242c:	42a5      	cmp	r5, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	4e0b      	ldr	r6, [pc, #44]	; (8002460 <__libc_init_array+0x40>)
 8002432:	4c0c      	ldr	r4, [pc, #48]	; (8002464 <__libc_init_array+0x44>)
 8002434:	f000 fc44 	bl	8002cc0 <_init>
 8002438:	1ba4      	subs	r4, r4, r6
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	2500      	movs	r5, #0
 800243e:	42a5      	cmp	r5, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002448:	4798      	blx	r3
 800244a:	3501      	adds	r5, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002452:	4798      	blx	r3
 8002454:	3501      	adds	r5, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	08002d74 	.word	0x08002d74
 800245c:	08002d74 	.word	0x08002d74
 8002460:	08002d74 	.word	0x08002d74
 8002464:	08002d78 	.word	0x08002d78

08002468 <siprintf>:
 8002468:	b40e      	push	{r1, r2, r3}
 800246a:	b500      	push	{lr}
 800246c:	b09c      	sub	sp, #112	; 0x70
 800246e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002472:	ab1d      	add	r3, sp, #116	; 0x74
 8002474:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002478:	9002      	str	r0, [sp, #8]
 800247a:	9006      	str	r0, [sp, #24]
 800247c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002480:	480a      	ldr	r0, [pc, #40]	; (80024ac <siprintf+0x44>)
 8002482:	9104      	str	r1, [sp, #16]
 8002484:	9107      	str	r1, [sp, #28]
 8002486:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800248a:	f853 2b04 	ldr.w	r2, [r3], #4
 800248e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002492:	6800      	ldr	r0, [r0, #0]
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	a902      	add	r1, sp, #8
 8002498:	f000 f866 	bl	8002568 <_svfiprintf_r>
 800249c:	9b02      	ldr	r3, [sp, #8]
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	b01c      	add	sp, #112	; 0x70
 80024a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024a8:	b003      	add	sp, #12
 80024aa:	4770      	bx	lr
 80024ac:	20000010 	.word	0x20000010

080024b0 <__ssputs_r>:
 80024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b4:	688e      	ldr	r6, [r1, #8]
 80024b6:	429e      	cmp	r6, r3
 80024b8:	4682      	mov	sl, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4691      	mov	r9, r2
 80024be:	4698      	mov	r8, r3
 80024c0:	d835      	bhi.n	800252e <__ssputs_r+0x7e>
 80024c2:	898a      	ldrh	r2, [r1, #12]
 80024c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024c8:	d031      	beq.n	800252e <__ssputs_r+0x7e>
 80024ca:	6825      	ldr	r5, [r4, #0]
 80024cc:	6909      	ldr	r1, [r1, #16]
 80024ce:	1a6f      	subs	r7, r5, r1
 80024d0:	6965      	ldr	r5, [r4, #20]
 80024d2:	2302      	movs	r3, #2
 80024d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80024dc:	f108 0301 	add.w	r3, r8, #1
 80024e0:	443b      	add	r3, r7
 80024e2:	429d      	cmp	r5, r3
 80024e4:	bf38      	it	cc
 80024e6:	461d      	movcc	r5, r3
 80024e8:	0553      	lsls	r3, r2, #21
 80024ea:	d531      	bpl.n	8002550 <__ssputs_r+0xa0>
 80024ec:	4629      	mov	r1, r5
 80024ee:	f000 fb39 	bl	8002b64 <_malloc_r>
 80024f2:	4606      	mov	r6, r0
 80024f4:	b950      	cbnz	r0, 800250c <__ssputs_r+0x5c>
 80024f6:	230c      	movs	r3, #12
 80024f8:	f8ca 3000 	str.w	r3, [sl]
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002502:	81a3      	strh	r3, [r4, #12]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800250c:	463a      	mov	r2, r7
 800250e:	6921      	ldr	r1, [r4, #16]
 8002510:	f000 fab4 	bl	8002a7c <memcpy>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	6126      	str	r6, [r4, #16]
 8002522:	6165      	str	r5, [r4, #20]
 8002524:	443e      	add	r6, r7
 8002526:	1bed      	subs	r5, r5, r7
 8002528:	6026      	str	r6, [r4, #0]
 800252a:	60a5      	str	r5, [r4, #8]
 800252c:	4646      	mov	r6, r8
 800252e:	4546      	cmp	r6, r8
 8002530:	bf28      	it	cs
 8002532:	4646      	movcs	r6, r8
 8002534:	4632      	mov	r2, r6
 8002536:	4649      	mov	r1, r9
 8002538:	6820      	ldr	r0, [r4, #0]
 800253a:	f000 faaa 	bl	8002a92 <memmove>
 800253e:	68a3      	ldr	r3, [r4, #8]
 8002540:	1b9b      	subs	r3, r3, r6
 8002542:	60a3      	str	r3, [r4, #8]
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	441e      	add	r6, r3
 8002548:	6026      	str	r6, [r4, #0]
 800254a:	2000      	movs	r0, #0
 800254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002550:	462a      	mov	r2, r5
 8002552:	f000 fb65 	bl	8002c20 <_realloc_r>
 8002556:	4606      	mov	r6, r0
 8002558:	2800      	cmp	r0, #0
 800255a:	d1e1      	bne.n	8002520 <__ssputs_r+0x70>
 800255c:	6921      	ldr	r1, [r4, #16]
 800255e:	4650      	mov	r0, sl
 8002560:	f000 fab2 	bl	8002ac8 <_free_r>
 8002564:	e7c7      	b.n	80024f6 <__ssputs_r+0x46>
	...

08002568 <_svfiprintf_r>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	b09d      	sub	sp, #116	; 0x74
 800256e:	4680      	mov	r8, r0
 8002570:	9303      	str	r3, [sp, #12]
 8002572:	898b      	ldrh	r3, [r1, #12]
 8002574:	061c      	lsls	r4, r3, #24
 8002576:	460d      	mov	r5, r1
 8002578:	4616      	mov	r6, r2
 800257a:	d50f      	bpl.n	800259c <_svfiprintf_r+0x34>
 800257c:	690b      	ldr	r3, [r1, #16]
 800257e:	b96b      	cbnz	r3, 800259c <_svfiprintf_r+0x34>
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	f000 faef 	bl	8002b64 <_malloc_r>
 8002586:	6028      	str	r0, [r5, #0]
 8002588:	6128      	str	r0, [r5, #16]
 800258a:	b928      	cbnz	r0, 8002598 <_svfiprintf_r+0x30>
 800258c:	230c      	movs	r3, #12
 800258e:	f8c8 3000 	str.w	r3, [r8]
 8002592:	f04f 30ff 	mov.w	r0, #4294967295
 8002596:	e0c5      	b.n	8002724 <_svfiprintf_r+0x1bc>
 8002598:	2340      	movs	r3, #64	; 0x40
 800259a:	616b      	str	r3, [r5, #20]
 800259c:	2300      	movs	r3, #0
 800259e:	9309      	str	r3, [sp, #36]	; 0x24
 80025a0:	2320      	movs	r3, #32
 80025a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025a6:	2330      	movs	r3, #48	; 0x30
 80025a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025ac:	f04f 0b01 	mov.w	fp, #1
 80025b0:	4637      	mov	r7, r6
 80025b2:	463c      	mov	r4, r7
 80025b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13c      	bne.n	8002636 <_svfiprintf_r+0xce>
 80025bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80025c0:	d00b      	beq.n	80025da <_svfiprintf_r+0x72>
 80025c2:	4653      	mov	r3, sl
 80025c4:	4632      	mov	r2, r6
 80025c6:	4629      	mov	r1, r5
 80025c8:	4640      	mov	r0, r8
 80025ca:	f7ff ff71 	bl	80024b0 <__ssputs_r>
 80025ce:	3001      	adds	r0, #1
 80025d0:	f000 80a3 	beq.w	800271a <_svfiprintf_r+0x1b2>
 80025d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025d6:	4453      	add	r3, sl
 80025d8:	9309      	str	r3, [sp, #36]	; 0x24
 80025da:	783b      	ldrb	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 809c 	beq.w	800271a <_svfiprintf_r+0x1b2>
 80025e2:	2300      	movs	r3, #0
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	9307      	str	r3, [sp, #28]
 80025ec:	9205      	str	r2, [sp, #20]
 80025ee:	9306      	str	r3, [sp, #24]
 80025f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025f4:	931a      	str	r3, [sp, #104]	; 0x68
 80025f6:	2205      	movs	r2, #5
 80025f8:	7821      	ldrb	r1, [r4, #0]
 80025fa:	4850      	ldr	r0, [pc, #320]	; (800273c <_svfiprintf_r+0x1d4>)
 80025fc:	f7fd fdf0 	bl	80001e0 <memchr>
 8002600:	1c67      	adds	r7, r4, #1
 8002602:	9b04      	ldr	r3, [sp, #16]
 8002604:	b9d8      	cbnz	r0, 800263e <_svfiprintf_r+0xd6>
 8002606:	06d9      	lsls	r1, r3, #27
 8002608:	bf44      	itt	mi
 800260a:	2220      	movmi	r2, #32
 800260c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002610:	071a      	lsls	r2, r3, #28
 8002612:	bf44      	itt	mi
 8002614:	222b      	movmi	r2, #43	; 0x2b
 8002616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800261a:	7822      	ldrb	r2, [r4, #0]
 800261c:	2a2a      	cmp	r2, #42	; 0x2a
 800261e:	d016      	beq.n	800264e <_svfiprintf_r+0xe6>
 8002620:	9a07      	ldr	r2, [sp, #28]
 8002622:	2100      	movs	r1, #0
 8002624:	200a      	movs	r0, #10
 8002626:	4627      	mov	r7, r4
 8002628:	3401      	adds	r4, #1
 800262a:	783b      	ldrb	r3, [r7, #0]
 800262c:	3b30      	subs	r3, #48	; 0x30
 800262e:	2b09      	cmp	r3, #9
 8002630:	d951      	bls.n	80026d6 <_svfiprintf_r+0x16e>
 8002632:	b1c9      	cbz	r1, 8002668 <_svfiprintf_r+0x100>
 8002634:	e011      	b.n	800265a <_svfiprintf_r+0xf2>
 8002636:	2b25      	cmp	r3, #37	; 0x25
 8002638:	d0c0      	beq.n	80025bc <_svfiprintf_r+0x54>
 800263a:	4627      	mov	r7, r4
 800263c:	e7b9      	b.n	80025b2 <_svfiprintf_r+0x4a>
 800263e:	4a3f      	ldr	r2, [pc, #252]	; (800273c <_svfiprintf_r+0x1d4>)
 8002640:	1a80      	subs	r0, r0, r2
 8002642:	fa0b f000 	lsl.w	r0, fp, r0
 8002646:	4318      	orrs	r0, r3
 8002648:	9004      	str	r0, [sp, #16]
 800264a:	463c      	mov	r4, r7
 800264c:	e7d3      	b.n	80025f6 <_svfiprintf_r+0x8e>
 800264e:	9a03      	ldr	r2, [sp, #12]
 8002650:	1d11      	adds	r1, r2, #4
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	9103      	str	r1, [sp, #12]
 8002656:	2a00      	cmp	r2, #0
 8002658:	db01      	blt.n	800265e <_svfiprintf_r+0xf6>
 800265a:	9207      	str	r2, [sp, #28]
 800265c:	e004      	b.n	8002668 <_svfiprintf_r+0x100>
 800265e:	4252      	negs	r2, r2
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	9207      	str	r2, [sp, #28]
 8002666:	9304      	str	r3, [sp, #16]
 8002668:	783b      	ldrb	r3, [r7, #0]
 800266a:	2b2e      	cmp	r3, #46	; 0x2e
 800266c:	d10e      	bne.n	800268c <_svfiprintf_r+0x124>
 800266e:	787b      	ldrb	r3, [r7, #1]
 8002670:	2b2a      	cmp	r3, #42	; 0x2a
 8002672:	f107 0101 	add.w	r1, r7, #1
 8002676:	d132      	bne.n	80026de <_svfiprintf_r+0x176>
 8002678:	9b03      	ldr	r3, [sp, #12]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	9203      	str	r2, [sp, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	bfb8      	it	lt
 8002684:	f04f 33ff 	movlt.w	r3, #4294967295
 8002688:	3702      	adds	r7, #2
 800268a:	9305      	str	r3, [sp, #20]
 800268c:	4c2c      	ldr	r4, [pc, #176]	; (8002740 <_svfiprintf_r+0x1d8>)
 800268e:	7839      	ldrb	r1, [r7, #0]
 8002690:	2203      	movs	r2, #3
 8002692:	4620      	mov	r0, r4
 8002694:	f7fd fda4 	bl	80001e0 <memchr>
 8002698:	b138      	cbz	r0, 80026aa <_svfiprintf_r+0x142>
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	1b00      	subs	r0, r0, r4
 800269e:	fa03 f000 	lsl.w	r0, r3, r0
 80026a2:	9b04      	ldr	r3, [sp, #16]
 80026a4:	4303      	orrs	r3, r0
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	3701      	adds	r7, #1
 80026aa:	7839      	ldrb	r1, [r7, #0]
 80026ac:	4825      	ldr	r0, [pc, #148]	; (8002744 <_svfiprintf_r+0x1dc>)
 80026ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026b2:	2206      	movs	r2, #6
 80026b4:	1c7e      	adds	r6, r7, #1
 80026b6:	f7fd fd93 	bl	80001e0 <memchr>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d035      	beq.n	800272a <_svfiprintf_r+0x1c2>
 80026be:	4b22      	ldr	r3, [pc, #136]	; (8002748 <_svfiprintf_r+0x1e0>)
 80026c0:	b9fb      	cbnz	r3, 8002702 <_svfiprintf_r+0x19a>
 80026c2:	9b03      	ldr	r3, [sp, #12]
 80026c4:	3307      	adds	r3, #7
 80026c6:	f023 0307 	bic.w	r3, r3, #7
 80026ca:	3308      	adds	r3, #8
 80026cc:	9303      	str	r3, [sp, #12]
 80026ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d0:	444b      	add	r3, r9
 80026d2:	9309      	str	r3, [sp, #36]	; 0x24
 80026d4:	e76c      	b.n	80025b0 <_svfiprintf_r+0x48>
 80026d6:	fb00 3202 	mla	r2, r0, r2, r3
 80026da:	2101      	movs	r1, #1
 80026dc:	e7a3      	b.n	8002626 <_svfiprintf_r+0xbe>
 80026de:	2300      	movs	r3, #0
 80026e0:	9305      	str	r3, [sp, #20]
 80026e2:	4618      	mov	r0, r3
 80026e4:	240a      	movs	r4, #10
 80026e6:	460f      	mov	r7, r1
 80026e8:	3101      	adds	r1, #1
 80026ea:	783a      	ldrb	r2, [r7, #0]
 80026ec:	3a30      	subs	r2, #48	; 0x30
 80026ee:	2a09      	cmp	r2, #9
 80026f0:	d903      	bls.n	80026fa <_svfiprintf_r+0x192>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ca      	beq.n	800268c <_svfiprintf_r+0x124>
 80026f6:	9005      	str	r0, [sp, #20]
 80026f8:	e7c8      	b.n	800268c <_svfiprintf_r+0x124>
 80026fa:	fb04 2000 	mla	r0, r4, r0, r2
 80026fe:	2301      	movs	r3, #1
 8002700:	e7f1      	b.n	80026e6 <_svfiprintf_r+0x17e>
 8002702:	ab03      	add	r3, sp, #12
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	462a      	mov	r2, r5
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <_svfiprintf_r+0x1e4>)
 800270a:	a904      	add	r1, sp, #16
 800270c:	4640      	mov	r0, r8
 800270e:	f3af 8000 	nop.w
 8002712:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002716:	4681      	mov	r9, r0
 8002718:	d1d9      	bne.n	80026ce <_svfiprintf_r+0x166>
 800271a:	89ab      	ldrh	r3, [r5, #12]
 800271c:	065b      	lsls	r3, r3, #25
 800271e:	f53f af38 	bmi.w	8002592 <_svfiprintf_r+0x2a>
 8002722:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002724:	b01d      	add	sp, #116	; 0x74
 8002726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272a:	ab03      	add	r3, sp, #12
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	462a      	mov	r2, r5
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <_svfiprintf_r+0x1e4>)
 8002732:	a904      	add	r1, sp, #16
 8002734:	4640      	mov	r0, r8
 8002736:	f000 f881 	bl	800283c <_printf_i>
 800273a:	e7ea      	b.n	8002712 <_svfiprintf_r+0x1aa>
 800273c:	08002d38 	.word	0x08002d38
 8002740:	08002d3e 	.word	0x08002d3e
 8002744:	08002d42 	.word	0x08002d42
 8002748:	00000000 	.word	0x00000000
 800274c:	080024b1 	.word	0x080024b1

08002750 <_printf_common>:
 8002750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	4691      	mov	r9, r2
 8002756:	461f      	mov	r7, r3
 8002758:	688a      	ldr	r2, [r1, #8]
 800275a:	690b      	ldr	r3, [r1, #16]
 800275c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002760:	4293      	cmp	r3, r2
 8002762:	bfb8      	it	lt
 8002764:	4613      	movlt	r3, r2
 8002766:	f8c9 3000 	str.w	r3, [r9]
 800276a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800276e:	4606      	mov	r6, r0
 8002770:	460c      	mov	r4, r1
 8002772:	b112      	cbz	r2, 800277a <_printf_common+0x2a>
 8002774:	3301      	adds	r3, #1
 8002776:	f8c9 3000 	str.w	r3, [r9]
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	0699      	lsls	r1, r3, #26
 800277e:	bf42      	ittt	mi
 8002780:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002784:	3302      	addmi	r3, #2
 8002786:	f8c9 3000 	strmi.w	r3, [r9]
 800278a:	6825      	ldr	r5, [r4, #0]
 800278c:	f015 0506 	ands.w	r5, r5, #6
 8002790:	d107      	bne.n	80027a2 <_printf_common+0x52>
 8002792:	f104 0a19 	add.w	sl, r4, #25
 8002796:	68e3      	ldr	r3, [r4, #12]
 8002798:	f8d9 2000 	ldr.w	r2, [r9]
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	429d      	cmp	r5, r3
 80027a0:	db29      	blt.n	80027f6 <_printf_common+0xa6>
 80027a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80027a6:	6822      	ldr	r2, [r4, #0]
 80027a8:	3300      	adds	r3, #0
 80027aa:	bf18      	it	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	0692      	lsls	r2, r2, #26
 80027b0:	d42e      	bmi.n	8002810 <_printf_common+0xc0>
 80027b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027b6:	4639      	mov	r1, r7
 80027b8:	4630      	mov	r0, r6
 80027ba:	47c0      	blx	r8
 80027bc:	3001      	adds	r0, #1
 80027be:	d021      	beq.n	8002804 <_printf_common+0xb4>
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	68e5      	ldr	r5, [r4, #12]
 80027c4:	f8d9 2000 	ldr.w	r2, [r9]
 80027c8:	f003 0306 	and.w	r3, r3, #6
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	bf08      	it	eq
 80027d0:	1aad      	subeq	r5, r5, r2
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	bf0c      	ite	eq
 80027d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027dc:	2500      	movne	r5, #0
 80027de:	4293      	cmp	r3, r2
 80027e0:	bfc4      	itt	gt
 80027e2:	1a9b      	subgt	r3, r3, r2
 80027e4:	18ed      	addgt	r5, r5, r3
 80027e6:	f04f 0900 	mov.w	r9, #0
 80027ea:	341a      	adds	r4, #26
 80027ec:	454d      	cmp	r5, r9
 80027ee:	d11b      	bne.n	8002828 <_printf_common+0xd8>
 80027f0:	2000      	movs	r0, #0
 80027f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f6:	2301      	movs	r3, #1
 80027f8:	4652      	mov	r2, sl
 80027fa:	4639      	mov	r1, r7
 80027fc:	4630      	mov	r0, r6
 80027fe:	47c0      	blx	r8
 8002800:	3001      	adds	r0, #1
 8002802:	d103      	bne.n	800280c <_printf_common+0xbc>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280c:	3501      	adds	r5, #1
 800280e:	e7c2      	b.n	8002796 <_printf_common+0x46>
 8002810:	18e1      	adds	r1, r4, r3
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	2030      	movs	r0, #48	; 0x30
 8002816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800281a:	4422      	add	r2, r4
 800281c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002824:	3302      	adds	r3, #2
 8002826:	e7c4      	b.n	80027b2 <_printf_common+0x62>
 8002828:	2301      	movs	r3, #1
 800282a:	4622      	mov	r2, r4
 800282c:	4639      	mov	r1, r7
 800282e:	4630      	mov	r0, r6
 8002830:	47c0      	blx	r8
 8002832:	3001      	adds	r0, #1
 8002834:	d0e6      	beq.n	8002804 <_printf_common+0xb4>
 8002836:	f109 0901 	add.w	r9, r9, #1
 800283a:	e7d7      	b.n	80027ec <_printf_common+0x9c>

0800283c <_printf_i>:
 800283c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002840:	4617      	mov	r7, r2
 8002842:	7e0a      	ldrb	r2, [r1, #24]
 8002844:	b085      	sub	sp, #20
 8002846:	2a6e      	cmp	r2, #110	; 0x6e
 8002848:	4698      	mov	r8, r3
 800284a:	4606      	mov	r6, r0
 800284c:	460c      	mov	r4, r1
 800284e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002850:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002854:	f000 80bc 	beq.w	80029d0 <_printf_i+0x194>
 8002858:	d81a      	bhi.n	8002890 <_printf_i+0x54>
 800285a:	2a63      	cmp	r2, #99	; 0x63
 800285c:	d02e      	beq.n	80028bc <_printf_i+0x80>
 800285e:	d80a      	bhi.n	8002876 <_printf_i+0x3a>
 8002860:	2a00      	cmp	r2, #0
 8002862:	f000 80c8 	beq.w	80029f6 <_printf_i+0x1ba>
 8002866:	2a58      	cmp	r2, #88	; 0x58
 8002868:	f000 808a 	beq.w	8002980 <_printf_i+0x144>
 800286c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002870:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002874:	e02a      	b.n	80028cc <_printf_i+0x90>
 8002876:	2a64      	cmp	r2, #100	; 0x64
 8002878:	d001      	beq.n	800287e <_printf_i+0x42>
 800287a:	2a69      	cmp	r2, #105	; 0x69
 800287c:	d1f6      	bne.n	800286c <_printf_i+0x30>
 800287e:	6821      	ldr	r1, [r4, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002886:	d023      	beq.n	80028d0 <_printf_i+0x94>
 8002888:	1d11      	adds	r1, r2, #4
 800288a:	6019      	str	r1, [r3, #0]
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	e027      	b.n	80028e0 <_printf_i+0xa4>
 8002890:	2a73      	cmp	r2, #115	; 0x73
 8002892:	f000 80b4 	beq.w	80029fe <_printf_i+0x1c2>
 8002896:	d808      	bhi.n	80028aa <_printf_i+0x6e>
 8002898:	2a6f      	cmp	r2, #111	; 0x6f
 800289a:	d02a      	beq.n	80028f2 <_printf_i+0xb6>
 800289c:	2a70      	cmp	r2, #112	; 0x70
 800289e:	d1e5      	bne.n	800286c <_printf_i+0x30>
 80028a0:	680a      	ldr	r2, [r1, #0]
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	600a      	str	r2, [r1, #0]
 80028a8:	e003      	b.n	80028b2 <_printf_i+0x76>
 80028aa:	2a75      	cmp	r2, #117	; 0x75
 80028ac:	d021      	beq.n	80028f2 <_printf_i+0xb6>
 80028ae:	2a78      	cmp	r2, #120	; 0x78
 80028b0:	d1dc      	bne.n	800286c <_printf_i+0x30>
 80028b2:	2278      	movs	r2, #120	; 0x78
 80028b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80028b8:	496e      	ldr	r1, [pc, #440]	; (8002a74 <_printf_i+0x238>)
 80028ba:	e064      	b.n	8002986 <_printf_i+0x14a>
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80028c2:	1d11      	adds	r1, r2, #4
 80028c4:	6019      	str	r1, [r3, #0]
 80028c6:	6813      	ldr	r3, [r2, #0]
 80028c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a3      	b.n	8002a18 <_printf_i+0x1dc>
 80028d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80028d4:	f102 0104 	add.w	r1, r2, #4
 80028d8:	6019      	str	r1, [r3, #0]
 80028da:	d0d7      	beq.n	800288c <_printf_i+0x50>
 80028dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da03      	bge.n	80028ec <_printf_i+0xb0>
 80028e4:	222d      	movs	r2, #45	; 0x2d
 80028e6:	425b      	negs	r3, r3
 80028e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028ec:	4962      	ldr	r1, [pc, #392]	; (8002a78 <_printf_i+0x23c>)
 80028ee:	220a      	movs	r2, #10
 80028f0:	e017      	b.n	8002922 <_printf_i+0xe6>
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028fa:	d003      	beq.n	8002904 <_printf_i+0xc8>
 80028fc:	1d08      	adds	r0, r1, #4
 80028fe:	6018      	str	r0, [r3, #0]
 8002900:	680b      	ldr	r3, [r1, #0]
 8002902:	e006      	b.n	8002912 <_printf_i+0xd6>
 8002904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002908:	f101 0004 	add.w	r0, r1, #4
 800290c:	6018      	str	r0, [r3, #0]
 800290e:	d0f7      	beq.n	8002900 <_printf_i+0xc4>
 8002910:	880b      	ldrh	r3, [r1, #0]
 8002912:	4959      	ldr	r1, [pc, #356]	; (8002a78 <_printf_i+0x23c>)
 8002914:	2a6f      	cmp	r2, #111	; 0x6f
 8002916:	bf14      	ite	ne
 8002918:	220a      	movne	r2, #10
 800291a:	2208      	moveq	r2, #8
 800291c:	2000      	movs	r0, #0
 800291e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002922:	6865      	ldr	r5, [r4, #4]
 8002924:	60a5      	str	r5, [r4, #8]
 8002926:	2d00      	cmp	r5, #0
 8002928:	f2c0 809c 	blt.w	8002a64 <_printf_i+0x228>
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	f020 0004 	bic.w	r0, r0, #4
 8002932:	6020      	str	r0, [r4, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13f      	bne.n	80029b8 <_printf_i+0x17c>
 8002938:	2d00      	cmp	r5, #0
 800293a:	f040 8095 	bne.w	8002a68 <_printf_i+0x22c>
 800293e:	4675      	mov	r5, lr
 8002940:	2a08      	cmp	r2, #8
 8002942:	d10b      	bne.n	800295c <_printf_i+0x120>
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	07da      	lsls	r2, r3, #31
 8002948:	d508      	bpl.n	800295c <_printf_i+0x120>
 800294a:	6923      	ldr	r3, [r4, #16]
 800294c:	6862      	ldr	r2, [r4, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	bfde      	ittt	le
 8002952:	2330      	movle	r3, #48	; 0x30
 8002954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800295c:	ebae 0305 	sub.w	r3, lr, r5
 8002960:	6123      	str	r3, [r4, #16]
 8002962:	f8cd 8000 	str.w	r8, [sp]
 8002966:	463b      	mov	r3, r7
 8002968:	aa03      	add	r2, sp, #12
 800296a:	4621      	mov	r1, r4
 800296c:	4630      	mov	r0, r6
 800296e:	f7ff feef 	bl	8002750 <_printf_common>
 8002972:	3001      	adds	r0, #1
 8002974:	d155      	bne.n	8002a22 <_printf_i+0x1e6>
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	b005      	add	sp, #20
 800297c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002980:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002984:	493c      	ldr	r1, [pc, #240]	; (8002a78 <_printf_i+0x23c>)
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800298e:	f100 0504 	add.w	r5, r0, #4
 8002992:	601d      	str	r5, [r3, #0]
 8002994:	d001      	beq.n	800299a <_printf_i+0x15e>
 8002996:	6803      	ldr	r3, [r0, #0]
 8002998:	e002      	b.n	80029a0 <_printf_i+0x164>
 800299a:	0655      	lsls	r5, r2, #25
 800299c:	d5fb      	bpl.n	8002996 <_printf_i+0x15a>
 800299e:	8803      	ldrh	r3, [r0, #0]
 80029a0:	07d0      	lsls	r0, r2, #31
 80029a2:	bf44      	itt	mi
 80029a4:	f042 0220 	orrmi.w	r2, r2, #32
 80029a8:	6022      	strmi	r2, [r4, #0]
 80029aa:	b91b      	cbnz	r3, 80029b4 <_printf_i+0x178>
 80029ac:	6822      	ldr	r2, [r4, #0]
 80029ae:	f022 0220 	bic.w	r2, r2, #32
 80029b2:	6022      	str	r2, [r4, #0]
 80029b4:	2210      	movs	r2, #16
 80029b6:	e7b1      	b.n	800291c <_printf_i+0xe0>
 80029b8:	4675      	mov	r5, lr
 80029ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80029be:	fb02 3310 	mls	r3, r2, r0, r3
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80029c8:	4603      	mov	r3, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d1f5      	bne.n	80029ba <_printf_i+0x17e>
 80029ce:	e7b7      	b.n	8002940 <_printf_i+0x104>
 80029d0:	6808      	ldr	r0, [r1, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	6949      	ldr	r1, [r1, #20]
 80029d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029da:	d004      	beq.n	80029e6 <_printf_i+0x1aa>
 80029dc:	1d10      	adds	r0, r2, #4
 80029de:	6018      	str	r0, [r3, #0]
 80029e0:	6813      	ldr	r3, [r2, #0]
 80029e2:	6019      	str	r1, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <_printf_i+0x1ba>
 80029e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029ea:	f102 0004 	add.w	r0, r2, #4
 80029ee:	6018      	str	r0, [r3, #0]
 80029f0:	6813      	ldr	r3, [r2, #0]
 80029f2:	d0f6      	beq.n	80029e2 <_printf_i+0x1a6>
 80029f4:	8019      	strh	r1, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	6123      	str	r3, [r4, #16]
 80029fa:	4675      	mov	r5, lr
 80029fc:	e7b1      	b.n	8002962 <_printf_i+0x126>
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	1d11      	adds	r1, r2, #4
 8002a02:	6019      	str	r1, [r3, #0]
 8002a04:	6815      	ldr	r5, [r2, #0]
 8002a06:	6862      	ldr	r2, [r4, #4]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f7fd fbe8 	bl	80001e0 <memchr>
 8002a10:	b108      	cbz	r0, 8002a16 <_printf_i+0x1da>
 8002a12:	1b40      	subs	r0, r0, r5
 8002a14:	6060      	str	r0, [r4, #4]
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	6123      	str	r3, [r4, #16]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a20:	e79f      	b.n	8002962 <_printf_i+0x126>
 8002a22:	6923      	ldr	r3, [r4, #16]
 8002a24:	462a      	mov	r2, r5
 8002a26:	4639      	mov	r1, r7
 8002a28:	4630      	mov	r0, r6
 8002a2a:	47c0      	blx	r8
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d0a2      	beq.n	8002976 <_printf_i+0x13a>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	079b      	lsls	r3, r3, #30
 8002a34:	d507      	bpl.n	8002a46 <_printf_i+0x20a>
 8002a36:	2500      	movs	r5, #0
 8002a38:	f104 0919 	add.w	r9, r4, #25
 8002a3c:	68e3      	ldr	r3, [r4, #12]
 8002a3e:	9a03      	ldr	r2, [sp, #12]
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	429d      	cmp	r5, r3
 8002a44:	db05      	blt.n	8002a52 <_printf_i+0x216>
 8002a46:	68e0      	ldr	r0, [r4, #12]
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	4298      	cmp	r0, r3
 8002a4c:	bfb8      	it	lt
 8002a4e:	4618      	movlt	r0, r3
 8002a50:	e793      	b.n	800297a <_printf_i+0x13e>
 8002a52:	2301      	movs	r3, #1
 8002a54:	464a      	mov	r2, r9
 8002a56:	4639      	mov	r1, r7
 8002a58:	4630      	mov	r0, r6
 8002a5a:	47c0      	blx	r8
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d08a      	beq.n	8002976 <_printf_i+0x13a>
 8002a60:	3501      	adds	r5, #1
 8002a62:	e7eb      	b.n	8002a3c <_printf_i+0x200>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1a7      	bne.n	80029b8 <_printf_i+0x17c>
 8002a68:	780b      	ldrb	r3, [r1, #0]
 8002a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a72:	e765      	b.n	8002940 <_printf_i+0x104>
 8002a74:	08002d5a 	.word	0x08002d5a
 8002a78:	08002d49 	.word	0x08002d49

08002a7c <memcpy>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	1e43      	subs	r3, r0, #1
 8002a80:	440a      	add	r2, r1
 8002a82:	4291      	cmp	r1, r2
 8002a84:	d100      	bne.n	8002a88 <memcpy+0xc>
 8002a86:	bd10      	pop	{r4, pc}
 8002a88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a90:	e7f7      	b.n	8002a82 <memcpy+0x6>

08002a92 <memmove>:
 8002a92:	4288      	cmp	r0, r1
 8002a94:	b510      	push	{r4, lr}
 8002a96:	eb01 0302 	add.w	r3, r1, r2
 8002a9a:	d803      	bhi.n	8002aa4 <memmove+0x12>
 8002a9c:	1e42      	subs	r2, r0, #1
 8002a9e:	4299      	cmp	r1, r3
 8002aa0:	d10c      	bne.n	8002abc <memmove+0x2a>
 8002aa2:	bd10      	pop	{r4, pc}
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d2f9      	bcs.n	8002a9c <memmove+0xa>
 8002aa8:	1881      	adds	r1, r0, r2
 8002aaa:	1ad2      	subs	r2, r2, r3
 8002aac:	42d3      	cmn	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <memmove+0x20>
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ab6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002aba:	e7f7      	b.n	8002aac <memmove+0x1a>
 8002abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ac0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ac4:	e7eb      	b.n	8002a9e <memmove+0xc>
	...

08002ac8 <_free_r>:
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4605      	mov	r5, r0
 8002acc:	2900      	cmp	r1, #0
 8002ace:	d045      	beq.n	8002b5c <_free_r+0x94>
 8002ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ad4:	1f0c      	subs	r4, r1, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfb8      	it	lt
 8002ada:	18e4      	addlt	r4, r4, r3
 8002adc:	f000 f8d6 	bl	8002c8c <__malloc_lock>
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <_free_r+0x98>)
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	b933      	cbnz	r3, 8002af6 <_free_r+0x2e>
 8002ae8:	6063      	str	r3, [r4, #4]
 8002aea:	6014      	str	r4, [r2, #0]
 8002aec:	4628      	mov	r0, r5
 8002aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002af2:	f000 b8cc 	b.w	8002c8e <__malloc_unlock>
 8002af6:	42a3      	cmp	r3, r4
 8002af8:	d90c      	bls.n	8002b14 <_free_r+0x4c>
 8002afa:	6821      	ldr	r1, [r4, #0]
 8002afc:	1862      	adds	r2, r4, r1
 8002afe:	4293      	cmp	r3, r2
 8002b00:	bf04      	itt	eq
 8002b02:	681a      	ldreq	r2, [r3, #0]
 8002b04:	685b      	ldreq	r3, [r3, #4]
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	bf04      	itt	eq
 8002b0a:	1852      	addeq	r2, r2, r1
 8002b0c:	6022      	streq	r2, [r4, #0]
 8002b0e:	6004      	str	r4, [r0, #0]
 8002b10:	e7ec      	b.n	8002aec <_free_r+0x24>
 8002b12:	4613      	mov	r3, r2
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	b10a      	cbz	r2, 8002b1c <_free_r+0x54>
 8002b18:	42a2      	cmp	r2, r4
 8002b1a:	d9fa      	bls.n	8002b12 <_free_r+0x4a>
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	1858      	adds	r0, r3, r1
 8002b20:	42a0      	cmp	r0, r4
 8002b22:	d10b      	bne.n	8002b3c <_free_r+0x74>
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	1858      	adds	r0, r3, r1
 8002b2a:	4282      	cmp	r2, r0
 8002b2c:	6019      	str	r1, [r3, #0]
 8002b2e:	d1dd      	bne.n	8002aec <_free_r+0x24>
 8002b30:	6810      	ldr	r0, [r2, #0]
 8002b32:	6852      	ldr	r2, [r2, #4]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	4401      	add	r1, r0
 8002b38:	6019      	str	r1, [r3, #0]
 8002b3a:	e7d7      	b.n	8002aec <_free_r+0x24>
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x7c>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d3      	b.n	8002aec <_free_r+0x24>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428a      	cmp	r2, r1
 8002b4a:	bf04      	itt	eq
 8002b4c:	6811      	ldreq	r1, [r2, #0]
 8002b4e:	6852      	ldreq	r2, [r2, #4]
 8002b50:	6062      	str	r2, [r4, #4]
 8002b52:	bf04      	itt	eq
 8002b54:	1809      	addeq	r1, r1, r0
 8002b56:	6021      	streq	r1, [r4, #0]
 8002b58:	605c      	str	r4, [r3, #4]
 8002b5a:	e7c7      	b.n	8002aec <_free_r+0x24>
 8002b5c:	bd38      	pop	{r3, r4, r5, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000094 	.word	0x20000094

08002b64 <_malloc_r>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	1ccd      	adds	r5, r1, #3
 8002b68:	f025 0503 	bic.w	r5, r5, #3
 8002b6c:	3508      	adds	r5, #8
 8002b6e:	2d0c      	cmp	r5, #12
 8002b70:	bf38      	it	cc
 8002b72:	250c      	movcc	r5, #12
 8002b74:	2d00      	cmp	r5, #0
 8002b76:	4606      	mov	r6, r0
 8002b78:	db01      	blt.n	8002b7e <_malloc_r+0x1a>
 8002b7a:	42a9      	cmp	r1, r5
 8002b7c:	d903      	bls.n	8002b86 <_malloc_r+0x22>
 8002b7e:	230c      	movs	r3, #12
 8002b80:	6033      	str	r3, [r6, #0]
 8002b82:	2000      	movs	r0, #0
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	f000 f881 	bl	8002c8c <__malloc_lock>
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <_malloc_r+0xb4>)
 8002b8c:	6814      	ldr	r4, [r2, #0]
 8002b8e:	4621      	mov	r1, r4
 8002b90:	b991      	cbnz	r1, 8002bb8 <_malloc_r+0x54>
 8002b92:	4c22      	ldr	r4, [pc, #136]	; (8002c1c <_malloc_r+0xb8>)
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	b91b      	cbnz	r3, 8002ba0 <_malloc_r+0x3c>
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f000 f867 	bl	8002c6c <_sbrk_r>
 8002b9e:	6020      	str	r0, [r4, #0]
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	f000 f862 	bl	8002c6c <_sbrk_r>
 8002ba8:	1c43      	adds	r3, r0, #1
 8002baa:	d126      	bne.n	8002bfa <_malloc_r+0x96>
 8002bac:	230c      	movs	r3, #12
 8002bae:	6033      	str	r3, [r6, #0]
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f000 f86c 	bl	8002c8e <__malloc_unlock>
 8002bb6:	e7e4      	b.n	8002b82 <_malloc_r+0x1e>
 8002bb8:	680b      	ldr	r3, [r1, #0]
 8002bba:	1b5b      	subs	r3, r3, r5
 8002bbc:	d41a      	bmi.n	8002bf4 <_malloc_r+0x90>
 8002bbe:	2b0b      	cmp	r3, #11
 8002bc0:	d90f      	bls.n	8002be2 <_malloc_r+0x7e>
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	50cd      	str	r5, [r1, r3]
 8002bc6:	18cc      	adds	r4, r1, r3
 8002bc8:	4630      	mov	r0, r6
 8002bca:	f000 f860 	bl	8002c8e <__malloc_unlock>
 8002bce:	f104 000b 	add.w	r0, r4, #11
 8002bd2:	1d23      	adds	r3, r4, #4
 8002bd4:	f020 0007 	bic.w	r0, r0, #7
 8002bd8:	1ac3      	subs	r3, r0, r3
 8002bda:	d01b      	beq.n	8002c14 <_malloc_r+0xb0>
 8002bdc:	425a      	negs	r2, r3
 8002bde:	50e2      	str	r2, [r4, r3]
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	428c      	cmp	r4, r1
 8002be4:	bf0d      	iteet	eq
 8002be6:	6863      	ldreq	r3, [r4, #4]
 8002be8:	684b      	ldrne	r3, [r1, #4]
 8002bea:	6063      	strne	r3, [r4, #4]
 8002bec:	6013      	streq	r3, [r2, #0]
 8002bee:	bf18      	it	ne
 8002bf0:	460c      	movne	r4, r1
 8002bf2:	e7e9      	b.n	8002bc8 <_malloc_r+0x64>
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	6849      	ldr	r1, [r1, #4]
 8002bf8:	e7ca      	b.n	8002b90 <_malloc_r+0x2c>
 8002bfa:	1cc4      	adds	r4, r0, #3
 8002bfc:	f024 0403 	bic.w	r4, r4, #3
 8002c00:	42a0      	cmp	r0, r4
 8002c02:	d005      	beq.n	8002c10 <_malloc_r+0xac>
 8002c04:	1a21      	subs	r1, r4, r0
 8002c06:	4630      	mov	r0, r6
 8002c08:	f000 f830 	bl	8002c6c <_sbrk_r>
 8002c0c:	3001      	adds	r0, #1
 8002c0e:	d0cd      	beq.n	8002bac <_malloc_r+0x48>
 8002c10:	6025      	str	r5, [r4, #0]
 8002c12:	e7d9      	b.n	8002bc8 <_malloc_r+0x64>
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
 8002c16:	bf00      	nop
 8002c18:	20000094 	.word	0x20000094
 8002c1c:	20000098 	.word	0x20000098

08002c20 <_realloc_r>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	4607      	mov	r7, r0
 8002c24:	4614      	mov	r4, r2
 8002c26:	460e      	mov	r6, r1
 8002c28:	b921      	cbnz	r1, 8002c34 <_realloc_r+0x14>
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c30:	f7ff bf98 	b.w	8002b64 <_malloc_r>
 8002c34:	b922      	cbnz	r2, 8002c40 <_realloc_r+0x20>
 8002c36:	f7ff ff47 	bl	8002ac8 <_free_r>
 8002c3a:	4625      	mov	r5, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c40:	f000 f826 	bl	8002c90 <_malloc_usable_size_r>
 8002c44:	4284      	cmp	r4, r0
 8002c46:	d90f      	bls.n	8002c68 <_realloc_r+0x48>
 8002c48:	4621      	mov	r1, r4
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	f7ff ff8a 	bl	8002b64 <_malloc_r>
 8002c50:	4605      	mov	r5, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0f2      	beq.n	8002c3c <_realloc_r+0x1c>
 8002c56:	4631      	mov	r1, r6
 8002c58:	4622      	mov	r2, r4
 8002c5a:	f7ff ff0f 	bl	8002a7c <memcpy>
 8002c5e:	4631      	mov	r1, r6
 8002c60:	4638      	mov	r0, r7
 8002c62:	f7ff ff31 	bl	8002ac8 <_free_r>
 8002c66:	e7e9      	b.n	8002c3c <_realloc_r+0x1c>
 8002c68:	4635      	mov	r5, r6
 8002c6a:	e7e7      	b.n	8002c3c <_realloc_r+0x1c>

08002c6c <_sbrk_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4c06      	ldr	r4, [pc, #24]	; (8002c88 <_sbrk_r+0x1c>)
 8002c70:	2300      	movs	r3, #0
 8002c72:	4605      	mov	r5, r0
 8002c74:	4608      	mov	r0, r1
 8002c76:	6023      	str	r3, [r4, #0]
 8002c78:	f000 f814 	bl	8002ca4 <_sbrk>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_sbrk_r+0x1a>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_sbrk_r+0x1a>
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200001e0 	.word	0x200001e0

08002c8c <__malloc_lock>:
 8002c8c:	4770      	bx	lr

08002c8e <__malloc_unlock>:
 8002c8e:	4770      	bx	lr

08002c90 <_malloc_usable_size_r>:
 8002c90:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002c94:	2800      	cmp	r0, #0
 8002c96:	f1a0 0004 	sub.w	r0, r0, #4
 8002c9a:	bfbc      	itt	lt
 8002c9c:	580b      	ldrlt	r3, [r1, r0]
 8002c9e:	18c0      	addlt	r0, r0, r3
 8002ca0:	4770      	bx	lr
	...

08002ca4 <_sbrk>:
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <_sbrk+0x14>)
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	4602      	mov	r2, r0
 8002caa:	b909      	cbnz	r1, 8002cb0 <_sbrk+0xc>
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <_sbrk+0x18>)
 8002cae:	6019      	str	r1, [r3, #0]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	4402      	add	r2, r0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4770      	bx	lr
 8002cb8:	2000009c 	.word	0x2000009c
 8002cbc:	200001e4 	.word	0x200001e4

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	bf00      	nop
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
