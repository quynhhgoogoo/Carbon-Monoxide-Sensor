
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08006290  08006290  00016290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080065e8  080065e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  080065f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b4  200001e0  080067d0  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000394  080067d0  00020394  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f2bb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fef  00000000  00000000  0002f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007586  00000000  00000000  000314ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a00  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b88  00000000  00000000  00039440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000058d6  00000000  00000000  00039fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e21  00000000  00000000  0003f89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000436bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002848  00000000  00000000  0004373c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006278 	.word	0x08006278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006278 	.word	0x08006278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_InitTick+0x2c>)
{
 8000eb4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 f880 	bl	8000fc4 <HAL_SYSTICK_Config>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	b938      	cbnz	r0, 8000ed8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f844 	bl	8000f5c <HAL_NVIC_SetPriority>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_Init>:
{
 8000ee0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f828 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffe1 	bl	8000eb0 <HAL_InitTick>
 8000eee:	4604      	mov	r4, r0
 8000ef0:	b918      	cbnz	r0, 8000efa <HAL_Init+0x1a>
    HAL_MspInit();
 8000ef2:	f001 ffa5 	bl	8002e40 <HAL_MspInit>
}
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000efa:	2401      	movs	r4, #1
 8000efc:	e7fb      	b.n	8000ef6 <HAL_Init+0x16>
	...

08000f00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <HAL_IncTick+0xc>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000020c 	.word	0x2000020c

08000f10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f10:	4b01      	ldr	r3, [pc, #4]	; (8000f18 <HAL_GetTick+0x8>)
 8000f12:	6818      	ldr	r0, [r3, #0]
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000020c 	.word	0x2000020c

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff fff6 	bl	8000f10 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f24:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f26:	4605      	mov	r5, r0
  {
    wait++;
 8000f28:	bf18      	it	ne
 8000f2a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	1b40      	subs	r0, r0, r5
 8000f32:	4284      	cmp	r4, r0
 8000f34:	d8fa      	bhi.n	8000f2c <HAL_Delay+0x10>
  {
  }
}
 8000f36:	bd38      	pop	{r3, r4, r5, pc}

08000f38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f48:	0200      	lsls	r0, r0, #8
 8000f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f52:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f54:	60d3      	str	r3, [r2, #12]
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5e:	b530      	push	{r4, r5, lr}
 8000f60:	68dc      	ldr	r4, [r3, #12]
 8000f62:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f66:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	bf28      	it	cs
 8000f70:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 0501 	mov.w	r5, #1
 8000f78:	fa05 f303 	lsl.w	r3, r5, r3
 8000f7c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f80:	bf8c      	ite	hi
 8000f82:	3c03      	subhi	r4, #3
 8000f84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f86:	4019      	ands	r1, r3
 8000f88:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8a:	fa05 f404 	lsl.w	r4, r5, r4
 8000f8e:	3c01      	subs	r4, #1
 8000f90:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f92:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	ea42 0201 	orr.w	r2, r2, r1
 8000f98:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	bfaf      	iteee	ge
 8000f9e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	f000 000f 	andlt.w	r0, r0, #15
 8000fa6:	4b06      	ldrlt	r3, [pc, #24]	; (8000fc0 <HAL_NVIC_SetPriority+0x64>)
 8000fa8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	bfa5      	ittet	ge
 8000fac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fb0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fb8:	bd30      	pop	{r4, r5, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00
 8000fc0:	e000ed14 	.word	0xe000ed14

08000fc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fca:	d20a      	bcs.n	8000fe2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	21f0      	movs	r1, #240	; 0xf0
 8000fd4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ff2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ff4:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ff6:	bf0c      	ite	eq
 8000ff8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ffc:	f022 0204 	bicne.w	r2, r2, #4
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	4770      	bx	lr
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001008:	4770      	bx	lr

0800100a <HAL_SYSTICK_IRQHandler>:
{
 800100a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800100c:	f7ff fffc 	bl	8001008 <HAL_SYSTICK_Callback>
 8001010:	bd08      	pop	{r3, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001018:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001178 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001020:	4a53      	ldr	r2, [pc, #332]	; (8001170 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001024:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8001028:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	9c01      	ldr	r4, [sp, #4]
 800102c:	40dc      	lsrs	r4, r3
 800102e:	d102      	bne.n	8001036 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8001030:	b005      	add	sp, #20
 8001032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001036:	2401      	movs	r4, #1
 8001038:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 800103c:	9c01      	ldr	r4, [sp, #4]
 800103e:	ea14 050a 	ands.w	r5, r4, sl
 8001042:	f000 808f 	beq.w	8001164 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001046:	684c      	ldr	r4, [r1, #4]
 8001048:	f024 0b10 	bic.w	fp, r4, #16
 800104c:	f1bb 0f02 	cmp.w	fp, #2
 8001050:	d111      	bne.n	8001076 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8001052:	08df      	lsrs	r7, r3, #3
 8001054:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001058:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800105c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001062:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001066:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106a:	690e      	ldr	r6, [r1, #16]
 800106c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001070:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001074:	623e      	str	r6, [r7, #32]
 8001076:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800107a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 800107c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800107e:	fa07 f70c 	lsl.w	r7, r7, ip
 8001082:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001084:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001088:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108a:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108e:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001092:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800109a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	d811      	bhi.n	80010c2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800109e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010a0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	68ce      	ldr	r6, [r1, #12]
 80010a6:	fa06 fe0c 	lsl.w	lr, r6, ip
 80010aa:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80010ae:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80010b0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010b6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80010ba:	409e      	lsls	r6, r3
 80010bc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80010c0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80010c2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c6:	688e      	ldr	r6, [r1, #8]
 80010c8:	fa06 f60c 	lsl.w	r6, r6, ip
 80010cc:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80010d0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	d547      	bpl.n	8001164 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010d8:	f046 0601 	orr.w	r6, r6, #1
 80010dc:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80010e0:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80010e4:	f023 0703 	bic.w	r7, r3, #3
 80010e8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010ec:	f006 0601 	and.w	r6, r6, #1
 80010f0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80010f4:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f6:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80010fc:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001102:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001106:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800110a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110e:	d02b      	beq.n	8001168 <HAL_GPIO_Init+0x154>
 8001110:	4e18      	ldr	r6, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x160>)
 8001112:	42b0      	cmp	r0, r6
 8001114:	d02a      	beq.n	800116c <HAL_GPIO_Init+0x158>
 8001116:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800111a:	42b0      	cmp	r0, r6
 800111c:	bf14      	ite	ne
 800111e:	2607      	movne	r6, #7
 8001120:	2602      	moveq	r6, #2
 8001122:	fa06 f60e 	lsl.w	r6, r6, lr
 8001126:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 800112c:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800112e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001134:	bf0c      	ite	eq
 8001136:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001138:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 800113a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 800113c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001142:	bf0c      	ite	eq
 8001144:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001146:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001148:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 800114a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001150:	bf0c      	ite	eq
 8001152:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001154:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001156:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001158:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800115c:	bf54      	ite	pl
 800115e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001160:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001162:	60d6      	str	r6, [r2, #12]
    position++;
 8001164:	3301      	adds	r3, #1
 8001166:	e760      	b.n	800102a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001168:	2600      	movs	r6, #0
 800116a:	e7da      	b.n	8001122 <HAL_GPIO_Init+0x10e>
 800116c:	2601      	movs	r6, #1
 800116e:	e7d8      	b.n	8001122 <HAL_GPIO_Init+0x10e>
 8001170:	40010400 	.word	0x40010400
 8001174:	48000400 	.word	0x48000400
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	b10a      	cbz	r2, 8001182 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	6181      	str	r1, [r0, #24]
 8001180:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	6281      	str	r1, [r0, #40]	; 0x28
 8001184:	4770      	bx	lr

08001186 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001186:	6803      	ldr	r3, [r0, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800118c:	bf44      	itt	mi
 800118e:	2200      	movmi	r2, #0
 8001190:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001196:	bf5e      	ittt	pl
 8001198:	699a      	ldrpl	r2, [r3, #24]
 800119a:	f042 0201 	orrpl.w	r2, r2, #1
 800119e:	619a      	strpl	r2, [r3, #24]
 80011a0:	4770      	bx	lr

080011a2 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80011a6:	6805      	ldr	r5, [r0, #0]
 80011a8:	4323      	orrs	r3, r4
 80011aa:	0d64      	lsrs	r4, r4, #21
 80011ac:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80011b0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80011b4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80011b8:	6868      	ldr	r0, [r5, #4]
 80011ba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80011be:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80011c2:	4319      	orrs	r1, r3
 80011c4:	f044 0403 	orr.w	r4, r4, #3
 80011c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011cc:	ea20 0404 	bic.w	r4, r0, r4
 80011d0:	4321      	orrs	r1, r4
 80011d2:	6069      	str	r1, [r5, #4]
 80011d4:	bd30      	pop	{r4, r5, pc}

080011d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80011d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011da:	9f06      	ldr	r7, [sp, #24]
 80011dc:	4604      	mov	r4, r0
 80011de:	4688      	mov	r8, r1
 80011e0:	4616      	mov	r6, r2
 80011e2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	6993      	ldr	r3, [r2, #24]
 80011e8:	ea38 0303 	bics.w	r3, r8, r3
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	42b3      	cmp	r3, r6
 80011f4:	d002      	beq.n	80011fc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80011f6:	2000      	movs	r0, #0
}
 80011f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011fc:	1c6b      	adds	r3, r5, #1
 80011fe:	d0f2      	beq.n	80011e6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001200:	f7ff fe86 	bl	8000f10 <HAL_GetTick>
 8001204:	1bc0      	subs	r0, r0, r7
 8001206:	4285      	cmp	r5, r0
 8001208:	d301      	bcc.n	800120e <I2C_WaitOnFlagUntilTimeout+0x38>
 800120a:	2d00      	cmp	r5, #0
 800120c:	d1ea      	bne.n	80011e4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800120e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001216:	2320      	movs	r3, #32
 8001218:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001226:	2001      	movs	r0, #1
 8001228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800122c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800122c:	6803      	ldr	r3, [r0, #0]
{
 800122e:	b570      	push	{r4, r5, r6, lr}
 8001230:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001232:	6998      	ldr	r0, [r3, #24]
 8001234:	f010 0010 	ands.w	r0, r0, #16
{
 8001238:	460d      	mov	r5, r1
 800123a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800123c:	d116      	bne.n	800126c <I2C_IsAcknowledgeFailed+0x40>
 800123e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001240:	1c69      	adds	r1, r5, #1
 8001242:	d014      	beq.n	800126e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001244:	f7ff fe64 	bl	8000f10 <HAL_GetTick>
 8001248:	1b80      	subs	r0, r0, r6
 800124a:	4285      	cmp	r5, r0
 800124c:	d300      	bcc.n	8001250 <I2C_IsAcknowledgeFailed+0x24>
 800124e:	b96d      	cbnz	r5, 800126c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001250:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001258:	2320      	movs	r3, #32
 800125a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001264:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	6999      	ldr	r1, [r3, #24]
 8001270:	068a      	lsls	r2, r1, #26
 8001272:	d5e5      	bpl.n	8001240 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001274:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001276:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001278:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800127a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800127c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800127e:	f7ff ff82 	bl	8001186 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	6853      	ldr	r3, [r2, #4]
 8001286:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800128a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800128e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001298:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80012a0:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80012a4:	e7db      	b.n	800125e <I2C_IsAcknowledgeFailed+0x32>

080012a6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80012a6:	b570      	push	{r4, r5, r6, lr}
 80012a8:	4604      	mov	r4, r0
 80012aa:	460d      	mov	r5, r1
 80012ac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	079b      	lsls	r3, r3, #30
 80012b4:	d501      	bpl.n	80012ba <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80012b6:	2000      	movs	r0, #0
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ba:	4632      	mov	r2, r6
 80012bc:	4629      	mov	r1, r5
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff ffb4 	bl	800122c <I2C_IsAcknowledgeFailed>
 80012c4:	b9a0      	cbnz	r0, 80012f0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80012c6:	1c6a      	adds	r2, r5, #1
 80012c8:	d0f1      	beq.n	80012ae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ca:	f7ff fe21 	bl	8000f10 <HAL_GetTick>
 80012ce:	1b80      	subs	r0, r0, r6
 80012d0:	4285      	cmp	r5, r0
 80012d2:	d301      	bcc.n	80012d8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d1ea      	bne.n	80012ae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012da:	f043 0320 	orr.w	r3, r3, #32
 80012de:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80012e0:	2320      	movs	r3, #32
 80012e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80012ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
}
 80012f2:	bd70      	pop	{r4, r5, r6, pc}

080012f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	4604      	mov	r4, r0
 80012f8:	460d      	mov	r5, r1
 80012fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	069b      	lsls	r3, r3, #26
 8001302:	d501      	bpl.n	8001308 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001304:	2000      	movs	r0, #0
 8001306:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001308:	4632      	mov	r2, r6
 800130a:	4629      	mov	r1, r5
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff ff8d 	bl	800122c <I2C_IsAcknowledgeFailed>
 8001312:	b990      	cbnz	r0, 800133a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001314:	f7ff fdfc 	bl	8000f10 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	4285      	cmp	r5, r0
 800131c:	d301      	bcc.n	8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800131e:	2d00      	cmp	r5, #0
 8001320:	d1ec      	bne.n	80012fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800132a:	2320      	movs	r3, #32
 800132c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001336:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800133a:	2001      	movs	r0, #1
}
 800133c:	bd70      	pop	{r4, r5, r6, pc}

0800133e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800133e:	b570      	push	{r4, r5, r6, lr}
 8001340:	4604      	mov	r4, r0
 8001342:	460d      	mov	r5, r1
 8001344:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	075b      	lsls	r3, r3, #29
 800134c:	d40e      	bmi.n	800136c <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800134e:	4632      	mov	r2, r6
 8001350:	4629      	mov	r1, r5
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff ff6a 	bl	800122c <I2C_IsAcknowledgeFailed>
 8001358:	b9f0      	cbnz	r0, 8001398 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	0691      	lsls	r1, r2, #26
 8001360:	d51c      	bpl.n	800139c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001362:	699a      	ldr	r2, [r3, #24]
 8001364:	0752      	lsls	r2, r2, #29
 8001366:	d503      	bpl.n	8001370 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001368:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800136a:	b10a      	cbz	r2, 8001370 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800136c:	2000      	movs	r0, #0
 800136e:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001370:	2120      	movs	r1, #32
 8001372:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800137a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800137e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001388:	2300      	movs	r3, #0
 800138a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800138c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001394:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
}
 800139a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139c:	f7ff fdb8 	bl	8000f10 <HAL_GetTick>
 80013a0:	1b80      	subs	r0, r0, r6
 80013a2:	4285      	cmp	r5, r0
 80013a4:	d301      	bcc.n	80013aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 80013a6:	2d00      	cmp	r5, #0
 80013a8:	d1cd      	bne.n	8001346 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013b2:	2320      	movs	r3, #32
 80013b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80013b8:	2300      	movs	r3, #0
 80013ba:	e7eb      	b.n	8001394 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

080013bc <HAL_I2C_Init>:
{
 80013bc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80013be:	4604      	mov	r4, r0
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d04a      	beq.n	800145a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80013c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013cc:	b91b      	cbnz	r3, 80013d6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80013ce:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80013d2:	f001 fd7b 	bl	8002ecc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d6:	2324      	movs	r3, #36	; 0x24
 80013d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013de:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013e8:	6862      	ldr	r2, [r4, #4]
 80013ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013f0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f2:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013fc:	d124      	bne.n	8001448 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001402:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001404:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001406:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001408:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800140c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001410:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001418:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800141a:	6922      	ldr	r2, [r4, #16]
 800141c:	430a      	orrs	r2, r1
 800141e:	69a1      	ldr	r1, [r4, #24]
 8001420:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001424:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001426:	6a21      	ldr	r1, [r4, #32]
 8001428:	69e2      	ldr	r2, [r4, #28]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001436:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001438:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800143c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001440:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001442:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001446:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001448:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800144c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800144e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001450:	bf04      	itt	eq
 8001452:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001456:	605a      	streq	r2, [r3, #4]
 8001458:	e7d4      	b.n	8001404 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
}
 800145c:	bd10      	pop	{r4, pc}
	...

08001460 <HAL_I2C_Master_Transmit>:
{
 8001460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001464:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001466:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800146a:	2b20      	cmp	r3, #32
{
 800146c:	4604      	mov	r4, r0
 800146e:	460e      	mov	r6, r1
 8001470:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001472:	f040 8084 	bne.w	800157e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8001476:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800147a:	2b01      	cmp	r3, #1
 800147c:	d07f      	beq.n	800157e <HAL_I2C_Master_Transmit+0x11e>
 800147e:	2701      	movs	r7, #1
 8001480:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001484:	f7ff fd44 	bl	8000f10 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001488:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800148a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148c:	9000      	str	r0, [sp, #0]
 800148e:	463a      	mov	r2, r7
 8001490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fe9e 	bl	80011d6 <I2C_WaitOnFlagUntilTimeout>
 800149a:	b118      	cbz	r0, 80014a4 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
}
 800149e:	b003      	add	sp, #12
 80014a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014a4:	2321      	movs	r3, #33	; 0x21
 80014a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014aa:	2310      	movs	r3, #16
 80014ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80014b2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80014b8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80014c0:	6360      	str	r0, [r4, #52]	; 0x34
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c4:	d926      	bls.n	8001514 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ca:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014d0:	4631      	mov	r1, r6
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff fe65 	bl	80011a2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014da:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80014dc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014de:	462a      	mov	r2, r5
 80014e0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80014e2:	b9fb      	cbnz	r3, 8001524 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	f7ff ff06 	bl	80012f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1d7      	bne.n	800149c <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	2120      	movs	r1, #32
 80014f0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80014f8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80014fc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001506:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800150a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800150e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001512:	e7c4      	b.n	800149e <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8001514:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001516:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001518:	b292      	uxth	r2, r2
 800151a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800151c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	e7d5      	b.n	80014d0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001524:	f7ff febf 	bl	80012a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001528:	2800      	cmp	r0, #0
 800152a:	d1b7      	bne.n	800149c <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800152c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001534:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001536:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800153a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800153c:	3b01      	subs	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001542:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001544:	3a01      	subs	r2, #1
 8001546:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001548:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800154a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0c3      	beq.n	80014d8 <HAL_I2C_Master_Transmit+0x78>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1c1      	bne.n	80014d8 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001554:	9500      	str	r5, [sp, #0]
 8001556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff fe3b 	bl	80011d6 <I2C_WaitOnFlagUntilTimeout>
 8001560:	2800      	cmp	r0, #0
 8001562:	d19b      	bne.n	800149c <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001564:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001566:	b29b      	uxth	r3, r3
 8001568:	2bff      	cmp	r3, #255	; 0xff
 800156a:	d903      	bls.n	8001574 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001570:	9000      	str	r0, [sp, #0]
 8001572:	e7ab      	b.n	80014cc <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8001574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001576:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001578:	b292      	uxth	r2, r2
 800157a:	8522      	strh	r2, [r4, #40]	; 0x28
 800157c:	e7ce      	b.n	800151c <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 800157e:	2002      	movs	r0, #2
 8001580:	e78d      	b.n	800149e <HAL_I2C_Master_Transmit+0x3e>
 8001582:	bf00      	nop
 8001584:	80002000 	.word	0x80002000

08001588 <HAL_I2C_Master_Receive>:
{
 8001588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800158c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800158e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001592:	2b20      	cmp	r3, #32
{
 8001594:	4604      	mov	r4, r0
 8001596:	460e      	mov	r6, r1
 8001598:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800159a:	f040 8086 	bne.w	80016aa <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 800159e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	f000 8081 	beq.w	80016aa <HAL_I2C_Master_Receive+0x122>
 80015a8:	2701      	movs	r7, #1
 80015aa:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80015ae:	f7ff fcaf 	bl	8000f10 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015b2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80015b4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015b6:	9000      	str	r0, [sp, #0]
 80015b8:	463a      	mov	r2, r7
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fe09 	bl	80011d6 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	b118      	cbz	r0, 80015ce <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 80015c6:	2001      	movs	r0, #1
}
 80015c8:	b003      	add	sp, #12
 80015ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015ce:	2322      	movs	r3, #34	; 0x22
 80015d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015d4:	2310      	movs	r3, #16
 80015d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015da:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80015dc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80015e2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80015ea:	6360      	str	r0, [r4, #52]	; 0x34
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ee:	d926      	bls.n	800163e <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015f4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015fa:	4631      	mov	r1, r6
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fdd0 	bl	80011a2 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001604:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8001606:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001608:	462a      	mov	r2, r5
 800160a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800160c:	b9fb      	cbnz	r3, 800164e <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160e:	f7ff fe71 	bl	80012f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001612:	2800      	cmp	r0, #0
 8001614:	d1d7      	bne.n	80015c6 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	2120      	movs	r1, #32
 800161a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001622:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001626:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001634:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001638:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800163c:	e7c4      	b.n	80015c8 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 800163e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001640:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001642:	b292      	uxth	r2, r2
 8001644:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	e7d5      	b.n	80015fa <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164e:	f7ff fe76 	bl	800133e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001652:	2800      	cmp	r0, #0
 8001654:	d1b7      	bne.n	80015c6 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800165a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800165e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001660:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001662:	3301      	adds	r3, #1
 8001664:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001668:	3b01      	subs	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800166e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001670:	3a01      	subs	r2, #1
 8001672:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001674:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001676:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0c2      	beq.n	8001602 <HAL_I2C_Master_Receive+0x7a>
 800167c:	2a00      	cmp	r2, #0
 800167e:	d1c0      	bne.n	8001602 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001680:	9500      	str	r5, [sp, #0]
 8001682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4620      	mov	r0, r4
 8001688:	f7ff fda5 	bl	80011d6 <I2C_WaitOnFlagUntilTimeout>
 800168c:	2800      	cmp	r0, #0
 800168e:	d19a      	bne.n	80015c6 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001690:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	2bff      	cmp	r3, #255	; 0xff
 8001696:	d903      	bls.n	80016a0 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001698:	22ff      	movs	r2, #255	; 0xff
 800169a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800169c:	9000      	str	r0, [sp, #0]
 800169e:	e7aa      	b.n	80015f6 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 80016a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80016a4:	b292      	uxth	r2, r2
 80016a6:	8522      	strh	r2, [r4, #40]	; 0x28
 80016a8:	e7cd      	b.n	8001646 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 80016aa:	2002      	movs	r0, #2
 80016ac:	e78c      	b.n	80015c8 <HAL_I2C_Master_Receive+0x40>
 80016ae:	bf00      	nop
 80016b0:	80002400 	.word	0x80002400

080016b4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	2a20      	cmp	r2, #32
{
 80016bc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016be:	d11d      	bne.n	80016fc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d019      	beq.n	80016fc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	2324      	movs	r3, #36	; 0x24
 80016ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ce:	6803      	ldr	r3, [r0, #0]
 80016d0:	681c      	ldr	r4, [r3, #0]
 80016d2:	f024 0401 	bic.w	r4, r4, #1
 80016d6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80016de:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016e0:	681c      	ldr	r4, [r3, #0]
 80016e2:	4321      	orrs	r1, r4
 80016e4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	f041 0101 	orr.w	r1, r1, #1
 80016ec:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80016f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2002      	movs	r0, #2
  }
}
 80016fe:	bd10      	pop	{r4, pc}

08001700 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001700:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001702:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001706:	b2e4      	uxtb	r4, r4
 8001708:	2c20      	cmp	r4, #32
 800170a:	d11c      	bne.n	8001746 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800170c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001710:	2b01      	cmp	r3, #1
 8001712:	d018      	beq.n	8001746 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001714:	2324      	movs	r3, #36	; 0x24
 8001716:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800171a:	6803      	ldr	r3, [r0, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001724:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001726:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800172a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800172e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800173a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800173e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001742:	4618      	mov	r0, r3
 8001744:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001746:	2002      	movs	r0, #2
  }
}
 8001748:	bd10      	pop	{r4, pc}
	...

0800174c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_PWR_EnableBkUpAccess+0xc>)
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4770      	bx	lr
 8001758:	40007000 	.word	0x40007000

0800175c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_PWREx_GetVoltageRange+0xc>)
 800175e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001760:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40007000 	.word	0x40007000

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001770:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001774:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001778:	d11c      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800177a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800177e:	d015      	beq.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800178e:	6811      	ldr	r1, [r2, #0]
 8001790:	2232      	movs	r2, #50	; 0x32
 8001792:	434a      	muls	r2, r1
 8001794:	490f      	ldr	r1, [pc, #60]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001796:	fbb2 f2f1 	udiv	r2, r2, r1
 800179a:	4619      	mov	r1, r3
 800179c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179e:	6958      	ldr	r0, [r3, #20]
 80017a0:	0540      	lsls	r0, r0, #21
 80017a2:	d500      	bpl.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80017a4:	b922      	cbnz	r2, 80017b0 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a6:	694b      	ldr	r3, [r1, #20]
 80017a8:	055b      	lsls	r3, r3, #21
 80017aa:	d40d      	bmi.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017ac:	2000      	movs	r0, #0
 80017ae:	4770      	bx	lr
        wait_loop_index--;
 80017b0:	3a01      	subs	r2, #1
 80017b2:	e7f4      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b8:	bf1f      	itttt	ne
 80017ba:	681a      	ldrne	r2, [r3, #0]
 80017bc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80017c0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80017c4:	601a      	strne	r2, [r3, #0]
 80017c6:	e7f1      	b.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
}
 80017ca:	4770      	bx	lr
 80017cc:	40007000 	.word	0x40007000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	000f4240 	.word	0x000f4240

080017d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017da:	4d1e      	ldr	r5, [pc, #120]	; (8001854 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80017dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80017de:	00da      	lsls	r2, r3, #3
{
 80017e0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017e2:	d518      	bpl.n	8001816 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017e4:	f7ff ffba 	bl	800175c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80017ec:	d123      	bne.n	8001836 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017ee:	2c80      	cmp	r4, #128	; 0x80
 80017f0:	d929      	bls.n	8001846 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017f2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017f4:	bf8c      	ite	hi
 80017f6:	2002      	movhi	r0, #2
 80017f8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f023 0307 	bic.w	r3, r3, #7
 8001802:	4303      	orrs	r3, r0
 8001804:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800180c:	1a18      	subs	r0, r3, r0
 800180e:	bf18      	it	ne
 8001810:	2001      	movne	r0, #1
 8001812:	b003      	add	sp, #12
 8001814:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	65ab      	str	r3, [r5, #88]	; 0x58
 800181e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001828:	f7ff ff98 	bl	800175c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	65ab      	str	r3, [r5, #88]	; 0x58
 8001834:	e7d8      	b.n	80017e8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001836:	2c80      	cmp	r4, #128	; 0x80
 8001838:	d807      	bhi.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800183a:	d008      	beq.n	800184e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800183c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001840:	4258      	negs	r0, r3
 8001842:	4158      	adcs	r0, r3
 8001844:	e7d9      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001846:	2000      	movs	r0, #0
 8001848:	e7d7      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800184a:	2003      	movs	r0, #3
 800184c:	e7d5      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800184e:	2002      	movs	r0, #2
 8001850:	e7d3      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800185e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001860:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001862:	f012 020c 	ands.w	r2, r2, #12
 8001866:	d005      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x18>
 8001868:	2a0c      	cmp	r2, #12
 800186a:	d115      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001870:	2901      	cmp	r1, #1
 8001872:	d118      	bne.n	80018a6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001874:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001878:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800187a:	bf55      	itete	pl
 800187c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001880:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001882:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001886:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800188a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800188e:	b382      	cbz	r2, 80018f2 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001890:	2a0c      	cmp	r2, #12
 8001892:	d009      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x4c>
 8001894:	2000      	movs	r0, #0
  return sysclockfreq;
 8001896:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001898:	2a04      	cmp	r2, #4
 800189a:	d029      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x94>
 800189c:	2a08      	cmp	r2, #8
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80018a0:	bf18      	it	ne
 80018a2:	2000      	movne	r0, #0
 80018a4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018a6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018aa:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ac:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80018b4:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018b6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x6c>
 80018bc:	2903      	cmp	r1, #3
 80018be:	d012      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80018c6:	e003      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018cc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018d0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018d2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018d6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80018da:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018dc:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018de:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80018e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ea:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80018ee:	e7ef      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	0800630c 	.word	0x0800630c
 80018fc:	007a1200 	.word	0x007a1200
 8001900:	00f42400 	.word	0x00f42400

08001904 <HAL_RCC_OscConfig>:
{
 8001904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001908:	4605      	mov	r5, r0
 800190a:	b908      	cbnz	r0, 8001910 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 800190c:	2001      	movs	r0, #1
 800190e:	e046      	b.n	800199e <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001910:	4ca8      	ldr	r4, [pc, #672]	; (8001bb4 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001912:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001914:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001916:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001918:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800191e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001922:	d572      	bpl.n	8001a0a <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001924:	b11e      	cbz	r6, 800192e <HAL_RCC_OscConfig+0x2a>
 8001926:	2e0c      	cmp	r6, #12
 8001928:	d151      	bne.n	80019ce <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800192a:	2f01      	cmp	r7, #1
 800192c:	d14f      	bne.n	80019ce <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	0798      	lsls	r0, r3, #30
 8001932:	d502      	bpl.n	800193a <HAL_RCC_OscConfig+0x36>
 8001934:	69ab      	ldr	r3, [r5, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0e8      	beq.n	800190c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	6a28      	ldr	r0, [r5, #32]
 800193e:	0719      	lsls	r1, r3, #28
 8001940:	bf56      	itet	pl
 8001942:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001946:	6823      	ldrmi	r3, [r4, #0]
 8001948:	091b      	lsrpl	r3, r3, #4
 800194a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194e:	4283      	cmp	r3, r0
 8001950:	d228      	bcs.n	80019a4 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001952:	f7ff ff41 	bl	80017d8 <RCC_SetFlashLatencyFromMSIRange>
 8001956:	2800      	cmp	r0, #0
 8001958:	d1d8      	bne.n	800190c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6023      	str	r3, [r4, #0]
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	6a2a      	ldr	r2, [r5, #32]
 8001966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196a:	4313      	orrs	r3, r2
 800196c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	69ea      	ldr	r2, [r5, #28]
 8001972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800197a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800197c:	f7ff ff6e 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001980:	68a3      	ldr	r3, [r4, #8]
 8001982:	4a8d      	ldr	r2, [pc, #564]	; (8001bb8 <HAL_RCC_OscConfig+0x2b4>)
 8001984:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	40d8      	lsrs	r0, r3
 8001990:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <HAL_RCC_OscConfig+0x2b8>)
 8001992:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fa8b 	bl	8000eb0 <HAL_InitTick>
        if(status != HAL_OK)
 800199a:	2800      	cmp	r0, #0
 800199c:	d035      	beq.n	8001a0a <HAL_RCC_OscConfig+0x106>
}
 800199e:	b003      	add	sp, #12
 80019a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	f043 0308 	orr.w	r3, r3, #8
 80019aa:	6023      	str	r3, [r4, #0]
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b2:	4303      	orrs	r3, r0
 80019b4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	6863      	ldr	r3, [r4, #4]
 80019b8:	69ea      	ldr	r2, [r5, #28]
 80019ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019c2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c4:	f7ff ff08 	bl	80017d8 <RCC_SetFlashLatencyFromMSIRange>
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d0d7      	beq.n	800197c <HAL_RCC_OscConfig+0x78>
 80019cc:	e79e      	b.n	800190c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ce:	69ab      	ldr	r3, [r5, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03a      	beq.n	8001a4a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019dc:	f7ff fa98 	bl	8000f10 <HAL_GetTick>
 80019e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	079a      	lsls	r2, r3, #30
 80019e6:	d528      	bpl.n	8001a3a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6023      	str	r3, [r4, #0]
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	6a2a      	ldr	r2, [r5, #32]
 80019f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f8:	4313      	orrs	r3, r2
 80019fa:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	69ea      	ldr	r2, [r5, #28]
 8001a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a08:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	07d8      	lsls	r0, r3, #31
 8001a0e:	d42d      	bmi.n	8001a6c <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	0799      	lsls	r1, r3, #30
 8001a14:	d46b      	bmi.n	8001aee <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	682b      	ldr	r3, [r5, #0]
 8001a18:	0718      	lsls	r0, r3, #28
 8001a1a:	f100 80a0 	bmi.w	8001b5e <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1e:	682b      	ldr	r3, [r5, #0]
 8001a20:	0759      	lsls	r1, r3, #29
 8001a22:	f100 80cd 	bmi.w	8001bc0 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	0699      	lsls	r1, r3, #26
 8001a2a:	f100 8136 	bmi.w	8001c9a <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 815c 	bne.w	8001cee <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001a36:	2000      	movs	r0, #0
 8001a38:	e7b1      	b.n	800199e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fa69 	bl	8000f10 <HAL_GetTick>
 8001a3e:	eba0 0008 	sub.w	r0, r0, r8
 8001a42:	2802      	cmp	r0, #2
 8001a44:	d9cd      	bls.n	80019e2 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e7a9      	b.n	800199e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa5d 	bl	8000f10 <HAL_GetTick>
 8001a56:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	079b      	lsls	r3, r3, #30
 8001a5c:	d5d5      	bpl.n	8001a0a <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fa57 	bl	8000f10 <HAL_GetTick>
 8001a62:	eba0 0008 	sub.w	r0, r0, r8
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9f6      	bls.n	8001a58 <HAL_RCC_OscConfig+0x154>
 8001a6a:	e7ec      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a6c:	2e08      	cmp	r6, #8
 8001a6e:	d003      	beq.n	8001a78 <HAL_RCC_OscConfig+0x174>
 8001a70:	2e0c      	cmp	r6, #12
 8001a72:	d108      	bne.n	8001a86 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8001a74:	2f03      	cmp	r7, #3
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	039a      	lsls	r2, r3, #14
 8001a7c:	d5c8      	bpl.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a7e:	686b      	ldr	r3, [r5, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1c5      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a84:	e742      	b.n	800190c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	686b      	ldr	r3, [r5, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d110      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1ac>
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa3b 	bl	8000f10 <HAL_GetTick>
 8001a9a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	039b      	lsls	r3, r3, #14
 8001aa0:	d4b6      	bmi.n	8001a10 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff fa35 	bl	8000f10 <HAL_GetTick>
 8001aa6:	eba0 0008 	sub.w	r0, r0, r8
 8001aaa:	2864      	cmp	r0, #100	; 0x64
 8001aac:	d9f6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x198>
 8001aae:	e7ca      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab4:	d104      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1bc>
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	6023      	str	r3, [r4, #0]
 8001abe:	e7e6      	b.n	8001a8e <HAL_RCC_OscConfig+0x18a>
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac6:	6022      	str	r2, [r4, #0]
 8001ac8:	6822      	ldr	r2, [r4, #0]
 8001aca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ace:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fa1c 	bl	8000f10 <HAL_GetTick>
 8001ad8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	0398      	lsls	r0, r3, #14
 8001ade:	d597      	bpl.n	8001a10 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fa16 	bl	8000f10 <HAL_GetTick>
 8001ae4:	eba0 0008 	sub.w	r0, r0, r8
 8001ae8:	2864      	cmp	r0, #100	; 0x64
 8001aea:	d9f6      	bls.n	8001ada <HAL_RCC_OscConfig+0x1d6>
 8001aec:	e7ab      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aee:	2e04      	cmp	r6, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_OscConfig+0x1f6>
 8001af2:	2e0c      	cmp	r6, #12
 8001af4:	d110      	bne.n	8001b18 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001af6:	2f02      	cmp	r7, #2
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	0559      	lsls	r1, r3, #21
 8001afe:	d503      	bpl.n	8001b08 <HAL_RCC_OscConfig+0x204>
 8001b00:	68eb      	ldr	r3, [r5, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f43f af02 	beq.w	800190c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	692a      	ldr	r2, [r5, #16]
 8001b0c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001b10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b14:	6063      	str	r3, [r4, #4]
 8001b16:	e77e      	b.n	8001a16 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b18:	68eb      	ldr	r3, [r5, #12]
 8001b1a:	b17b      	cbz	r3, 8001b3c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b24:	f7ff f9f4 	bl	8000f10 <HAL_GetTick>
 8001b28:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	055a      	lsls	r2, r3, #21
 8001b2e:	d4eb      	bmi.n	8001b08 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f9ee 	bl	8000f10 <HAL_GetTick>
 8001b34:	1bc0      	subs	r0, r0, r7
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d9f7      	bls.n	8001b2a <HAL_RCC_OscConfig+0x226>
 8001b3a:	e784      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b44:	f7ff f9e4 	bl	8000f10 <HAL_GetTick>
 8001b48:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	055b      	lsls	r3, r3, #21
 8001b4e:	f57f af62 	bpl.w	8001a16 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff f9dd 	bl	8000f10 <HAL_GetTick>
 8001b56:	1bc0      	subs	r0, r0, r7
 8001b58:	2802      	cmp	r0, #2
 8001b5a:	d9f6      	bls.n	8001b4a <HAL_RCC_OscConfig+0x246>
 8001b5c:	e773      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	696b      	ldr	r3, [r5, #20]
 8001b60:	b19b      	cbz	r3, 8001b8a <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001b62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f9cf 	bl	8000f10 <HAL_GetTick>
 8001b72:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b74:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b78:	079a      	lsls	r2, r3, #30
 8001b7a:	f53f af50 	bmi.w	8001a1e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f9c7 	bl	8000f10 <HAL_GetTick>
 8001b82:	1bc0      	subs	r0, r0, r7
 8001b84:	2802      	cmp	r0, #2
 8001b86:	d9f5      	bls.n	8001b74 <HAL_RCC_OscConfig+0x270>
 8001b88:	e75d      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8001b8a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001b96:	f7ff f9bb 	bl	8000f10 <HAL_GetTick>
 8001b9a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001ba0:	079b      	lsls	r3, r3, #30
 8001ba2:	f57f af3c 	bpl.w	8001a1e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f9b3 	bl	8000f10 <HAL_GetTick>
 8001baa:	1bc0      	subs	r0, r0, r7
 8001bac:	2802      	cmp	r0, #2
 8001bae:	d9f5      	bls.n	8001b9c <HAL_RCC_OscConfig+0x298>
 8001bb0:	e749      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	080062f4 	.word	0x080062f4
 8001bbc:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bc2:	00d8      	lsls	r0, r3, #3
 8001bc4:	d429      	bmi.n	8001c1a <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	65a3      	str	r3, [r4, #88]	; 0x58
 8001bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bd8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4f71      	ldr	r7, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x4a0>)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	05d9      	lsls	r1, r3, #23
 8001be2:	d51d      	bpl.n	8001c20 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	68ab      	ldr	r3, [r5, #8]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d12b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x33e>
 8001bea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f98b 	bl	8000f10 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bfe:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c00:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c04:	079b      	lsls	r3, r3, #30
 8001c06:	d542      	bpl.n	8001c8e <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001c08:	f1b8 0f00 	cmp.w	r8, #0
 8001c0c:	f43f af0b 	beq.w	8001a26 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c18:	e705      	b.n	8001a26 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	f04f 0800 	mov.w	r8, #0
 8001c1e:	e7dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c28:	f7ff f972 	bl	8000f10 <HAL_GetTick>
 8001c2c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	05da      	lsls	r2, r3, #23
 8001c32:	d4d7      	bmi.n	8001be4 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c34:	f7ff f96c 	bl	8000f10 <HAL_GetTick>
 8001c38:	eba0 0009 	sub.w	r0, r0, r9
 8001c3c:	2802      	cmp	r0, #2
 8001c3e:	d9f6      	bls.n	8001c2e <HAL_RCC_OscConfig+0x32a>
 8001c40:	e701      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d106      	bne.n	8001c54 <HAL_RCC_OscConfig+0x350>
 8001c46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001c52:	e7ca      	b.n	8001bea <HAL_RCC_OscConfig+0x2e6>
 8001c54:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001c60:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001c64:	f022 0204 	bic.w	r2, r2, #4
 8001c68:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1c2      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8001c70:	f7ff f94e 	bl	8000f10 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c74:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c7a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c7e:	0798      	lsls	r0, r3, #30
 8001c80:	d5c2      	bpl.n	8001c08 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff f945 	bl	8000f10 <HAL_GetTick>
 8001c86:	1bc0      	subs	r0, r0, r7
 8001c88:	4548      	cmp	r0, r9
 8001c8a:	d9f6      	bls.n	8001c7a <HAL_RCC_OscConfig+0x376>
 8001c8c:	e6db      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7ff f93f 	bl	8000f10 <HAL_GetTick>
 8001c92:	1bc0      	subs	r0, r0, r7
 8001c94:	4548      	cmp	r0, r9
 8001c96:	d9b3      	bls.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
 8001c98:	e6d5      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001c9c:	b19b      	cbz	r3, 8001cc6 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8001c9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001caa:	f7ff f931 	bl	8000f10 <HAL_GetTick>
 8001cae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cb0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001cb4:	079a      	lsls	r2, r3, #30
 8001cb6:	f53f aeba 	bmi.w	8001a2e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cba:	f7ff f929 	bl	8000f10 <HAL_GetTick>
 8001cbe:	1bc0      	subs	r0, r0, r7
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9f5      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x3ac>
 8001cc4:	e6bf      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8001cc6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f91d 	bl	8000f10 <HAL_GetTick>
 8001cd6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001cdc:	079b      	lsls	r3, r3, #30
 8001cde:	f57f aea6 	bpl.w	8001a2e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7ff f915 	bl	8000f10 <HAL_GetTick>
 8001ce6:	1bc0      	subs	r0, r0, r7
 8001ce8:	2802      	cmp	r0, #2
 8001cea:	d9f5      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3d4>
 8001cec:	e6ab      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cee:	2e0c      	cmp	r6, #12
 8001cf0:	f43f ae0c 	beq.w	800190c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfe:	d136      	bne.n	8001d6e <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001d00:	f7ff f906 	bl	8000f10 <HAL_GetTick>
 8001d04:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	6823      	ldr	r3, [r4, #0]
 8001d08:	0198      	lsls	r0, r3, #6
 8001d0a:	d42a      	bmi.n	8001d62 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001d0e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d10:	06db      	lsls	r3, r3, #27
 8001d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d16:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001d22:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001d24:	0852      	lsrs	r2, r2, #1
 8001d26:	3a01      	subs	r2, #1
 8001d28:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001d2c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001d2e:	0852      	lsrs	r2, r2, #1
 8001d30:	3a01      	subs	r2, #1
 8001d32:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001d36:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d40:	68e3      	ldr	r3, [r4, #12]
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d48:	f7ff f8e2 	bl	8000f10 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	0199      	lsls	r1, r3, #6
 8001d52:	f53f ae70 	bmi.w	8001a36 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff f8db 	bl	8000f10 <HAL_GetTick>
 8001d5a:	1b40      	subs	r0, r0, r5
 8001d5c:	2802      	cmp	r0, #2
 8001d5e:	d9f6      	bls.n	8001d4e <HAL_RCC_OscConfig+0x44a>
 8001d60:	e671      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff f8d5 	bl	8000f10 <HAL_GetTick>
 8001d66:	1b80      	subs	r0, r0, r6
 8001d68:	2802      	cmp	r0, #2
 8001d6a:	d9cc      	bls.n	8001d06 <HAL_RCC_OscConfig+0x402>
 8001d6c:	e66b      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d72:	bf5e      	ittt	pl
 8001d74:	68e3      	ldrpl	r3, [r4, #12]
 8001d76:	f023 0303 	bicpl.w	r3, r3, #3
 8001d7a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d7c:	68e3      	ldr	r3, [r4, #12]
 8001d7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d88:	f7ff f8c2 	bl	8000f10 <HAL_GetTick>
 8001d8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	f57f ae50 	bpl.w	8001a36 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff f8bb 	bl	8000f10 <HAL_GetTick>
 8001d9a:	1b40      	subs	r0, r0, r5
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9f6      	bls.n	8001d8e <HAL_RCC_OscConfig+0x48a>
 8001da0:	e651      	b.n	8001a46 <HAL_RCC_OscConfig+0x142>
 8001da2:	bf00      	nop
 8001da4:	40007000 	.word	0x40007000

08001da8 <HAL_RCC_ClockConfig>:
{
 8001da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dac:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001dae:	4604      	mov	r4, r0
 8001db0:	b910      	cbnz	r0, 8001db8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_RCC_ClockConfig+0x114>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d329      	bcc.n	8001e18 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	07d9      	lsls	r1, r3, #31
 8001dc8:	d431      	bmi.n	8001e2e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dca:	6821      	ldr	r1, [r4, #0]
 8001dcc:	078a      	lsls	r2, r1, #30
 8001dce:	d45b      	bmi.n	8001e88 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4a3a      	ldr	r2, [pc, #232]	; (8001ebc <HAL_RCC_ClockConfig+0x114>)
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	429e      	cmp	r6, r3
 8001dda:	d35d      	bcc.n	8001e98 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	f011 0f04 	tst.w	r1, #4
 8001de0:	4d37      	ldr	r5, [pc, #220]	; (8001ec0 <HAL_RCC_ClockConfig+0x118>)
 8001de2:	d164      	bne.n	8001eae <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	070b      	lsls	r3, r1, #28
 8001de6:	d506      	bpl.n	8001df6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de8:	68ab      	ldr	r3, [r5, #8]
 8001dea:	6922      	ldr	r2, [r4, #16]
 8001dec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001df0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001df4:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df6:	f7ff fd31 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001dfa:	68ab      	ldr	r3, [r5, #8]
 8001dfc:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <HAL_RCC_ClockConfig+0x11c>)
 8001dfe:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	40d8      	lsrs	r0, r3
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <HAL_RCC_ClockConfig+0x120>)
 8001e10:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff b84c 	b.w	8000eb0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	6813      	ldr	r3, [r2, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	d1c2      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xa>
 8001e2c:	e7ca      	b.n	8001dc4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2e:	6862      	ldr	r2, [r4, #4]
 8001e30:	4d23      	ldr	r5, [pc, #140]	; (8001ec0 <HAL_RCC_ClockConfig+0x118>)
 8001e32:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e34:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	d11b      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3c:	d0b9      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	68ab      	ldr	r3, [r5, #8]
 8001e40:	f023 0303 	bic.w	r3, r3, #3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001e48:	f7ff f862 	bl	8000f10 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001e50:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	68ab      	ldr	r3, [r5, #8]
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e5e:	d0b4      	beq.n	8001dca <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e60:	f7ff f856 	bl	8000f10 <HAL_GetTick>
 8001e64:	1bc0      	subs	r0, r0, r7
 8001e66:	4540      	cmp	r0, r8
 8001e68:	d9f3      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
}
 8001e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e70:	2a02      	cmp	r2, #2
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e78:	e7e0      	b.n	8001e3c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7a:	b912      	cbnz	r2, 8001e82 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e7c:	f013 0f02 	tst.w	r3, #2
 8001e80:	e7dc      	b.n	8001e3c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e82:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e86:	e7d9      	b.n	8001e3c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <HAL_RCC_ClockConfig+0x118>)
 8001e8a:	68a0      	ldr	r0, [r4, #8]
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e92:	4303      	orrs	r3, r0
 8001e94:	6093      	str	r3, [r2, #8]
 8001e96:	e79b      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	6813      	ldr	r3, [r2, #0]
 8001e9a:	f023 0307 	bic.w	r3, r3, #7
 8001e9e:	4333      	orrs	r3, r6
 8001ea0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	429e      	cmp	r6, r3
 8001eaa:	d182      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xa>
 8001eac:	e796      	b.n	8001ddc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eae:	68ab      	ldr	r3, [r5, #8]
 8001eb0:	68e2      	ldr	r2, [r4, #12]
 8001eb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60ab      	str	r3, [r5, #8]
 8001eba:	e793      	b.n	8001de4 <HAL_RCC_ClockConfig+0x3c>
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	080062f4 	.word	0x080062f4
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_RCC_GetHCLKFreq>:
}
 8001ecc:	4b01      	ldr	r3, [pc, #4]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eda:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee6:	6810      	ldr	r0, [r2, #0]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
}
 8001eec:	40d8      	lsrs	r0, r3
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08006304 	.word	0x08006304
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0a:	6810      	ldr	r0, [r2, #0]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
}
 8001f10:	40d8      	lsrs	r0, r3
 8001f12:	4770      	bx	lr
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08006304 	.word	0x08006304
 8001f1c:	20000008 	.word	0x20000008

08001f20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f22:	4b44      	ldr	r3, [pc, #272]	; (8002034 <RCCEx_PLLSAI1_Config+0x114>)
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	f012 0f03 	tst.w	r2, #3
{
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	460e      	mov	r6, r1
 8001f2e:	461c      	mov	r4, r3
 8001f30:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f32:	d039      	beq.n	8001fa8 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	f002 0203 	and.w	r2, r2, #3
 8001f3a:	4282      	cmp	r2, r0
 8001f3c:	d14b      	bne.n	8001fd6 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d049      	beq.n	8001fd6 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f42:	68db      	ldr	r3, [r3, #12]
       ||
 8001f44:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f46:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f4a:	3301      	adds	r3, #1
       ||
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d142      	bne.n	8001fd6 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f56:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7fe ffda 	bl	8000f10 <HAL_GetTick>
 8001f5c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	011a      	lsls	r2, r3, #4
 8001f62:	d441      	bmi.n	8001fe8 <RCCEx_PLLSAI1_Config+0xc8>
 8001f64:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	d045      	beq.n	8001ff6 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f6a:	2e01      	cmp	r6, #1
 8001f6c:	d14f      	bne.n	800200e <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f6e:	6922      	ldr	r2, [r4, #16]
 8001f70:	6928      	ldr	r0, [r5, #16]
 8001f72:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f76:	0840      	lsrs	r0, r0, #1
 8001f78:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001f7c:	3801      	subs	r0, #1
 8001f7e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001f82:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001f86:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f8e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7fe ffbe 	bl	8000f10 <HAL_GetTick>
 8001f94:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	d545      	bpl.n	8002028 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f9c:	6923      	ldr	r3, [r4, #16]
 8001f9e:	69aa      	ldr	r2, [r5, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	6123      	str	r3, [r4, #16]
 8001fa4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001fa8:	2802      	cmp	r0, #2
 8001faa:	d010      	beq.n	8001fce <RCCEx_PLLSAI1_Config+0xae>
 8001fac:	2803      	cmp	r0, #3
 8001fae:	d014      	beq.n	8001fda <RCCEx_PLLSAI1_Config+0xba>
 8001fb0:	2801      	cmp	r0, #1
 8001fb2:	d110      	bne.n	8001fd6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	079f      	lsls	r7, r3, #30
 8001fb8:	d5f5      	bpl.n	8001fa6 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fba:	68e3      	ldr	r3, [r4, #12]
 8001fbc:	686a      	ldr	r2, [r5, #4]
 8001fbe:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	4318      	orrs	r0, r3
 8001fc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001fca:	60e0      	str	r0, [r4, #12]
 8001fcc:	e7c0      	b.n	8001f50 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fd4:	d1f1      	bne.n	8001fba <RCCEx_PLLSAI1_Config+0x9a>
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	0391      	lsls	r1, r2, #14
 8001fde:	d4ec      	bmi.n	8001fba <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001fe6:	e7f5      	b.n	8001fd4 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fe8:	f7fe ff92 	bl	8000f10 <HAL_GetTick>
 8001fec:	1bc0      	subs	r0, r0, r7
 8001fee:	2802      	cmp	r0, #2
 8001ff0:	d9b5      	bls.n	8001f5e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff6:	6922      	ldr	r2, [r4, #16]
 8001ff8:	68e9      	ldr	r1, [r5, #12]
 8001ffa:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001ffe:	06c9      	lsls	r1, r1, #27
 8002000:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8002004:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002008:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800200a:	6123      	str	r3, [r4, #16]
 800200c:	e7bc      	b.n	8001f88 <RCCEx_PLLSAI1_Config+0x68>
 800200e:	6923      	ldr	r3, [r4, #16]
 8002010:	6968      	ldr	r0, [r5, #20]
 8002012:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002016:	0840      	lsrs	r0, r0, #1
 8002018:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800201c:	3801      	subs	r0, #1
 800201e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002022:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002026:	e7f0      	b.n	800200a <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002028:	f7fe ff72 	bl	8000f10 <HAL_GetTick>
 800202c:	1b80      	subs	r0, r0, r6
 800202e:	2802      	cmp	r0, #2
 8002030:	d9b1      	bls.n	8001f96 <RCCEx_PLLSAI1_Config+0x76>
 8002032:	e7de      	b.n	8001ff2 <RCCEx_PLLSAI1_Config+0xd2>
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800203c:	6805      	ldr	r5, [r0, #0]
 800203e:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8002042:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002044:	d00e      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002046:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002048:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800204c:	d053      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800204e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002052:	d055      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8002054:	2900      	cmp	r1, #0
 8002056:	d15e      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002058:	3004      	adds	r0, #4
 800205a:	f7ff ff61 	bl	8001f20 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800205e:	4605      	mov	r5, r0
 8002060:	2800      	cmp	r0, #0
 8002062:	d04d      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	039e      	lsls	r6, r3, #14
 8002068:	d563      	bpl.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800206a:	4e93      	ldr	r6, [pc, #588]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800206c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800206e:	00d8      	lsls	r0, r3, #3
 8002070:	f140 8116 	bpl.w	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002076:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80022bc <HAL_RCCEx_PeriphCLKConfig+0x284>
 800207a:	f8d8 3000 	ldr.w	r3, [r8]
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002086:	f7fe ff43 	bl	8000f10 <HAL_GetTick>
 800208a:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800208c:	f8d8 3000 	ldr.w	r3, [r8]
 8002090:	05d9      	lsls	r1, r3, #23
 8002092:	d542      	bpl.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8002094:	2d00      	cmp	r5, #0
 8002096:	d147      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002098:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800209c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020a0:	d014      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x94>
 80020a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d011      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a8:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80020ac:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80020b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020b4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020c4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80020c8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	07da      	lsls	r2, r3, #31
 80020ce:	d509      	bpl.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff1e 	bl	8000f10 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020d8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020da:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	f140 80c0 	bpl.w	8002264 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80020e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80020f4:	e018      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020f6:	4a70      	ldr	r2, [pc, #448]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80020f8:	68d3      	ldr	r3, [r2, #12]
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002100:	4a6d      	ldr	r2, [pc, #436]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002102:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002104:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002108:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800210c:	430b      	orrs	r3, r1
 800210e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002112:	2500      	movs	r5, #0
 8002114:	e7a6      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8002116:	2501      	movs	r5, #1
 8002118:	e7a4      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fef9 	bl	8000f10 <HAL_GetTick>
 800211e:	eba0 0009 	sub.w	r0, r0, r9
 8002122:	2802      	cmp	r0, #2
 8002124:	d9b2      	bls.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8002126:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002128:	b11f      	cbz	r7, 8002132 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	07df      	lsls	r7, r3, #31
 8002136:	d508      	bpl.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002138:	495f      	ldr	r1, [pc, #380]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800213a:	6a20      	ldr	r0, [r4, #32]
 800213c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002140:	f022 0203 	bic.w	r2, r2, #3
 8002144:	4302      	orrs	r2, r0
 8002146:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800214a:	079e      	lsls	r6, r3, #30
 800214c:	d508      	bpl.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800214e:	495a      	ldr	r1, [pc, #360]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002150:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002152:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002156:	f022 020c 	bic.w	r2, r2, #12
 800215a:	4302      	orrs	r2, r0
 800215c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002160:	0698      	lsls	r0, r3, #26
 8002162:	d508      	bpl.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002164:	4954      	ldr	r1, [pc, #336]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002166:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002168:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800216c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002170:	4302      	orrs	r2, r0
 8002172:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002176:	0599      	lsls	r1, r3, #22
 8002178:	d508      	bpl.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800217a:	494f      	ldr	r1, [pc, #316]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800217c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800217e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002182:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002186:	4302      	orrs	r2, r0
 8002188:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800218c:	055a      	lsls	r2, r3, #21
 800218e:	d508      	bpl.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002190:	4949      	ldr	r1, [pc, #292]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002192:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002194:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002198:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800219c:	4302      	orrs	r2, r0
 800219e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a2:	065f      	lsls	r7, r3, #25
 80021a4:	d508      	bpl.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a6:	4944      	ldr	r1, [pc, #272]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021b2:	4302      	orrs	r2, r0
 80021b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b8:	05de      	lsls	r6, r3, #23
 80021ba:	d508      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021bc:	493e      	ldr	r1, [pc, #248]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80021c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80021c8:	4302      	orrs	r2, r0
 80021ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021ce:	0498      	lsls	r0, r3, #18
 80021d0:	d50f      	bpl.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d2:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80021d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80021de:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021e8:	d144      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ea:	68d3      	ldr	r3, [r2, #12]
 80021ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	0359      	lsls	r1, r3, #13
 80021f6:	d50f      	bpl.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021f8:	4a2f      	ldr	r2, [pc, #188]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80021fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80021fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002200:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002204:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002206:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800220a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800220e:	d13c      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002210:	68d3      	ldr	r3, [r2, #12]
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	045a      	lsls	r2, r3, #17
 800221c:	d512      	bpl.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800221e:	4926      	ldr	r1, [pc, #152]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002220:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002222:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002226:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800222a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800222c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002234:	d106      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002236:	2102      	movs	r1, #2
 8002238:	1d20      	adds	r0, r4, #4
 800223a:	f7ff fe71 	bl	8001f20 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800223e:	2800      	cmp	r0, #0
 8002240:	bf18      	it	ne
 8002242:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	041b      	lsls	r3, r3, #16
 8002248:	d508      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800224a:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800224c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800224e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002256:	430b      	orrs	r3, r1
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800225c:	4628      	mov	r0, r5
 800225e:	b003      	add	sp, #12
 8002260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7fe fe54 	bl	8000f10 <HAL_GetTick>
 8002268:	eba0 0008 	sub.w	r0, r0, r8
 800226c:	4548      	cmp	r0, r9
 800226e:	f67f af34 	bls.w	80020da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002272:	e758      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002274:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002278:	d1bb      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800227a:	2101      	movs	r1, #1
 800227c:	1d20      	adds	r0, r4, #4
 800227e:	f7ff fe4f 	bl	8001f20 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002282:	2800      	cmp	r0, #0
 8002284:	bf18      	it	ne
 8002286:	4605      	movne	r5, r0
 8002288:	e7b3      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800228a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800228e:	d1c3      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002290:	2101      	movs	r1, #1
 8002292:	1d20      	adds	r0, r4, #4
 8002294:	f7ff fe44 	bl	8001f20 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002298:	2800      	cmp	r0, #0
 800229a:	bf18      	it	ne
 800229c:	4605      	movne	r5, r0
 800229e:	e7bb      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	65b3      	str	r3, [r6, #88]	; 0x58
 80022a8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022b2:	2701      	movs	r7, #1
 80022b4:	e6df      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000

080022c0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80022c0:	4a02      	ldr	r2, [pc, #8]	; (80022cc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000

080022d0 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80022d0:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d2:	69c1      	ldr	r1, [r0, #28]
{
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022d8:	6883      	ldr	r3, [r0, #8]
 80022da:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022dc:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022de:	4303      	orrs	r3, r0
 80022e0:	6960      	ldr	r0, [r4, #20]
 80022e2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022e4:	4882      	ldr	r0, [pc, #520]	; (80024f0 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022e6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022e8:	4028      	ands	r0, r5
 80022ea:	4303      	orrs	r3, r0
 80022ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ee:	6853      	ldr	r3, [r2, #4]
 80022f0:	68e0      	ldr	r0, [r4, #12]
 80022f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f6:	4303      	orrs	r3, r0
 80022f8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022fa:	4b7e      	ldr	r3, [pc, #504]	; (80024f4 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022fc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022fe:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002300:	bf1c      	itt	ne
 8002302:	6a23      	ldrne	r3, [r4, #32]
 8002304:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002306:	6893      	ldr	r3, [r2, #8]
 8002308:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800230c:	4303      	orrs	r3, r0
 800230e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002310:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <UART_SetConfig+0x228>)
 8002312:	429a      	cmp	r2, r3
 8002314:	d114      	bne.n	8002340 <UART_SetConfig+0x70>
 8002316:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800231a:	4a78      	ldr	r2, [pc, #480]	; (80024fc <UART_SetConfig+0x22c>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002324:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	f040 80aa 	bne.w	8002482 <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 800232e:	2b08      	cmp	r3, #8
 8002330:	d820      	bhi.n	8002374 <UART_SetConfig+0xa4>
 8002332:	e8df f003 	tbb	[pc, r3]
 8002336:	8f77      	.short	0x8f77
 8002338:	1f9b1f92 	.word	0x1f9b1f92
 800233c:	1f1f      	.short	0x1f1f
 800233e:	9e          	.byte	0x9e
 800233f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <UART_SetConfig+0x230>)
 8002342:	429a      	cmp	r2, r3
 8002344:	d107      	bne.n	8002356 <UART_SetConfig+0x86>
 8002346:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800234a:	4a6e      	ldr	r2, [pc, #440]	; (8002504 <UART_SetConfig+0x234>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	e7e6      	b.n	8002324 <UART_SetConfig+0x54>
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <UART_SetConfig+0x224>)
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 80c2 	bne.w	80024e2 <UART_SetConfig+0x212>
 800235e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002362:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002366:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800236a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800236e:	d02a      	beq.n	80023c6 <UART_SetConfig+0xf6>
 8002370:	d806      	bhi.n	8002380 <UART_SetConfig+0xb0>
 8002372:	b315      	cbz	r5, 80023ba <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002374:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800237a:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800237c:	4610      	mov	r0, r2
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002380:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002384:	d006      	beq.n	8002394 <UART_SetConfig+0xc4>
 8002386:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800238a:	d1f3      	bne.n	8002374 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800238c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002390:	2508      	movs	r5, #8
 8002392:	e001      	b.n	8002398 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002394:	485c      	ldr	r0, [pc, #368]	; (8002508 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002396:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002398:	6862      	ldr	r2, [r4, #4]
 800239a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800239e:	4283      	cmp	r3, r0
 80023a0:	d8e8      	bhi.n	8002374 <UART_SetConfig+0xa4>
 80023a2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80023a6:	d8e5      	bhi.n	8002374 <UART_SetConfig+0xa4>
        switch (clocksource)
 80023a8:	2d08      	cmp	r5, #8
 80023aa:	d838      	bhi.n	800241e <UART_SetConfig+0x14e>
 80023ac:	e8df f005 	tbb	[pc, r5]
 80023b0:	3726370f 	.word	0x3726370f
 80023b4:	3737372e 	.word	0x3737372e
 80023b8:	31          	.byte	0x31
 80023b9:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80023ba:	f7ff fd8d 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80023be:	2800      	cmp	r0, #0
 80023c0:	d1ea      	bne.n	8002398 <UART_SetConfig+0xc8>
 80023c2:	4602      	mov	r2, r0
 80023c4:	e7d7      	b.n	8002376 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80023c6:	f7ff fa49 	bl	800185c <HAL_RCC_GetSysClockFreq>
        break;
 80023ca:	2504      	movs	r5, #4
 80023cc:	e7f7      	b.n	80023be <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023ce:	f7ff fd83 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d8:	0856      	lsrs	r6, r2, #1
 80023da:	2700      	movs	r7, #0
 80023dc:	fbe1 6700 	umlal	r6, r7, r1, r0
 80023e0:	2300      	movs	r3, #0
 80023e2:	4630      	mov	r0, r6
 80023e4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80023e6:	f7fe fbdb 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 80023ea:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023ec:	4b47      	ldr	r3, [pc, #284]	; (800250c <UART_SetConfig+0x23c>)
 80023ee:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80023f2:	4299      	cmp	r1, r3
 80023f4:	d8be      	bhi.n	8002374 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	60d8      	str	r0, [r3, #12]
 80023fa:	e7bc      	b.n	8002376 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80023fc:	4844      	ldr	r0, [pc, #272]	; (8002510 <UART_SetConfig+0x240>)
 80023fe:	0855      	lsrs	r5, r2, #1
 8002400:	2300      	movs	r3, #0
 8002402:	2100      	movs	r1, #0
 8002404:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002406:	f141 0100 	adc.w	r1, r1, #0
 800240a:	e7ec      	b.n	80023e6 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800240c:	f7ff fa26 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8002410:	e7df      	b.n	80023d2 <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002412:	0850      	lsrs	r0, r2, #1
 8002414:	2100      	movs	r1, #0
 8002416:	2300      	movs	r3, #0
 8002418:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800241c:	e7f3      	b.n	8002406 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 800241e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002420:	2000      	movs	r0, #0
 8002422:	e7e3      	b.n	80023ec <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002424:	f7ff fd58 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002428:	6861      	ldr	r1, [r4, #4]
 800242a:	084a      	lsrs	r2, r1, #1
 800242c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002430:	fbb3 f3f1 	udiv	r3, r3, r1
 8002434:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002436:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002438:	f1a3 0010 	sub.w	r0, r3, #16
 800243c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002440:	4288      	cmp	r0, r1
 8002442:	d897      	bhi.n	8002374 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002444:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002448:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800244a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800244e:	430b      	orrs	r3, r1
 8002450:	60c3      	str	r3, [r0, #12]
 8002452:	e790      	b.n	8002376 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002454:	f7ff fd52 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002458:	e7e6      	b.n	8002428 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800245a:	6860      	ldr	r0, [r4, #4]
 800245c:	0843      	lsrs	r3, r0, #1
 800245e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002462:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002466:	fbb3 f3f0 	udiv	r3, r3, r0
 800246a:	e7e3      	b.n	8002434 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800246c:	f7ff f9f6 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8002470:	e7da      	b.n	8002428 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002472:	6860      	ldr	r0, [r4, #4]
 8002474:	0843      	lsrs	r3, r0, #1
 8002476:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800247a:	e7f4      	b.n	8002466 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 800247c:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800247e:	2300      	movs	r3, #0
 8002480:	e7da      	b.n	8002438 <UART_SetConfig+0x168>
    switch (clocksource)
 8002482:	2b08      	cmp	r3, #8
 8002484:	d830      	bhi.n	80024e8 <UART_SetConfig+0x218>
 8002486:	e8df f003 	tbb	[pc, r3]
 800248a:	1805      	.short	0x1805
 800248c:	2f242f1b 	.word	0x2f242f1b
 8002490:	2f2f      	.short	0x2f2f
 8002492:	27          	.byte	0x27
 8002493:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002494:	f7ff fd20 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002498:	6862      	ldr	r2, [r4, #4]
 800249a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800249e:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a4:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a6:	f1a3 0010 	sub.w	r0, r3, #16
 80024aa:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80024ae:	4288      	cmp	r0, r1
 80024b0:	f63f af60 	bhi.w	8002374 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 80024b4:	6821      	ldr	r1, [r4, #0]
 80024b6:	60cb      	str	r3, [r1, #12]
 80024b8:	e75d      	b.n	8002376 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024ba:	f7ff fd1f 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 80024be:	e7eb      	b.n	8002498 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80024c0:	6860      	ldr	r0, [r4, #4]
 80024c2:	0843      	lsrs	r3, r0, #1
 80024c4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80024c8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80024d0:	e7e7      	b.n	80024a2 <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80024d2:	f7ff f9c3 	bl	800185c <HAL_RCC_GetSysClockFreq>
 80024d6:	e7df      	b.n	8002498 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80024d8:	6860      	ldr	r0, [r4, #4]
 80024da:	0843      	lsrs	r3, r0, #1
 80024dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024e0:	e7f4      	b.n	80024cc <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80024e6:	d0c9      	beq.n	800247c <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 80024e8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e7db      	b.n	80024a6 <UART_SetConfig+0x1d6>
 80024ee:	bf00      	nop
 80024f0:	efff69f3 	.word	0xefff69f3
 80024f4:	40008000 	.word	0x40008000
 80024f8:	40013800 	.word	0x40013800
 80024fc:	08006290 	.word	0x08006290
 8002500:	40004400 	.word	0x40004400
 8002504:	08006294 	.word	0x08006294
 8002508:	00f42400 	.word	0x00f42400
 800250c:	000ffcff 	.word	0x000ffcff
 8002510:	f4240000 	.word	0xf4240000

08002514 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002514:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002516:	07da      	lsls	r2, r3, #31
{
 8002518:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800251a:	d506      	bpl.n	800252a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800251c:	6801      	ldr	r1, [r0, #0]
 800251e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002520:	684a      	ldr	r2, [r1, #4]
 8002522:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002526:	4322      	orrs	r2, r4
 8002528:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800252a:	079c      	lsls	r4, r3, #30
 800252c:	d506      	bpl.n	800253c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800252e:	6801      	ldr	r1, [r0, #0]
 8002530:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002532:	684a      	ldr	r2, [r1, #4]
 8002534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002538:	4322      	orrs	r2, r4
 800253a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800253c:	0759      	lsls	r1, r3, #29
 800253e:	d506      	bpl.n	800254e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002540:	6801      	ldr	r1, [r0, #0]
 8002542:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002544:	684a      	ldr	r2, [r1, #4]
 8002546:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800254a:	4322      	orrs	r2, r4
 800254c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800254e:	071a      	lsls	r2, r3, #28
 8002550:	d506      	bpl.n	8002560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002552:	6801      	ldr	r1, [r0, #0]
 8002554:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002556:	684a      	ldr	r2, [r1, #4]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	4322      	orrs	r2, r4
 800255e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002560:	06dc      	lsls	r4, r3, #27
 8002562:	d506      	bpl.n	8002572 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002564:	6801      	ldr	r1, [r0, #0]
 8002566:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002568:	688a      	ldr	r2, [r1, #8]
 800256a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800256e:	4322      	orrs	r2, r4
 8002570:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002572:	0699      	lsls	r1, r3, #26
 8002574:	d506      	bpl.n	8002584 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002576:	6801      	ldr	r1, [r0, #0]
 8002578:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002580:	4322      	orrs	r2, r4
 8002582:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002584:	065a      	lsls	r2, r3, #25
 8002586:	d50f      	bpl.n	80025a8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002588:	6801      	ldr	r1, [r0, #0]
 800258a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800258c:	684a      	ldr	r2, [r1, #4]
 800258e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002592:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002594:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002598:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800259a:	d105      	bne.n	80025a8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800259c:	684a      	ldr	r2, [r1, #4]
 800259e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80025a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80025a4:	4322      	orrs	r2, r4
 80025a6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	d506      	bpl.n	80025ba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025ac:	6802      	ldr	r2, [r0, #0]
 80025ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025b0:	6853      	ldr	r3, [r2, #4]
 80025b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6053      	str	r3, [r2, #4]
 80025ba:	bd10      	pop	{r4, pc}

080025bc <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c0:	9d06      	ldr	r5, [sp, #24]
 80025c2:	4604      	mov	r4, r0
 80025c4:	460f      	mov	r7, r1
 80025c6:	4616      	mov	r6, r2
 80025c8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ca:	6821      	ldr	r1, [r4, #0]
 80025cc:	69ca      	ldr	r2, [r1, #28]
 80025ce:	ea37 0302 	bics.w	r3, r7, r2
 80025d2:	bf0c      	ite	eq
 80025d4:	2201      	moveq	r2, #1
 80025d6:	2200      	movne	r2, #0
 80025d8:	42b2      	cmp	r2, r6
 80025da:	d002      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025dc:	2000      	movs	r0, #0
}
 80025de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	1c6b      	adds	r3, r5, #1
 80025e4:	d0f2      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025e6:	b99d      	cbnz	r5, 8002610 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80025fa:	2320      	movs	r3, #32
 80025fc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002600:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002604:	2300      	movs	r3, #0
 8002606:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800260a:	2003      	movs	r0, #3
 800260c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002610:	f7fe fc7e 	bl	8000f10 <HAL_GetTick>
 8002614:	eba0 0008 	sub.w	r0, r0, r8
 8002618:	4285      	cmp	r5, r0
 800261a:	d2d6      	bcs.n	80025ca <UART_WaitOnFlagUntilTimeout+0xe>
 800261c:	e7e4      	b.n	80025e8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800261e <HAL_UART_Transmit>:
{
 800261e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002622:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002624:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002628:	2b20      	cmp	r3, #32
{
 800262a:	4604      	mov	r4, r0
 800262c:	460d      	mov	r5, r1
 800262e:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002630:	d14a      	bne.n	80026c8 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002632:	2900      	cmp	r1, #0
 8002634:	d046      	beq.n	80026c4 <HAL_UART_Transmit+0xa6>
 8002636:	2a00      	cmp	r2, #0
 8002638:	d044      	beq.n	80026c4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800263a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800263e:	2b01      	cmp	r3, #1
 8002640:	d042      	beq.n	80026c8 <HAL_UART_Transmit+0xaa>
 8002642:	2301      	movs	r3, #1
 8002644:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264c:	2321      	movs	r3, #33	; 0x21
 800264e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002652:	f7fe fc5d 	bl	8000f10 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002656:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800265a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800265c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002660:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002666:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002668:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800266a:	b952      	cbnz	r2, 8002682 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ffa4 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002674:	b958      	cbnz	r0, 800268e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002676:	2320      	movs	r3, #32
 8002678:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800267c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002680:	e006      	b.n	8002690 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	2200      	movs	r2, #0
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff ff98 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 800268c:	b118      	cbz	r0, 8002696 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800268e:	2003      	movs	r0, #3
}
 8002690:	b002      	add	sp, #8
 8002692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	68a3      	ldr	r3, [r4, #8]
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d10d      	bne.n	80026bc <HAL_UART_Transmit+0x9e>
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	b95b      	cbnz	r3, 80026bc <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80026a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ac:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80026ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80026ba:	e7d1      	b.n	8002660 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026bc:	782b      	ldrb	r3, [r5, #0]
 80026be:	8513      	strh	r3, [r2, #40]	; 0x28
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7f4      	b.n	80026ae <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80026c4:	2001      	movs	r0, #1
 80026c6:	e7e3      	b.n	8002690 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 80026c8:	2002      	movs	r0, #2
 80026ca:	e7e1      	b.n	8002690 <HAL_UART_Transmit+0x72>

080026cc <UART_CheckIdleState>:
{
 80026cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026ce:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	2600      	movs	r6, #0
 80026d2:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80026d4:	f7fe fc1c 	bl	8000f10 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80026de:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026e0:	d417      	bmi.n	8002712 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	075b      	lsls	r3, r3, #29
 80026e8:	d50a      	bpl.n	8002700 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	462b      	mov	r3, r5
 80026f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff ff5f 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 80026fe:	b9a0      	cbnz	r0, 800272a <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002700:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002702:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002704:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002708:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800270c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002710:	e00c      	b.n	800272c <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002712:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4632      	mov	r2, r6
 800271a:	4603      	mov	r3, r0
 800271c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff ff4b 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002726:	2800      	cmp	r0, #0
 8002728:	d0db      	beq.n	80026e2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800272a:	2003      	movs	r0, #3
}
 800272c:	b002      	add	sp, #8
 800272e:	bd70      	pop	{r4, r5, r6, pc}

08002730 <HAL_UART_Init>:
{
 8002730:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002732:	4604      	mov	r4, r0
 8002734:	b360      	cbz	r0, 8002790 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800273a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800273e:	b91b      	cbnz	r3, 8002748 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002740:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002744:	f000 fbea 	bl	8002f1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002748:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800274a:	2324      	movs	r3, #36	; 0x24
 800274c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff fdb9 	bl	80022d0 <UART_SetConfig>
 800275e:	2801      	cmp	r0, #1
 8002760:	d016      	beq.n	8002790 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002764:	b113      	cbz	r3, 800276c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fed4 	bl	8002514 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002774:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800277c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002784:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800278c:	f7ff bf9e 	b.w	80026cc <UART_CheckIdleState>
}
 8002790:	2001      	movs	r0, #1
 8002792:	bd10      	pop	{r4, pc}

08002794 <send_to_xbee>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void send_to_xbee(char dataHexa[8]){
 8002794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int sum2 = 0x00;
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB + option;
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <send_to_xbee+0xb4>)
 800279a:	f893 a000 	ldrb.w	sl, [r3]
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <send_to_xbee+0xb8>)
 80027a0:	f893 9000 	ldrb.w	r9, [r3]
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <send_to_xbee+0xbc>)
 80027a6:	f893 8000 	ldrb.w	r8, [r3]
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <send_to_xbee+0xc0>)
 80027ac:	781f      	ldrb	r7, [r3, #0]
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <send_to_xbee+0xc4>)
 80027b0:	eb0a 0209 	add.w	r2, sl, r9
 80027b4:	781e      	ldrb	r6, [r3, #0]
 80027b6:	4442      	add	r2, r8
 80027b8:	443a      	add	r2, r7
void send_to_xbee(char dataHexa[8]){
 80027ba:	4605      	mov	r5, r0
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB + option;
 80027bc:	1994      	adds	r4, r2, r6
	for (int i = 0; i < strlen(dataHexa); i++) {
 80027be:	f7fd fd07 	bl	80001d0 <strlen>
 80027c2:	462b      	mov	r3, r5
 80027c4:	4428      	add	r0, r5
	int sum2 = 0x00;
 80027c6:	2200      	movs	r2, #0
	for (int i = 0; i < strlen(dataHexa); i++) {
 80027c8:	4283      	cmp	r3, r0
 80027ca:	d138      	bne.n	800283e <send_to_xbee+0xaa>
	}
	int sum = 0;
	sum = sum1 + sum2;
	unsigned char two_last_digit = sum & 0xFF;
	unsigned char checksum = 255 - two_last_digit;
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <send_to_xbee+0xc8>)
 80027ce:	f88d a003 	strb.w	sl, [sp, #3]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f88d 3000 	strb.w	r3, [sp]
 80027d8:	4b21      	ldr	r3, [pc, #132]	; (8002860 <send_to_xbee+0xcc>)
 80027da:	f88d 9004 	strb.w	r9, [sp, #4]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f88d 3001 	strb.w	r3, [sp, #1]
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <send_to_xbee+0xd0>)
 80027e6:	f88d 8005 	strb.w	r8, [sp, #5]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f88d 3002 	strb.w	r3, [sp, #2]
	sum = sum1 + sum2;
 80027f0:	4422      	add	r2, r4
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 80027f2:	2300      	movs	r3, #0
	unsigned char checksum = 255 - two_last_digit;
 80027f4:	43d2      	mvns	r2, r2
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,frame_type, frame_id, destination_add_MSB, destination_add_LSB,option, 0, 0, 0, 0, 0, 0, 0, checksum };
 80027f6:	f88d 7006 	strb.w	r7, [sp, #6]
 80027fa:	f88d 6007 	strb.w	r6, [sp, #7]
 80027fe:	f88d 3008 	strb.w	r3, [sp, #8]
 8002802:	f88d 3009 	strb.w	r3, [sp, #9]
 8002806:	f88d 300a 	strb.w	r3, [sp, #10]
 800280a:	f88d 300b 	strb.w	r3, [sp, #11]
 800280e:	f88d 300c 	strb.w	r3, [sp, #12]
 8002812:	f88d 300d 	strb.w	r3, [sp, #13]
 8002816:	f88d 300e 	strb.w	r3, [sp, #14]
 800281a:	f88d 200f 	strb.w	r2, [sp, #15]
	for (int i = 0; i < 7; i++) {
		message[8 + i] = dataHexa[i];
 800281e:	eb0d 0203 	add.w	r2, sp, r3
 8002822:	5ce9      	ldrb	r1, [r5, r3]
 8002824:	7211      	strb	r1, [r2, #8]
	for (int i = 0; i < 7; i++) {
 8002826:	3301      	adds	r3, #1
 8002828:	2b07      	cmp	r3, #7
 800282a:	d1f8      	bne.n	800281e <send_to_xbee+0x8a>
	}
	HAL_UART_Transmit(&huart1, message, 16, 100);
 800282c:	2364      	movs	r3, #100	; 0x64
 800282e:	2210      	movs	r2, #16
 8002830:	4669      	mov	r1, sp
 8002832:	480d      	ldr	r0, [pc, #52]	; (8002868 <send_to_xbee+0xd4>)
 8002834:	f7ff fef3 	bl	800261e <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, message, 16, 100);
}
 8002838:	b004      	add	sp, #16
 800283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sum2 += dataHexa[i];
 800283e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002842:	440a      	add	r2, r1
 8002844:	e7c0      	b.n	80027c8 <send_to_xbee+0x34>
 8002846:	bf00      	nop
 8002848:	20000005 	.word	0x20000005
 800284c:	20000004 	.word	0x20000004
 8002850:	20000003 	.word	0x20000003
 8002854:	20000002 	.word	0x20000002
 8002858:	200001fd 	.word	0x200001fd
 800285c:	20000007 	.word	0x20000007
 8002860:	200001fc 	.word	0x200001fc
 8002864:	20000006 	.word	0x20000006
 8002868:	20000270 	.word	0x20000270

0800286c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800286c:	b510      	push	{r4, lr}
 800286e:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability
    */
  HAL_PWR_EnableBkUpAccess();
 8002870:	f7fe ff6c 	bl	800174c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <SystemClock_Config+0xac>)
 8002876:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800287a:	f023 0318 	bic.w	r3, r3, #24
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002882:	2314      	movs	r3, #20
 8002884:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002886:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002888:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800288a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800288c:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800288e:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002890:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002892:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002894:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002896:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002898:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800289a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800289c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80028a0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028a2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028a4:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028a6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028a8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028aa:	f7ff f82b 	bl	8001904 <HAL_RCC_OscConfig>
 80028ae:	b100      	cbz	r0, 80028b2 <SystemClock_Config+0x46>
 80028b0:	e7fe      	b.n	80028b0 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b2:	230f      	movs	r3, #15
 80028b4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028ba:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028bc:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028be:	4621      	mov	r1, r4
 80028c0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c2:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028c4:	f7ff fa70 	bl	8001da8 <HAL_RCC_ClockConfig>
 80028c8:	b100      	cbz	r0, 80028cc <SystemClock_Config+0x60>
 80028ca:	e7fe      	b.n	80028ca <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80028cc:	2343      	movs	r3, #67	; 0x43
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028ce:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028d0:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028d2:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d4:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80028d6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d8:	f7ff fbae 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 80028dc:	b100      	cbz	r0, 80028e0 <SystemClock_Config+0x74>
 80028de:	e7fe      	b.n	80028de <SystemClock_Config+0x72>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028e4:	f7fe ff42 	bl	800176c <HAL_PWREx_ControlVoltageScaling>
 80028e8:	4604      	mov	r4, r0
 80028ea:	b100      	cbz	r0, 80028ee <SystemClock_Config+0x82>
 80028ec:	e7fe      	b.n	80028ec <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028ee:	f7ff faed 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80028fa:	f7fe fb63 	bl	8000fc4 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028fe:	2004      	movs	r0, #4
 8002900:	f7fe fb76 	bl	8000ff0 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8002904:	f7ff fcdc 	bl	80022c0 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002908:	4622      	mov	r2, r4
 800290a:	4621      	mov	r1, r4
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7fe fb24 	bl	8000f5c <HAL_NVIC_SetPriority>
}
 8002914:	b02c      	add	sp, #176	; 0xb0
 8002916:	bd10      	pop	{r4, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	00000000 	.word	0x00000000

08002920 <main>:
{
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	ed2d 8b04 	vpush	{d8-d9}
 8002928:	b0b5      	sub	sp, #212	; 0xd4
  HAL_Init();
 800292a:	f7fe fad9 	bl	8000ee0 <HAL_Init>
  SystemClock_Config();
 800292e:	f7ff ff9d 	bl	800286c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <main+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002934:	4837      	ldr	r0, [pc, #220]	; (8002a14 <main+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002938:	f042 0204 	orr.w	r2, r2, #4
 800293c:	64da      	str	r2, [r3, #76]	; 0x4c
 800293e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002940:	f002 0204 	and.w	r2, r2, #4
 8002944:	9202      	str	r2, [sp, #8]
 8002946:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002952:	f002 0201 	and.w	r2, r2, #1
 8002956:	9203      	str	r2, [sp, #12]
 8002958:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295c:	f042 0202 	orr.w	r2, r2, #2
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800296a:	2200      	movs	r2, #0
 800296c:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002974:	f7fe fc02 	bl	800117c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 8002978:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800297a:	4826      	ldr	r0, [pc, #152]	; (8002a14 <main+0xf4>)
  GPIO_InitStruct.Pin = LD3_Pin;
 800297c:	932f      	str	r3, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800297e:	a92f      	add	r1, sp, #188	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	9530      	str	r5, [sp, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	9431      	str	r4, [sp, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	9432      	str	r4, [sp, #200]	; 0xc8
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002986:	f7fe fb45 	bl	8001014 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800298a:	4823      	ldr	r0, [pc, #140]	; (8002a18 <main+0xf8>)
  huart2.Init.BaudRate = 115200;
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <main+0xfc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800298e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002990:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8002994:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	260c      	movs	r6, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800299a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800299c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800299e:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a2:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a4:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a6:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029a8:	f7ff fec2 	bl	8002730 <HAL_UART_Init>
 80029ac:	b100      	cbz	r0, 80029b0 <main+0x90>
 80029ae:	e7fe      	b.n	80029ae <main+0x8e>
  huart1.Instance = USART1;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <main+0x100>)
  huart1.Init.BaudRate = 9600;
 80029b2:	491c      	ldr	r1, [pc, #112]	; (8002a24 <main+0x104>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029b4:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 80029b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ba:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029bc:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029be:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c2:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029c6:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 9600;
 80029c8:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029cc:	615e      	str	r6, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ce:	f7ff feaf 	bl	8002730 <HAL_UART_Init>
 80029d2:	b100      	cbz	r0, 80029d6 <main+0xb6>
 80029d4:	e7fe      	b.n	80029d4 <main+0xb4>
  hi2c1.Instance = I2C1;
 80029d6:	4c14      	ldr	r4, [pc, #80]	; (8002a28 <main+0x108>)
  hi2c1.Init.Timing = 0x00707CBB;
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <main+0x10c>)
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <main+0x110>)
  hi2c1.Init.OwnAddress1 = 0;
 80029dc:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029de:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029e0:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029e2:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e4:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e6:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029e8:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 80029ea:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ee:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f0:	f7fe fce4 	bl	80013bc <HAL_I2C_Init>
 80029f4:	4601      	mov	r1, r0
 80029f6:	b100      	cbz	r0, 80029fa <main+0xda>
 80029f8:	e7fe      	b.n	80029f8 <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe fe5a 	bl	80016b4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a00:	4601      	mov	r1, r0
 8002a02:	b100      	cbz	r0, 8002a06 <main+0xe6>
 8002a04:	e7fe      	b.n	8002a04 <main+0xe4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7fe fe7a 	bl	8001700 <HAL_I2CEx_ConfigDigitalFilter>
 8002a0c:	b190      	cbz	r0, 8002a34 <main+0x114>
 8002a0e:	e7fe      	b.n	8002a0e <main+0xee>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	48000400 	.word	0x48000400
 8002a18:	20000300 	.word	0x20000300
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	20000270 	.word	0x20000270
 8002a24:	40013800 	.word	0x40013800
 8002a28:	20000214 	.word	0x20000214
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	00707cbb 	.word	0x00707cbb
  ADSwrite[0]=0x01;
 8002a34:	4ed4      	ldr	r6, [pc, #848]	; (8002d88 <main+0x468>)
	  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 3, 100);
 8002a36:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 8002de8 <main+0x4c8>
  ADSwrite[0]=0x01;
 8002a3a:	7035      	strb	r5, [r6, #0]
  ADSwrite[1]=0xE5;	//11100101
 8002a3c:	23e5      	movs	r3, #229	; 0xe5
 8002a3e:	7073      	strb	r3, [r6, #1]
  ADSwrite[2]=0x83;	//10000011
 8002a40:	2383      	movs	r3, #131	; 0x83
 8002a42:	70b3      	strb	r3, [r6, #2]
 8002a44:	271e      	movs	r7, #30
	  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 3, 100);
 8002a46:	46b0      	mov	r8, r6
 8002a48:	2564      	movs	r5, #100	; 0x64
 8002a4a:	f899 1000 	ldrb.w	r1, [r9]
 8002a4e:	9500      	str	r5, [sp, #0]
 8002a50:	2303      	movs	r3, #3
 8002a52:	4642      	mov	r2, r8
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7fe fd03 	bl	8001460 <HAL_I2C_Master_Transmit>
	  ADSwrite[0]=0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	7033      	strb	r3, [r6, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 1, 100);
 8002a5e:	f899 1000 	ldrb.w	r1, [r9]
 8002a62:	9500      	str	r5, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	4642      	mov	r2, r8
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7fe fcf9 	bl	8001460 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, ADS1015_ADDRESS_read, received_data, 2, 100);
 8002a6e:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8002dec <main+0x4cc>
 8002a72:	4bc6      	ldr	r3, [pc, #792]	; (8002d8c <main+0x46c>)
 8002a74:	4652      	mov	r2, sl
 8002a76:	7819      	ldrb	r1, [r3, #0]
 8002a78:	9500      	str	r5, [sp, #0]
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7fe fd83 	bl	8001588 <HAL_I2C_Master_Receive>
	  reading = ((received_data[0] << 8) | received_data[1]) >> 4;
 8002a82:	f89a 2000 	ldrb.w	r2, [sl]
 8002a86:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002a8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a8e:	4ac0      	ldr	r2, [pc, #768]	; (8002d90 <main+0x470>)
 8002a90:	111b      	asrs	r3, r3, #4
 8002a92:	8013      	strh	r3, [r2, #0]
  	  reading1+=reading;
 8002a94:	4abf      	ldr	r2, [pc, #764]	; (8002d94 <main+0x474>)
 8002a96:	8811      	ldrh	r1, [r2, #0]
 8002a98:	440b      	add	r3, r1
 8002a9a:	b21b      	sxth	r3, r3
  for(int i=0; i<30; i++){
 8002a9c:	3f01      	subs	r7, #1
  	  reading1+=reading;
 8002a9e:	8013      	strh	r3, [r2, #0]
  for(int i=0; i<30; i++){
 8002aa0:	d1d2      	bne.n	8002a48 <main+0x128>
  reading1=reading1/30;
 8002aa2:	211e      	movs	r1, #30
 8002aa4:	fb93 f3f1 	sdiv	r3, r3, r1
  VRo=5-reading1*voltageConv;
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	ed9f 6aba 	vldr	s12, [pc, #744]	; 8002d98 <main+0x478>
  IRo=VRo/56;
 8002ab0:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8002d9c <main+0x47c>
  reading1=reading1/30;
 8002ab4:	8013      	strh	r3, [r2, #0]
  VRo=5-reading1*voltageConv;
 8002ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aba:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002abe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ac2:	4bb7      	ldr	r3, [pc, #732]	; (8002da0 <main+0x480>)
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 3, 100);
 8002ac4:	4fb7      	ldr	r7, [pc, #732]	; (8002da4 <main+0x484>)
		  HAL_UART_Transmit(&huart2, data8, sizeof(data8), 100);
 8002ac6:	4cb8      	ldr	r4, [pc, #736]	; (8002da8 <main+0x488>)
  VRo=5-reading1*voltageConv;
 8002ac8:	ee36 5ae7 	vsub.f32	s10, s13, s15
 8002acc:	eeb0 9a46 	vmov.f32	s18, s12
  IRo=VRo/56;
 8002ad0:	eec5 5a07 	vdiv.f32	s11, s10, s14
  VRo=5-reading1*voltageConv;
 8002ad4:	ed83 5a00 	vstr	s10, [r3]
  Ro=(reading1*voltageConv)/IRo;
 8002ad8:	ee87 5aa5 	vdiv.f32	s10, s15, s11
  IRo=VRo/56;
 8002adc:	4bb3      	ldr	r3, [pc, #716]	; (8002dac <main+0x48c>)
 8002ade:	edc3 5a00 	vstr	s11, [r3]
  Ro=(reading1*voltageConv)/IRo;
 8002ae2:	4bb3      	ldr	r3, [pc, #716]	; (8002db0 <main+0x490>)
 8002ae4:	eef0 8a66 	vmov.f32	s17, s13
 8002ae8:	ed83 5a00 	vstr	s10, [r3]
 8002aec:	eeb0 8a47 	vmov.f32	s16, s14
		  char data[8]="";
 8002af0:	f04f 0800 	mov.w	r8, #0
		  char data1[20]="";
 8002af4:	4641      	mov	r1, r8
 8002af6:	2210      	movs	r2, #16
 8002af8:	a808      	add	r0, sp, #32
		  char data[8]="";
 8002afa:	f8cd 8014 	str.w	r8, [sp, #20]
 8002afe:	f8cd 8018 	str.w	r8, [sp, #24]
		  char data1[20]="";
 8002b02:	f8cd 801c 	str.w	r8, [sp, #28]
 8002b06:	f000 fad7 	bl	80030b8 <memset>
		  char data2[20]="";
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	a80d      	add	r0, sp, #52	; 0x34
 8002b10:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002b14:	f000 fad0 	bl	80030b8 <memset>
		  char data3[20]="";
 8002b18:	4641      	mov	r1, r8
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	a812      	add	r0, sp, #72	; 0x48
 8002b1e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8002b22:	f000 fac9 	bl	80030b8 <memset>
		  char data4[20]="";
 8002b26:	4641      	mov	r1, r8
 8002b28:	2210      	movs	r2, #16
 8002b2a:	a817      	add	r0, sp, #92	; 0x5c
 8002b2c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
 8002b30:	f000 fac2 	bl	80030b8 <memset>
		  char data5[20]="";
 8002b34:	4641      	mov	r1, r8
 8002b36:	2210      	movs	r2, #16
 8002b38:	a81c      	add	r0, sp, #112	; 0x70
 8002b3a:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8002b3e:	f000 fabb 	bl	80030b8 <memset>
		  char data6[20]="";
 8002b42:	4641      	mov	r1, r8
 8002b44:	2210      	movs	r2, #16
 8002b46:	a821      	add	r0, sp, #132	; 0x84
 8002b48:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8002b4c:	f000 fab4 	bl	80030b8 <memset>
		  char data7[20]="";
 8002b50:	4641      	mov	r1, r8
 8002b52:	2210      	movs	r2, #16
 8002b54:	a826      	add	r0, sp, #152	; 0x98
		  ADSwrite[0]=0x01;
 8002b56:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8002d88 <main+0x468>
		  char data7[20]="";
 8002b5a:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 3, 100);
 8002b5e:	f8df a288 	ldr.w	sl, [pc, #648]	; 8002de8 <main+0x4c8>
		  ratio=Rs/Ro;
 8002b62:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8002db0 <main+0x490>
		  char data7[20]="";
 8002b66:	f000 faa7 	bl	80030b8 <memset>
		  char data8[20]="";
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	a82b      	add	r0, sp, #172	; 0xac
		  ADSwrite[0]=0x01;
 8002b70:	2601      	movs	r6, #1
		  char data8[20]="";
 8002b72:	f8cd 80a8 	str.w	r8, [sp, #168]	; 0xa8
 8002b76:	f000 fa9f 	bl	80030b8 <memset>
		  char data9[20]="";
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	a830      	add	r0, sp, #192	; 0xc0
 8002b80:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 8002b84:	f000 fa98 	bl	80030b8 <memset>
		  ADSwrite[0]=0x01;
 8002b88:	f889 6000 	strb.w	r6, [r9]
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 3, 100);
 8002b8c:	f89a 1000 	ldrb.w	r1, [sl]
 8002b90:	9500      	str	r5, [sp, #0]
 8002b92:	464a      	mov	r2, r9
 8002b94:	2303      	movs	r3, #3
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7fe fc62 	bl	8001460 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 1, 100);
 8002b9c:	f89a 1000 	ldrb.w	r1, [sl]
		  ADSwrite[0]=0x00;
 8002ba0:	f889 8000 	strb.w	r8, [r9]
		  HAL_I2C_Master_Transmit(&hi2c1, ADS1015_ADDRESS_write, ADSwrite, 1, 100);
 8002ba4:	4633      	mov	r3, r6
 8002ba6:	464a      	mov	r2, r9
 8002ba8:	9500      	str	r5, [sp, #0]
 8002baa:	4638      	mov	r0, r7
 8002bac:	f7fe fc58 	bl	8001460 <HAL_I2C_Master_Transmit>
		  HAL_Delay(2000);
 8002bb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bb4:	f7fe f9b2 	bl	8000f1c <HAL_Delay>
		  HAL_I2C_Master_Receive(&hi2c1, ADS1015_ADDRESS_read, received_data2, 2, 100);
 8002bb8:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8002df0 <main+0x4d0>
 8002bbc:	4b73      	ldr	r3, [pc, #460]	; (8002d8c <main+0x46c>)
		  VRs=5-reading2*voltageConv;
 8002bbe:	f8df a234 	ldr.w	sl, [pc, #564]	; 8002df4 <main+0x4d4>
		  HAL_I2C_Master_Receive(&hi2c1, ADS1015_ADDRESS_read, received_data2, 2, 100);
 8002bc2:	7819      	ldrb	r1, [r3, #0]
 8002bc4:	9500      	str	r5, [sp, #0]
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	2302      	movs	r3, #2
 8002bca:	4638      	mov	r0, r7
 8002bcc:	f7fe fcdc 	bl	8001588 <HAL_I2C_Master_Receive>
		  reading2 = ((received_data2[0] << 8) | received_data2[1]) >> 4;
 8002bd0:	f898 2000 	ldrb.w	r2, [r8]
 8002bd4:	f898 3001 	ldrb.w	r3, [r8, #1]
		  IRs=VRs/56;
 8002bd8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8002df8 <main+0x4d8>
		  Rs=(reading2*voltageConv)/IRs;
 8002bdc:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8002dfc <main+0x4dc>
		  reading2 = ((received_data2[0] << 8) | received_data2[1]) >> 4;
 8002be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002be4:	091b      	lsrs	r3, r3, #4
		  VRs=5-reading2*voltageConv;
 8002be6:	ee07 3a90 	vmov	s15, r3
 8002bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  reading2 = ((received_data2[0] << 8) | received_data2[1]) >> 4;
 8002bee:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <main+0x494>)
		  VRs=5-reading2*voltageConv;
 8002bf0:	ee67 7a89 	vmul.f32	s15, s15, s18
		  reading2 = ((received_data2[0] << 8) | received_data2[1]) >> 4;
 8002bf4:	8013      	strh	r3, [r2, #0]
		  VRs=5-reading2*voltageConv;
 8002bf6:	ee38 7ae7 	vsub.f32	s14, s17, s15
		  ratio=Rs/Ro;
 8002bfa:	4b6f      	ldr	r3, [pc, #444]	; (8002db8 <main+0x498>)
		  VRs=5-reading2*voltageConv;
 8002bfc:	ed8a 7a00 	vstr	s14, [sl]
		  IRs=VRs/56;
 8002c00:	eec7 6a08 	vdiv.f32	s13, s14, s16
		  Rs=(reading2*voltageConv)/IRs;
 8002c04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		  IRs=VRs/56;
 8002c08:	edc9 6a00 	vstr	s13, [r9]
		  ratio=Rs/Ro;
 8002c0c:	eddb 6a00 	vldr	s13, [fp]
		  Rs=(reading2*voltageConv)/IRs;
 8002c10:	ed88 7a00 	vstr	s14, [r8]
		  ratio=Rs/Ro;
 8002c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c18:	edc3 7a00 	vstr	s15, [r3]
		  CO=4.4638*pow(ratio, -1.177);
 8002c1c:	ee17 0a90 	vmov	r0, s15
 8002c20:	f7fd fc92 	bl	8000548 <__aeabi_f2d>
 8002c24:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8002d78 <main+0x458>
 8002c28:	ec41 0b10 	vmov	d0, r0, r1
 8002c2c:	f002 faac 	bl	8005188 <pow>
 8002c30:	a353      	add	r3, pc, #332	; (adr r3, 8002d80 <main+0x460>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	ec51 0b10 	vmov	r0, r1, d0
 8002c3a:	f7fd fcd9 	bl	80005f0 <__aeabi_dmul>
 8002c3e:	f7fd ff87 	bl	8000b50 <__aeabi_d2iz>
 8002c42:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <main+0x49c>)
		  sprintf(data,"CO=%d", CO);
 8002c44:	495e      	ldr	r1, [pc, #376]	; (8002dc0 <main+0x4a0>)
		  CO=4.4638*pow(ratio, -1.177);
 8002c46:	2800      	cmp	r0, #0
 8002c48:	bfcc      	ite	gt
 8002c4a:	4602      	movgt	r2, r0
 8002c4c:	4632      	movle	r2, r6
		  sprintf(data,"CO=%d", CO);
 8002c4e:	a805      	add	r0, sp, #20
		  CO=4.4638*pow(ratio, -1.177);
 8002c50:	601a      	str	r2, [r3, #0]
		  sprintf(data,"CO=%d", CO);
 8002c52:	f000 fea5 	bl	80039a0 <siprintf>
		  sprintf(data1,"Vo=%.1f\n", VRo);
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <main+0x480>)
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	f7fd fc75 	bl	8000548 <__aeabi_f2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	a807      	add	r0, sp, #28
 8002c64:	4957      	ldr	r1, [pc, #348]	; (8002dc4 <main+0x4a4>)
 8002c66:	f000 fe9b 	bl	80039a0 <siprintf>
		  sprintf(data2,"Io=%.1f\n", IRo);
 8002c6a:	4b50      	ldr	r3, [pc, #320]	; (8002dac <main+0x48c>)
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	f7fd fc6b 	bl	8000548 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	a80c      	add	r0, sp, #48	; 0x30
 8002c78:	4953      	ldr	r1, [pc, #332]	; (8002dc8 <main+0x4a8>)
 8002c7a:	f000 fe91 	bl	80039a0 <siprintf>
		  sprintf(data3,"Ro=%.1f\n", Ro);
 8002c7e:	f8db 0000 	ldr.w	r0, [fp]
 8002c82:	f7fd fc61 	bl	8000548 <__aeabi_f2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	a811      	add	r0, sp, #68	; 0x44
 8002c8c:	494f      	ldr	r1, [pc, #316]	; (8002dcc <main+0x4ac>)
 8002c8e:	f000 fe87 	bl	80039a0 <siprintf>
		  sprintf(data4,"Vs=%.1f\n", VRs);
 8002c92:	f8da 0000 	ldr.w	r0, [sl]
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	a816      	add	r0, sp, #88	; 0x58
 8002ca0:	494b      	ldr	r1, [pc, #300]	; (8002dd0 <main+0x4b0>)
 8002ca2:	f000 fe7d 	bl	80039a0 <siprintf>
		  sprintf(data5,"Is=%.1f\n", IRs);
 8002ca6:	f8d9 0000 	ldr.w	r0, [r9]
 8002caa:	f7fd fc4d 	bl	8000548 <__aeabi_f2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	a81b      	add	r0, sp, #108	; 0x6c
 8002cb4:	4947      	ldr	r1, [pc, #284]	; (8002dd4 <main+0x4b4>)
 8002cb6:	f000 fe73 	bl	80039a0 <siprintf>
		  sprintf(data6,"Rs=%.1f\n", Rs);
 8002cba:	f8d8 0000 	ldr.w	r0, [r8]
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	a820      	add	r0, sp, #128	; 0x80
 8002cc8:	4943      	ldr	r1, [pc, #268]	; (8002dd8 <main+0x4b8>)
 8002cca:	f000 fe69 	bl	80039a0 <siprintf>
		  sprintf(data7,"ra=%.1f\n", ratio);
 8002cce:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <main+0x498>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f7fd fc39 	bl	8000548 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	a825      	add	r0, sp, #148	; 0x94
 8002cdc:	493f      	ldr	r1, [pc, #252]	; (8002ddc <main+0x4bc>)
 8002cde:	f000 fe5f 	bl	80039a0 <siprintf>
		  sprintf(data8,"r1=%d\n", reading1);
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <main+0x474>)
 8002ce4:	493e      	ldr	r1, [pc, #248]	; (8002de0 <main+0x4c0>)
 8002ce6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cea:	a82a      	add	r0, sp, #168	; 0xa8
 8002cec:	f000 fe58 	bl	80039a0 <siprintf>
		  sprintf(data9,"r2=%d\n", reading2);
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <main+0x494>)
 8002cf2:	493c      	ldr	r1, [pc, #240]	; (8002de4 <main+0x4c4>)
 8002cf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cf8:	a82f      	add	r0, sp, #188	; 0xbc
 8002cfa:	f000 fe51 	bl	80039a0 <siprintf>
		  HAL_UART_Transmit(&huart2, data8, sizeof(data8), 100);
 8002cfe:	a92a      	add	r1, sp, #168	; 0xa8
 8002d00:	2364      	movs	r3, #100	; 0x64
 8002d02:	2214      	movs	r2, #20
 8002d04:	4620      	mov	r0, r4
 8002d06:	f7ff fc8a 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data1, sizeof(data1), 100);
 8002d0a:	a907      	add	r1, sp, #28
 8002d0c:	2364      	movs	r3, #100	; 0x64
 8002d0e:	2214      	movs	r2, #20
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff fc84 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data2, sizeof(data2), 100);
 8002d16:	a90c      	add	r1, sp, #48	; 0x30
 8002d18:	2364      	movs	r3, #100	; 0x64
 8002d1a:	2214      	movs	r2, #20
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff fc7e 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data3, sizeof(data3), 100);
 8002d22:	a911      	add	r1, sp, #68	; 0x44
 8002d24:	2364      	movs	r3, #100	; 0x64
 8002d26:	2214      	movs	r2, #20
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff fc78 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data9, sizeof(data9), 100);
 8002d2e:	a92f      	add	r1, sp, #188	; 0xbc
 8002d30:	2364      	movs	r3, #100	; 0x64
 8002d32:	2214      	movs	r2, #20
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7ff fc72 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data4, sizeof(data4), 100);
 8002d3a:	a916      	add	r1, sp, #88	; 0x58
 8002d3c:	2364      	movs	r3, #100	; 0x64
 8002d3e:	2214      	movs	r2, #20
 8002d40:	4620      	mov	r0, r4
 8002d42:	f7ff fc6c 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data5, sizeof(data5), 100);
 8002d46:	a91b      	add	r1, sp, #108	; 0x6c
 8002d48:	2364      	movs	r3, #100	; 0x64
 8002d4a:	2214      	movs	r2, #20
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7ff fc66 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data6, sizeof(data6), 100);
 8002d52:	a920      	add	r1, sp, #128	; 0x80
 8002d54:	2364      	movs	r3, #100	; 0x64
 8002d56:	2214      	movs	r2, #20
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fc60 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data7, sizeof(data7), 100);
 8002d5e:	a925      	add	r1, sp, #148	; 0x94
 8002d60:	2364      	movs	r3, #100	; 0x64
 8002d62:	2214      	movs	r2, #20
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff fc5a 	bl	800261e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 8002d6a:	2364      	movs	r3, #100	; 0x64
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	a905      	add	r1, sp, #20
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff fc54 	bl	800261e <HAL_UART_Transmit>
 8002d76:	e043      	b.n	8002e00 <main+0x4e0>
 8002d78:	f3b645a2 	.word	0xf3b645a2
 8002d7c:	bff2d4fd 	.word	0xbff2d4fd
 8002d80:	631f8a09 	.word	0x631f8a09
 8002d84:	4011daee 	.word	0x4011daee
 8002d88:	200002f0 	.word	0x200002f0
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	200002e8 	.word	0x200002e8
 8002d94:	200001fe 	.word	0x200001fe
 8002d98:	3a83126f 	.word	0x3a83126f
 8002d9c:	42600000 	.word	0x42600000
 8002da0:	200002fc 	.word	0x200002fc
 8002da4:	20000214 	.word	0x20000214
 8002da8:	20000300 	.word	0x20000300
 8002dac:	20000378 	.word	0x20000378
 8002db0:	2000038c 	.word	0x2000038c
 8002db4:	20000266 	.word	0x20000266
 8002db8:	200002f8 	.word	0x200002f8
 8002dbc:	20000380 	.word	0x20000380
 8002dc0:	080062a1 	.word	0x080062a1
 8002dc4:	080062a7 	.word	0x080062a7
 8002dc8:	080062b0 	.word	0x080062b0
 8002dcc:	080062b9 	.word	0x080062b9
 8002dd0:	080062c2 	.word	0x080062c2
 8002dd4:	080062cb 	.word	0x080062cb
 8002dd8:	080062d4 	.word	0x080062d4
 8002ddc:	080062dd 	.word	0x080062dd
 8002de0:	080062e6 	.word	0x080062e6
 8002de4:	080062ed 	.word	0x080062ed
 8002de8:	20000001 	.word	0x20000001
 8002dec:	20000268 	.word	0x20000268
 8002df0:	20000384 	.word	0x20000384
 8002df4:	2000037c 	.word	0x2000037c
 8002df8:	200002ec 	.word	0x200002ec
 8002dfc:	20000210 	.word	0x20000210
		  send_to_xbee(data1);
 8002e00:	a807      	add	r0, sp, #28
 8002e02:	f7ff fcc7 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data2);
 8002e06:	a80c      	add	r0, sp, #48	; 0x30
 8002e08:	f7ff fcc4 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data3);
 8002e0c:	a811      	add	r0, sp, #68	; 0x44
 8002e0e:	f7ff fcc1 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data4);
 8002e12:	a816      	add	r0, sp, #88	; 0x58
 8002e14:	f7ff fcbe 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data5);
 8002e18:	a81b      	add	r0, sp, #108	; 0x6c
 8002e1a:	f7ff fcbb 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data6);
 8002e1e:	a820      	add	r0, sp, #128	; 0x80
 8002e20:	f7ff fcb8 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data7);
 8002e24:	a825      	add	r0, sp, #148	; 0x94
 8002e26:	f7ff fcb5 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data8);
 8002e2a:	a82a      	add	r0, sp, #168	; 0xa8
 8002e2c:	f7ff fcb2 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data9);
 8002e30:	a82f      	add	r0, sp, #188	; 0xbc
 8002e32:	f7ff fcaf 	bl	8002794 <send_to_xbee>
		  send_to_xbee(data);
 8002e36:	a805      	add	r0, sp, #20
 8002e38:	f7ff fcac 	bl	8002794 <send_to_xbee>
  {
 8002e3c:	e658      	b.n	8002af0 <main+0x1d0>
 8002e3e:	bf00      	nop

08002e40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_MspInit+0x88>)
{
 8002e42:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60
 8002e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e4e:	f002 0201 	and.w	r2, r2, #1
 8002e52:	9200      	str	r2, [sp, #0]
 8002e54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e66:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e68:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6a:	f7fe f865 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	4611      	mov	r1, r2
 8002e72:	f06f 000b 	mvn.w	r0, #11
 8002e76:	f7fe f871 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	f06f 000a 	mvn.w	r0, #10
 8002e82:	f7fe f86b 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	4611      	mov	r1, r2
 8002e8a:	f06f 0009 	mvn.w	r0, #9
 8002e8e:	f7fe f865 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	4611      	mov	r1, r2
 8002e96:	f06f 0004 	mvn.w	r0, #4
 8002e9a:	f7fe f85f 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	f06f 0003 	mvn.w	r0, #3
 8002ea6:	f7fe f859 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4611      	mov	r1, r2
 8002eae:	f06f 0001 	mvn.w	r0, #1
 8002eb2:	f7fe f853 	bl	8000f5c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	f7fe f84d 	bl	8000f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec2:	b003      	add	sp, #12
 8002ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002ece:	6802      	ldr	r2, [r0, #0]
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_I2C_MspInit+0x44>)
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d118      	bne.n	8002f08 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed6:	23c0      	movs	r3, #192	; 0xc0
 8002ed8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eda:	2312      	movs	r3, #18
 8002edc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ee6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	eb0d 0103 	add.w	r1, sp, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f7fe f890 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_I2C_MspInit+0x4c>)
 8002ef6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ef8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002efc:	659a      	str	r2, [r3, #88]	; 0x58
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f08:	b007      	add	sp, #28
 8002f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f0e:	bf00      	nop
 8002f10:	40005400 	.word	0x40005400
 8002f14:	48000400 	.word	0x48000400
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002f1e:	6803      	ldr	r3, [r0, #0]
 8002f20:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <HAL_UART_MspInit+0x8c>)
 8002f22:	4293      	cmp	r3, r2
{
 8002f24:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8002f26:	d11b      	bne.n	8002f60 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <HAL_UART_MspInit+0x90>)
 8002f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f52:	a903      	add	r1, sp, #12
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f58:	f7fe f85c 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f5c:	b008      	add	sp, #32
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002f60:	4a13      	ldr	r2, [pc, #76]	; (8002fb0 <HAL_UART_MspInit+0x94>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d1fa      	bne.n	8002f5c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_UART_MspInit+0x90>)
 8002f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f7a:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002f7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f82:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f84:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f86:	a903      	add	r1, sp, #12
 8002f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f8c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f7fe f83e 	bl	8001014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002fa4:	9407      	str	r4, [sp, #28]
 8002fa6:	e7d4      	b.n	8002f52 <HAL_UART_MspInit+0x36>
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40004400 	.word	0x40004400

08002fb4 <NMI_Handler>:
 8002fb4:	4770      	bx	lr

08002fb6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002fb6:	e7fe      	b.n	8002fb6 <HardFault_Handler>

08002fb8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002fb8:	e7fe      	b.n	8002fb8 <MemManage_Handler>

08002fba <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002fba:	e7fe      	b.n	8002fba <BusFault_Handler>

08002fbc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002fbc:	e7fe      	b.n	8002fbc <UsageFault_Handler>

08002fbe <SVC_Handler>:
 8002fbe:	4770      	bx	lr

08002fc0 <DebugMon_Handler>:
 8002fc0:	4770      	bx	lr

08002fc2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002fc2:	4770      	bx	lr

08002fc4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002fc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc6:	f7fd ff9b 	bl	8000f00 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002fce:	f7fe b81c 	b.w	800100a <HAL_SYSTICK_IRQHandler>
	...

08002fd4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	490f      	ldr	r1, [pc, #60]	; (8003014 <SystemInit+0x40>)
 8002fd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002fda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <SystemInit+0x44>)
 8002fe4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002fe6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002fee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002ff6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003000:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003008:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800300a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800300c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003010:	608b      	str	r3, [r1, #8]
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	40021000 	.word	0x40021000

0800301c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003054 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003020:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003022:	e003      	b.n	800302c <LoopCopyDataInit>

08003024 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003026:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003028:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800302a:	3104      	adds	r1, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800302c:	480b      	ldr	r0, [pc, #44]	; (800305c <LoopForever+0xa>)
	ldr	r3, =_edata
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003030:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003032:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003034:	d3f6      	bcc.n	8003024 <CopyDataInit>
	ldr	r2, =_sbss
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003038:	e002      	b.n	8003040 <LoopFillZerobss>

0800303a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800303a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800303c:	f842 3b04 	str.w	r3, [r2], #4

08003040 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <LoopForever+0x16>)
	cmp	r2, r3
 8003042:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003044:	d3f9      	bcc.n	800303a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003046:	f7ff ffc5 	bl	8002fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304a:	f000 f811 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800304e:	f7ff fc67 	bl	8002920 <main>

08003052 <LoopForever>:

LoopForever:
    b LoopForever
 8003052:	e7fe      	b.n	8003052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003054:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003058:	080065f0 	.word	0x080065f0
	ldr	r0, =_sdata
 800305c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003060:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8003064:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8003068:	20000394 	.word	0x20000394

0800306c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800306c:	e7fe      	b.n	800306c <ADC1_IRQHandler>
	...

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4e0d      	ldr	r6, [pc, #52]	; (80030a8 <__libc_init_array+0x38>)
 8003074:	4c0d      	ldr	r4, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003076:	1ba4      	subs	r4, r4, r6
 8003078:	10a4      	asrs	r4, r4, #2
 800307a:	2500      	movs	r5, #0
 800307c:	42a5      	cmp	r5, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	4e0b      	ldr	r6, [pc, #44]	; (80030b0 <__libc_init_array+0x40>)
 8003082:	4c0c      	ldr	r4, [pc, #48]	; (80030b4 <__libc_init_array+0x44>)
 8003084:	f003 f8f8 	bl	8006278 <_init>
 8003088:	1ba4      	subs	r4, r4, r6
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	2500      	movs	r5, #0
 800308e:	42a5      	cmp	r5, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003098:	4798      	blx	r3
 800309a:	3501      	adds	r5, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a2:	4798      	blx	r3
 80030a4:	3501      	adds	r5, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	080065e8 	.word	0x080065e8
 80030ac:	080065e8 	.word	0x080065e8
 80030b0:	080065e8 	.word	0x080065e8
 80030b4:	080065ec 	.word	0x080065ec

080030b8 <memset>:
 80030b8:	4402      	add	r2, r0
 80030ba:	4603      	mov	r3, r0
 80030bc:	4293      	cmp	r3, r2
 80030be:	d100      	bne.n	80030c2 <memset+0xa>
 80030c0:	4770      	bx	lr
 80030c2:	f803 1b01 	strb.w	r1, [r3], #1
 80030c6:	e7f9      	b.n	80030bc <memset+0x4>

080030c8 <__cvt>:
 80030c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	ec55 4b10 	vmov	r4, r5, d0
 80030d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80030d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	460e      	mov	r6, r1
 80030da:	4691      	mov	r9, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	bfb8      	it	lt
 80030e0:	4622      	movlt	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	f027 0720 	bic.w	r7, r7, #32
 80030e8:	bfbb      	ittet	lt
 80030ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030ee:	461d      	movlt	r5, r3
 80030f0:	2300      	movge	r3, #0
 80030f2:	232d      	movlt	r3, #45	; 0x2d
 80030f4:	bfb8      	it	lt
 80030f6:	4614      	movlt	r4, r2
 80030f8:	2f46      	cmp	r7, #70	; 0x46
 80030fa:	700b      	strb	r3, [r1, #0]
 80030fc:	d004      	beq.n	8003108 <__cvt+0x40>
 80030fe:	2f45      	cmp	r7, #69	; 0x45
 8003100:	d100      	bne.n	8003104 <__cvt+0x3c>
 8003102:	3601      	adds	r6, #1
 8003104:	2102      	movs	r1, #2
 8003106:	e000      	b.n	800310a <__cvt+0x42>
 8003108:	2103      	movs	r1, #3
 800310a:	ab03      	add	r3, sp, #12
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	ab02      	add	r3, sp, #8
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4632      	mov	r2, r6
 8003114:	4653      	mov	r3, sl
 8003116:	ec45 4b10 	vmov	d0, r4, r5
 800311a:	f000 fcf1 	bl	8003b00 <_dtoa_r>
 800311e:	2f47      	cmp	r7, #71	; 0x47
 8003120:	4680      	mov	r8, r0
 8003122:	d102      	bne.n	800312a <__cvt+0x62>
 8003124:	f019 0f01 	tst.w	r9, #1
 8003128:	d026      	beq.n	8003178 <__cvt+0xb0>
 800312a:	2f46      	cmp	r7, #70	; 0x46
 800312c:	eb08 0906 	add.w	r9, r8, r6
 8003130:	d111      	bne.n	8003156 <__cvt+0x8e>
 8003132:	f898 3000 	ldrb.w	r3, [r8]
 8003136:	2b30      	cmp	r3, #48	; 0x30
 8003138:	d10a      	bne.n	8003150 <__cvt+0x88>
 800313a:	2200      	movs	r2, #0
 800313c:	2300      	movs	r3, #0
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd fcbd 	bl	8000ac0 <__aeabi_dcmpeq>
 8003146:	b918      	cbnz	r0, 8003150 <__cvt+0x88>
 8003148:	f1c6 0601 	rsb	r6, r6, #1
 800314c:	f8ca 6000 	str.w	r6, [sl]
 8003150:	f8da 3000 	ldr.w	r3, [sl]
 8003154:	4499      	add	r9, r3
 8003156:	2200      	movs	r2, #0
 8003158:	2300      	movs	r3, #0
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd fcaf 	bl	8000ac0 <__aeabi_dcmpeq>
 8003162:	b938      	cbnz	r0, 8003174 <__cvt+0xac>
 8003164:	2230      	movs	r2, #48	; 0x30
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	4599      	cmp	r9, r3
 800316a:	d905      	bls.n	8003178 <__cvt+0xb0>
 800316c:	1c59      	adds	r1, r3, #1
 800316e:	9103      	str	r1, [sp, #12]
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e7f8      	b.n	8003166 <__cvt+0x9e>
 8003174:	f8cd 900c 	str.w	r9, [sp, #12]
 8003178:	9b03      	ldr	r3, [sp, #12]
 800317a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800317c:	eba3 0308 	sub.w	r3, r3, r8
 8003180:	4640      	mov	r0, r8
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	b004      	add	sp, #16
 8003186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800318a <__exponent>:
 800318a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800318c:	4603      	mov	r3, r0
 800318e:	2900      	cmp	r1, #0
 8003190:	bfb8      	it	lt
 8003192:	4249      	neglt	r1, r1
 8003194:	f803 2b02 	strb.w	r2, [r3], #2
 8003198:	bfb4      	ite	lt
 800319a:	222d      	movlt	r2, #45	; 0x2d
 800319c:	222b      	movge	r2, #43	; 0x2b
 800319e:	2909      	cmp	r1, #9
 80031a0:	7042      	strb	r2, [r0, #1]
 80031a2:	dd20      	ble.n	80031e6 <__exponent+0x5c>
 80031a4:	f10d 0207 	add.w	r2, sp, #7
 80031a8:	4617      	mov	r7, r2
 80031aa:	260a      	movs	r6, #10
 80031ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80031b0:	fb06 1115 	mls	r1, r6, r5, r1
 80031b4:	3130      	adds	r1, #48	; 0x30
 80031b6:	2d09      	cmp	r5, #9
 80031b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80031bc:	f102 34ff 	add.w	r4, r2, #4294967295
 80031c0:	4629      	mov	r1, r5
 80031c2:	dc09      	bgt.n	80031d8 <__exponent+0x4e>
 80031c4:	3130      	adds	r1, #48	; 0x30
 80031c6:	3a02      	subs	r2, #2
 80031c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80031cc:	42ba      	cmp	r2, r7
 80031ce:	461c      	mov	r4, r3
 80031d0:	d304      	bcc.n	80031dc <__exponent+0x52>
 80031d2:	1a20      	subs	r0, r4, r0
 80031d4:	b003      	add	sp, #12
 80031d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d8:	4622      	mov	r2, r4
 80031da:	e7e7      	b.n	80031ac <__exponent+0x22>
 80031dc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80031e0:	f803 1b01 	strb.w	r1, [r3], #1
 80031e4:	e7f2      	b.n	80031cc <__exponent+0x42>
 80031e6:	2230      	movs	r2, #48	; 0x30
 80031e8:	461c      	mov	r4, r3
 80031ea:	4411      	add	r1, r2
 80031ec:	f804 2b02 	strb.w	r2, [r4], #2
 80031f0:	7059      	strb	r1, [r3, #1]
 80031f2:	e7ee      	b.n	80031d2 <__exponent+0x48>

080031f4 <_printf_float>:
 80031f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f8:	b08d      	sub	sp, #52	; 0x34
 80031fa:	460c      	mov	r4, r1
 80031fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003200:	4616      	mov	r6, r2
 8003202:	461f      	mov	r7, r3
 8003204:	4605      	mov	r5, r0
 8003206:	f001 fa49 	bl	800469c <_localeconv_r>
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fc ffde 	bl	80001d0 <strlen>
 8003214:	2300      	movs	r3, #0
 8003216:	930a      	str	r3, [sp, #40]	; 0x28
 8003218:	f8d8 3000 	ldr.w	r3, [r8]
 800321c:	9005      	str	r0, [sp, #20]
 800321e:	3307      	adds	r3, #7
 8003220:	f023 0307 	bic.w	r3, r3, #7
 8003224:	f103 0208 	add.w	r2, r3, #8
 8003228:	f894 a018 	ldrb.w	sl, [r4, #24]
 800322c:	f8d4 b000 	ldr.w	fp, [r4]
 8003230:	f8c8 2000 	str.w	r2, [r8]
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800323c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003240:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003244:	9307      	str	r3, [sp, #28]
 8003246:	f8cd 8018 	str.w	r8, [sp, #24]
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	4ba5      	ldr	r3, [pc, #660]	; (80034e4 <_printf_float+0x2f0>)
 8003250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003254:	f7fd fc66 	bl	8000b24 <__aeabi_dcmpun>
 8003258:	2800      	cmp	r0, #0
 800325a:	f040 81fb 	bne.w	8003654 <_printf_float+0x460>
 800325e:	f04f 32ff 	mov.w	r2, #4294967295
 8003262:	4ba0      	ldr	r3, [pc, #640]	; (80034e4 <_printf_float+0x2f0>)
 8003264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003268:	f7fd fc3e 	bl	8000ae8 <__aeabi_dcmple>
 800326c:	2800      	cmp	r0, #0
 800326e:	f040 81f1 	bne.w	8003654 <_printf_float+0x460>
 8003272:	2200      	movs	r2, #0
 8003274:	2300      	movs	r3, #0
 8003276:	4640      	mov	r0, r8
 8003278:	4649      	mov	r1, r9
 800327a:	f7fd fc2b 	bl	8000ad4 <__aeabi_dcmplt>
 800327e:	b110      	cbz	r0, 8003286 <_printf_float+0x92>
 8003280:	232d      	movs	r3, #45	; 0x2d
 8003282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003286:	4b98      	ldr	r3, [pc, #608]	; (80034e8 <_printf_float+0x2f4>)
 8003288:	4a98      	ldr	r2, [pc, #608]	; (80034ec <_printf_float+0x2f8>)
 800328a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800328e:	bf8c      	ite	hi
 8003290:	4690      	movhi	r8, r2
 8003292:	4698      	movls	r8, r3
 8003294:	2303      	movs	r3, #3
 8003296:	f02b 0204 	bic.w	r2, fp, #4
 800329a:	6123      	str	r3, [r4, #16]
 800329c:	6022      	str	r2, [r4, #0]
 800329e:	f04f 0900 	mov.w	r9, #0
 80032a2:	9700      	str	r7, [sp, #0]
 80032a4:	4633      	mov	r3, r6
 80032a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80032a8:	4621      	mov	r1, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 f9e2 	bl	8003674 <_printf_common>
 80032b0:	3001      	adds	r0, #1
 80032b2:	f040 8093 	bne.w	80033dc <_printf_float+0x1e8>
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	b00d      	add	sp, #52	; 0x34
 80032bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c0:	6861      	ldr	r1, [r4, #4]
 80032c2:	1c4b      	adds	r3, r1, #1
 80032c4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80032c8:	d13f      	bne.n	800334a <_printf_float+0x156>
 80032ca:	2306      	movs	r3, #6
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	9303      	str	r3, [sp, #12]
 80032d2:	ab0a      	add	r3, sp, #40	; 0x28
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	ab09      	add	r3, sp, #36	; 0x24
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	ec49 8b10 	vmov	d0, r8, r9
 80032de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80032e2:	6022      	str	r2, [r4, #0]
 80032e4:	f8cd a004 	str.w	sl, [sp, #4]
 80032e8:	6861      	ldr	r1, [r4, #4]
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7ff feec 	bl	80030c8 <__cvt>
 80032f0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80032f4:	2b47      	cmp	r3, #71	; 0x47
 80032f6:	4680      	mov	r8, r0
 80032f8:	d109      	bne.n	800330e <_printf_float+0x11a>
 80032fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032fc:	1cd8      	adds	r0, r3, #3
 80032fe:	db02      	blt.n	8003306 <_printf_float+0x112>
 8003300:	6862      	ldr	r2, [r4, #4]
 8003302:	4293      	cmp	r3, r2
 8003304:	dd57      	ble.n	80033b6 <_printf_float+0x1c2>
 8003306:	f1aa 0a02 	sub.w	sl, sl, #2
 800330a:	fa5f fa8a 	uxtb.w	sl, sl
 800330e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003314:	d834      	bhi.n	8003380 <_printf_float+0x18c>
 8003316:	3901      	subs	r1, #1
 8003318:	4652      	mov	r2, sl
 800331a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800331e:	9109      	str	r1, [sp, #36]	; 0x24
 8003320:	f7ff ff33 	bl	800318a <__exponent>
 8003324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003326:	1883      	adds	r3, r0, r2
 8003328:	2a01      	cmp	r2, #1
 800332a:	4681      	mov	r9, r0
 800332c:	6123      	str	r3, [r4, #16]
 800332e:	dc02      	bgt.n	8003336 <_printf_float+0x142>
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	07d1      	lsls	r1, r2, #31
 8003334:	d501      	bpl.n	800333a <_printf_float+0x146>
 8003336:	3301      	adds	r3, #1
 8003338:	6123      	str	r3, [r4, #16]
 800333a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0af      	beq.n	80032a2 <_printf_float+0xae>
 8003342:	232d      	movs	r3, #45	; 0x2d
 8003344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003348:	e7ab      	b.n	80032a2 <_printf_float+0xae>
 800334a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800334e:	d002      	beq.n	8003356 <_printf_float+0x162>
 8003350:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003354:	d1bb      	bne.n	80032ce <_printf_float+0xda>
 8003356:	b189      	cbz	r1, 800337c <_printf_float+0x188>
 8003358:	2300      	movs	r3, #0
 800335a:	9303      	str	r3, [sp, #12]
 800335c:	ab0a      	add	r3, sp, #40	; 0x28
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	ab09      	add	r3, sp, #36	; 0x24
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	ec49 8b10 	vmov	d0, r8, r9
 8003368:	6022      	str	r2, [r4, #0]
 800336a:	f8cd a004 	str.w	sl, [sp, #4]
 800336e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff fea8 	bl	80030c8 <__cvt>
 8003378:	4680      	mov	r8, r0
 800337a:	e7be      	b.n	80032fa <_printf_float+0x106>
 800337c:	2301      	movs	r3, #1
 800337e:	e7a5      	b.n	80032cc <_printf_float+0xd8>
 8003380:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003384:	d119      	bne.n	80033ba <_printf_float+0x1c6>
 8003386:	2900      	cmp	r1, #0
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	dd0c      	ble.n	80033a6 <_printf_float+0x1b2>
 800338c:	6121      	str	r1, [r4, #16]
 800338e:	b913      	cbnz	r3, 8003396 <_printf_float+0x1a2>
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	07d2      	lsls	r2, r2, #31
 8003394:	d502      	bpl.n	800339c <_printf_float+0x1a8>
 8003396:	3301      	adds	r3, #1
 8003398:	440b      	add	r3, r1
 800339a:	6123      	str	r3, [r4, #16]
 800339c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339e:	65a3      	str	r3, [r4, #88]	; 0x58
 80033a0:	f04f 0900 	mov.w	r9, #0
 80033a4:	e7c9      	b.n	800333a <_printf_float+0x146>
 80033a6:	b913      	cbnz	r3, 80033ae <_printf_float+0x1ba>
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	07d0      	lsls	r0, r2, #31
 80033ac:	d501      	bpl.n	80033b2 <_printf_float+0x1be>
 80033ae:	3302      	adds	r3, #2
 80033b0:	e7f3      	b.n	800339a <_printf_float+0x1a6>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e7f1      	b.n	800339a <_printf_float+0x1a6>
 80033b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80033ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033be:	4293      	cmp	r3, r2
 80033c0:	db05      	blt.n	80033ce <_printf_float+0x1da>
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	07d1      	lsls	r1, r2, #31
 80033c8:	d5e8      	bpl.n	800339c <_printf_float+0x1a8>
 80033ca:	3301      	adds	r3, #1
 80033cc:	e7e5      	b.n	800339a <_printf_float+0x1a6>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bfd4      	ite	le
 80033d2:	f1c3 0302 	rsble	r3, r3, #2
 80033d6:	2301      	movgt	r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	e7de      	b.n	800339a <_printf_float+0x1a6>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	055a      	lsls	r2, r3, #21
 80033e0:	d407      	bmi.n	80033f2 <_printf_float+0x1fe>
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	4642      	mov	r2, r8
 80033e6:	4631      	mov	r1, r6
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b8      	blx	r7
 80033ec:	3001      	adds	r0, #1
 80033ee:	d12b      	bne.n	8003448 <_printf_float+0x254>
 80033f0:	e761      	b.n	80032b6 <_printf_float+0xc2>
 80033f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80033f6:	f240 80e2 	bls.w	80035be <_printf_float+0x3ca>
 80033fa:	2200      	movs	r2, #0
 80033fc:	2300      	movs	r3, #0
 80033fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003402:	f7fd fb5d 	bl	8000ac0 <__aeabi_dcmpeq>
 8003406:	2800      	cmp	r0, #0
 8003408:	d03c      	beq.n	8003484 <_printf_float+0x290>
 800340a:	2301      	movs	r3, #1
 800340c:	4a38      	ldr	r2, [pc, #224]	; (80034f0 <_printf_float+0x2fc>)
 800340e:	4631      	mov	r1, r6
 8003410:	4628      	mov	r0, r5
 8003412:	47b8      	blx	r7
 8003414:	3001      	adds	r0, #1
 8003416:	f43f af4e 	beq.w	80032b6 <_printf_float+0xc2>
 800341a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800341c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800341e:	429a      	cmp	r2, r3
 8003420:	db02      	blt.n	8003428 <_printf_float+0x234>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	07d8      	lsls	r0, r3, #31
 8003426:	d50f      	bpl.n	8003448 <_printf_float+0x254>
 8003428:	9b05      	ldr	r3, [sp, #20]
 800342a:	9a04      	ldr	r2, [sp, #16]
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f af3f 	beq.w	80032b6 <_printf_float+0xc2>
 8003438:	f04f 0800 	mov.w	r8, #0
 800343c:	f104 091a 	add.w	r9, r4, #26
 8003440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	4598      	cmp	r8, r3
 8003446:	db12      	blt.n	800346e <_printf_float+0x27a>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	079b      	lsls	r3, r3, #30
 800344c:	d509      	bpl.n	8003462 <_printf_float+0x26e>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	f104 0919 	add.w	r9, r4, #25
 8003456:	68e3      	ldr	r3, [r4, #12]
 8003458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	4598      	cmp	r8, r3
 800345e:	f2c0 80ee 	blt.w	800363e <_printf_float+0x44a>
 8003462:	68e0      	ldr	r0, [r4, #12]
 8003464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003466:	4298      	cmp	r0, r3
 8003468:	bfb8      	it	lt
 800346a:	4618      	movlt	r0, r3
 800346c:	e725      	b.n	80032ba <_printf_float+0xc6>
 800346e:	2301      	movs	r3, #1
 8003470:	464a      	mov	r2, r9
 8003472:	4631      	mov	r1, r6
 8003474:	4628      	mov	r0, r5
 8003476:	47b8      	blx	r7
 8003478:	3001      	adds	r0, #1
 800347a:	f43f af1c 	beq.w	80032b6 <_printf_float+0xc2>
 800347e:	f108 0801 	add.w	r8, r8, #1
 8003482:	e7dd      	b.n	8003440 <_printf_float+0x24c>
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	dc34      	bgt.n	80034f4 <_printf_float+0x300>
 800348a:	2301      	movs	r3, #1
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <_printf_float+0x2fc>)
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	47b8      	blx	r7
 8003494:	3001      	adds	r0, #1
 8003496:	f43f af0e 	beq.w	80032b6 <_printf_float+0xc2>
 800349a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349c:	b923      	cbnz	r3, 80034a8 <_printf_float+0x2b4>
 800349e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034a0:	b913      	cbnz	r3, 80034a8 <_printf_float+0x2b4>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	07d9      	lsls	r1, r3, #31
 80034a6:	d5cf      	bpl.n	8003448 <_printf_float+0x254>
 80034a8:	9b05      	ldr	r3, [sp, #20]
 80034aa:	9a04      	ldr	r2, [sp, #16]
 80034ac:	4631      	mov	r1, r6
 80034ae:	4628      	mov	r0, r5
 80034b0:	47b8      	blx	r7
 80034b2:	3001      	adds	r0, #1
 80034b4:	f43f aeff 	beq.w	80032b6 <_printf_float+0xc2>
 80034b8:	f04f 0900 	mov.w	r9, #0
 80034bc:	f104 0a1a 	add.w	sl, r4, #26
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	425b      	negs	r3, r3
 80034c4:	4599      	cmp	r9, r3
 80034c6:	db01      	blt.n	80034cc <_printf_float+0x2d8>
 80034c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ca:	e78b      	b.n	80033e4 <_printf_float+0x1f0>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4652      	mov	r2, sl
 80034d0:	4631      	mov	r1, r6
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	f43f aeed 	beq.w	80032b6 <_printf_float+0xc2>
 80034dc:	f109 0901 	add.w	r9, r9, #1
 80034e0:	e7ee      	b.n	80034c0 <_printf_float+0x2cc>
 80034e2:	bf00      	nop
 80034e4:	7fefffff 	.word	0x7fefffff
 80034e8:	0800633c 	.word	0x0800633c
 80034ec:	08006340 	.word	0x08006340
 80034f0:	0800634c 	.word	0x0800634c
 80034f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034f8:	429a      	cmp	r2, r3
 80034fa:	bfa8      	it	ge
 80034fc:	461a      	movge	r2, r3
 80034fe:	2a00      	cmp	r2, #0
 8003500:	4691      	mov	r9, r2
 8003502:	dc38      	bgt.n	8003576 <_printf_float+0x382>
 8003504:	f104 031a 	add.w	r3, r4, #26
 8003508:	f04f 0b00 	mov.w	fp, #0
 800350c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003510:	9306      	str	r3, [sp, #24]
 8003512:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003516:	ebaa 0309 	sub.w	r3, sl, r9
 800351a:	459b      	cmp	fp, r3
 800351c:	db33      	blt.n	8003586 <_printf_float+0x392>
 800351e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003522:	429a      	cmp	r2, r3
 8003524:	db3a      	blt.n	800359c <_printf_float+0x3a8>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	07da      	lsls	r2, r3, #31
 800352a:	d437      	bmi.n	800359c <_printf_float+0x3a8>
 800352c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800352e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003530:	eba3 020a 	sub.w	r2, r3, sl
 8003534:	eba3 0901 	sub.w	r9, r3, r1
 8003538:	4591      	cmp	r9, r2
 800353a:	bfa8      	it	ge
 800353c:	4691      	movge	r9, r2
 800353e:	f1b9 0f00 	cmp.w	r9, #0
 8003542:	dc33      	bgt.n	80035ac <_printf_float+0x3b8>
 8003544:	f04f 0800 	mov.w	r8, #0
 8003548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800354c:	f104 0a1a 	add.w	sl, r4, #26
 8003550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	eba3 0309 	sub.w	r3, r3, r9
 800355a:	4598      	cmp	r8, r3
 800355c:	f6bf af74 	bge.w	8003448 <_printf_float+0x254>
 8003560:	2301      	movs	r3, #1
 8003562:	4652      	mov	r2, sl
 8003564:	4631      	mov	r1, r6
 8003566:	4628      	mov	r0, r5
 8003568:	47b8      	blx	r7
 800356a:	3001      	adds	r0, #1
 800356c:	f43f aea3 	beq.w	80032b6 <_printf_float+0xc2>
 8003570:	f108 0801 	add.w	r8, r8, #1
 8003574:	e7ec      	b.n	8003550 <_printf_float+0x35c>
 8003576:	4613      	mov	r3, r2
 8003578:	4631      	mov	r1, r6
 800357a:	4642      	mov	r2, r8
 800357c:	4628      	mov	r0, r5
 800357e:	47b8      	blx	r7
 8003580:	3001      	adds	r0, #1
 8003582:	d1bf      	bne.n	8003504 <_printf_float+0x310>
 8003584:	e697      	b.n	80032b6 <_printf_float+0xc2>
 8003586:	2301      	movs	r3, #1
 8003588:	9a06      	ldr	r2, [sp, #24]
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	47b8      	blx	r7
 8003590:	3001      	adds	r0, #1
 8003592:	f43f ae90 	beq.w	80032b6 <_printf_float+0xc2>
 8003596:	f10b 0b01 	add.w	fp, fp, #1
 800359a:	e7ba      	b.n	8003512 <_printf_float+0x31e>
 800359c:	9b05      	ldr	r3, [sp, #20]
 800359e:	9a04      	ldr	r2, [sp, #16]
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	d1c0      	bne.n	800352c <_printf_float+0x338>
 80035aa:	e684      	b.n	80032b6 <_printf_float+0xc2>
 80035ac:	464b      	mov	r3, r9
 80035ae:	eb08 020a 	add.w	r2, r8, sl
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	d1c3      	bne.n	8003544 <_printf_float+0x350>
 80035bc:	e67b      	b.n	80032b6 <_printf_float+0xc2>
 80035be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	dc01      	bgt.n	80035c8 <_printf_float+0x3d4>
 80035c4:	07db      	lsls	r3, r3, #31
 80035c6:	d537      	bpl.n	8003638 <_printf_float+0x444>
 80035c8:	2301      	movs	r3, #1
 80035ca:	4642      	mov	r2, r8
 80035cc:	4631      	mov	r1, r6
 80035ce:	4628      	mov	r0, r5
 80035d0:	47b8      	blx	r7
 80035d2:	3001      	adds	r0, #1
 80035d4:	f43f ae6f 	beq.w	80032b6 <_printf_float+0xc2>
 80035d8:	9b05      	ldr	r3, [sp, #20]
 80035da:	9a04      	ldr	r2, [sp, #16]
 80035dc:	4631      	mov	r1, r6
 80035de:	4628      	mov	r0, r5
 80035e0:	47b8      	blx	r7
 80035e2:	3001      	adds	r0, #1
 80035e4:	f43f ae67 	beq.w	80032b6 <_printf_float+0xc2>
 80035e8:	2200      	movs	r2, #0
 80035ea:	2300      	movs	r3, #0
 80035ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035f0:	f7fd fa66 	bl	8000ac0 <__aeabi_dcmpeq>
 80035f4:	b158      	cbz	r0, 800360e <_printf_float+0x41a>
 80035f6:	f04f 0800 	mov.w	r8, #0
 80035fa:	f104 0a1a 	add.w	sl, r4, #26
 80035fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	4598      	cmp	r8, r3
 8003604:	db0d      	blt.n	8003622 <_printf_float+0x42e>
 8003606:	464b      	mov	r3, r9
 8003608:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800360c:	e6eb      	b.n	80033e6 <_printf_float+0x1f2>
 800360e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003610:	f108 0201 	add.w	r2, r8, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	d1f2      	bne.n	8003606 <_printf_float+0x412>
 8003620:	e649      	b.n	80032b6 <_printf_float+0xc2>
 8003622:	2301      	movs	r3, #1
 8003624:	4652      	mov	r2, sl
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	47b8      	blx	r7
 800362c:	3001      	adds	r0, #1
 800362e:	f43f ae42 	beq.w	80032b6 <_printf_float+0xc2>
 8003632:	f108 0801 	add.w	r8, r8, #1
 8003636:	e7e2      	b.n	80035fe <_printf_float+0x40a>
 8003638:	2301      	movs	r3, #1
 800363a:	4642      	mov	r2, r8
 800363c:	e7eb      	b.n	8003616 <_printf_float+0x422>
 800363e:	2301      	movs	r3, #1
 8003640:	464a      	mov	r2, r9
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae34 	beq.w	80032b6 <_printf_float+0xc2>
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	e700      	b.n	8003456 <_printf_float+0x262>
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	4640      	mov	r0, r8
 800365a:	4649      	mov	r1, r9
 800365c:	f7fd fa62 	bl	8000b24 <__aeabi_dcmpun>
 8003660:	2800      	cmp	r0, #0
 8003662:	f43f ae2d 	beq.w	80032c0 <_printf_float+0xcc>
 8003666:	4b01      	ldr	r3, [pc, #4]	; (800366c <_printf_float+0x478>)
 8003668:	4a01      	ldr	r2, [pc, #4]	; (8003670 <_printf_float+0x47c>)
 800366a:	e60e      	b.n	800328a <_printf_float+0x96>
 800366c:	08006344 	.word	0x08006344
 8003670:	08006348 	.word	0x08006348

08003674 <_printf_common>:
 8003674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003678:	4691      	mov	r9, r2
 800367a:	461f      	mov	r7, r3
 800367c:	688a      	ldr	r2, [r1, #8]
 800367e:	690b      	ldr	r3, [r1, #16]
 8003680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003684:	4293      	cmp	r3, r2
 8003686:	bfb8      	it	lt
 8003688:	4613      	movlt	r3, r2
 800368a:	f8c9 3000 	str.w	r3, [r9]
 800368e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003692:	4606      	mov	r6, r0
 8003694:	460c      	mov	r4, r1
 8003696:	b112      	cbz	r2, 800369e <_printf_common+0x2a>
 8003698:	3301      	adds	r3, #1
 800369a:	f8c9 3000 	str.w	r3, [r9]
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0699      	lsls	r1, r3, #26
 80036a2:	bf42      	ittt	mi
 80036a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036a8:	3302      	addmi	r3, #2
 80036aa:	f8c9 3000 	strmi.w	r3, [r9]
 80036ae:	6825      	ldr	r5, [r4, #0]
 80036b0:	f015 0506 	ands.w	r5, r5, #6
 80036b4:	d107      	bne.n	80036c6 <_printf_common+0x52>
 80036b6:	f104 0a19 	add.w	sl, r4, #25
 80036ba:	68e3      	ldr	r3, [r4, #12]
 80036bc:	f8d9 2000 	ldr.w	r2, [r9]
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	429d      	cmp	r5, r3
 80036c4:	db29      	blt.n	800371a <_printf_common+0xa6>
 80036c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036ca:	6822      	ldr	r2, [r4, #0]
 80036cc:	3300      	adds	r3, #0
 80036ce:	bf18      	it	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	0692      	lsls	r2, r2, #26
 80036d4:	d42e      	bmi.n	8003734 <_printf_common+0xc0>
 80036d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036da:	4639      	mov	r1, r7
 80036dc:	4630      	mov	r0, r6
 80036de:	47c0      	blx	r8
 80036e0:	3001      	adds	r0, #1
 80036e2:	d021      	beq.n	8003728 <_printf_common+0xb4>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	68e5      	ldr	r5, [r4, #12]
 80036e8:	f8d9 2000 	ldr.w	r2, [r9]
 80036ec:	f003 0306 	and.w	r3, r3, #6
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	bf08      	it	eq
 80036f4:	1aad      	subeq	r5, r5, r2
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6922      	ldr	r2, [r4, #16]
 80036fa:	bf0c      	ite	eq
 80036fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003700:	2500      	movne	r5, #0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfc4      	itt	gt
 8003706:	1a9b      	subgt	r3, r3, r2
 8003708:	18ed      	addgt	r5, r5, r3
 800370a:	f04f 0900 	mov.w	r9, #0
 800370e:	341a      	adds	r4, #26
 8003710:	454d      	cmp	r5, r9
 8003712:	d11b      	bne.n	800374c <_printf_common+0xd8>
 8003714:	2000      	movs	r0, #0
 8003716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371a:	2301      	movs	r3, #1
 800371c:	4652      	mov	r2, sl
 800371e:	4639      	mov	r1, r7
 8003720:	4630      	mov	r0, r6
 8003722:	47c0      	blx	r8
 8003724:	3001      	adds	r0, #1
 8003726:	d103      	bne.n	8003730 <_printf_common+0xbc>
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003730:	3501      	adds	r5, #1
 8003732:	e7c2      	b.n	80036ba <_printf_common+0x46>
 8003734:	18e1      	adds	r1, r4, r3
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	2030      	movs	r0, #48	; 0x30
 800373a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373e:	4422      	add	r2, r4
 8003740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003748:	3302      	adds	r3, #2
 800374a:	e7c4      	b.n	80036d6 <_printf_common+0x62>
 800374c:	2301      	movs	r3, #1
 800374e:	4622      	mov	r2, r4
 8003750:	4639      	mov	r1, r7
 8003752:	4630      	mov	r0, r6
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d0e6      	beq.n	8003728 <_printf_common+0xb4>
 800375a:	f109 0901 	add.w	r9, r9, #1
 800375e:	e7d7      	b.n	8003710 <_printf_common+0x9c>

08003760 <_printf_i>:
 8003760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003764:	4617      	mov	r7, r2
 8003766:	7e0a      	ldrb	r2, [r1, #24]
 8003768:	b085      	sub	sp, #20
 800376a:	2a6e      	cmp	r2, #110	; 0x6e
 800376c:	4698      	mov	r8, r3
 800376e:	4606      	mov	r6, r0
 8003770:	460c      	mov	r4, r1
 8003772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003774:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003778:	f000 80bc 	beq.w	80038f4 <_printf_i+0x194>
 800377c:	d81a      	bhi.n	80037b4 <_printf_i+0x54>
 800377e:	2a63      	cmp	r2, #99	; 0x63
 8003780:	d02e      	beq.n	80037e0 <_printf_i+0x80>
 8003782:	d80a      	bhi.n	800379a <_printf_i+0x3a>
 8003784:	2a00      	cmp	r2, #0
 8003786:	f000 80c8 	beq.w	800391a <_printf_i+0x1ba>
 800378a:	2a58      	cmp	r2, #88	; 0x58
 800378c:	f000 808a 	beq.w	80038a4 <_printf_i+0x144>
 8003790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003794:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003798:	e02a      	b.n	80037f0 <_printf_i+0x90>
 800379a:	2a64      	cmp	r2, #100	; 0x64
 800379c:	d001      	beq.n	80037a2 <_printf_i+0x42>
 800379e:	2a69      	cmp	r2, #105	; 0x69
 80037a0:	d1f6      	bne.n	8003790 <_printf_i+0x30>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80037aa:	d023      	beq.n	80037f4 <_printf_i+0x94>
 80037ac:	1d11      	adds	r1, r2, #4
 80037ae:	6019      	str	r1, [r3, #0]
 80037b0:	6813      	ldr	r3, [r2, #0]
 80037b2:	e027      	b.n	8003804 <_printf_i+0xa4>
 80037b4:	2a73      	cmp	r2, #115	; 0x73
 80037b6:	f000 80b4 	beq.w	8003922 <_printf_i+0x1c2>
 80037ba:	d808      	bhi.n	80037ce <_printf_i+0x6e>
 80037bc:	2a6f      	cmp	r2, #111	; 0x6f
 80037be:	d02a      	beq.n	8003816 <_printf_i+0xb6>
 80037c0:	2a70      	cmp	r2, #112	; 0x70
 80037c2:	d1e5      	bne.n	8003790 <_printf_i+0x30>
 80037c4:	680a      	ldr	r2, [r1, #0]
 80037c6:	f042 0220 	orr.w	r2, r2, #32
 80037ca:	600a      	str	r2, [r1, #0]
 80037cc:	e003      	b.n	80037d6 <_printf_i+0x76>
 80037ce:	2a75      	cmp	r2, #117	; 0x75
 80037d0:	d021      	beq.n	8003816 <_printf_i+0xb6>
 80037d2:	2a78      	cmp	r2, #120	; 0x78
 80037d4:	d1dc      	bne.n	8003790 <_printf_i+0x30>
 80037d6:	2278      	movs	r2, #120	; 0x78
 80037d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80037dc:	496e      	ldr	r1, [pc, #440]	; (8003998 <_printf_i+0x238>)
 80037de:	e064      	b.n	80038aa <_printf_i+0x14a>
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80037e6:	1d11      	adds	r1, r2, #4
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	6813      	ldr	r3, [r2, #0]
 80037ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a3      	b.n	800393c <_printf_i+0x1dc>
 80037f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80037f8:	f102 0104 	add.w	r1, r2, #4
 80037fc:	6019      	str	r1, [r3, #0]
 80037fe:	d0d7      	beq.n	80037b0 <_printf_i+0x50>
 8003800:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003804:	2b00      	cmp	r3, #0
 8003806:	da03      	bge.n	8003810 <_printf_i+0xb0>
 8003808:	222d      	movs	r2, #45	; 0x2d
 800380a:	425b      	negs	r3, r3
 800380c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003810:	4962      	ldr	r1, [pc, #392]	; (800399c <_printf_i+0x23c>)
 8003812:	220a      	movs	r2, #10
 8003814:	e017      	b.n	8003846 <_printf_i+0xe6>
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800381e:	d003      	beq.n	8003828 <_printf_i+0xc8>
 8003820:	1d08      	adds	r0, r1, #4
 8003822:	6018      	str	r0, [r3, #0]
 8003824:	680b      	ldr	r3, [r1, #0]
 8003826:	e006      	b.n	8003836 <_printf_i+0xd6>
 8003828:	f010 0f40 	tst.w	r0, #64	; 0x40
 800382c:	f101 0004 	add.w	r0, r1, #4
 8003830:	6018      	str	r0, [r3, #0]
 8003832:	d0f7      	beq.n	8003824 <_printf_i+0xc4>
 8003834:	880b      	ldrh	r3, [r1, #0]
 8003836:	4959      	ldr	r1, [pc, #356]	; (800399c <_printf_i+0x23c>)
 8003838:	2a6f      	cmp	r2, #111	; 0x6f
 800383a:	bf14      	ite	ne
 800383c:	220a      	movne	r2, #10
 800383e:	2208      	moveq	r2, #8
 8003840:	2000      	movs	r0, #0
 8003842:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003846:	6865      	ldr	r5, [r4, #4]
 8003848:	60a5      	str	r5, [r4, #8]
 800384a:	2d00      	cmp	r5, #0
 800384c:	f2c0 809c 	blt.w	8003988 <_printf_i+0x228>
 8003850:	6820      	ldr	r0, [r4, #0]
 8003852:	f020 0004 	bic.w	r0, r0, #4
 8003856:	6020      	str	r0, [r4, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d13f      	bne.n	80038dc <_printf_i+0x17c>
 800385c:	2d00      	cmp	r5, #0
 800385e:	f040 8095 	bne.w	800398c <_printf_i+0x22c>
 8003862:	4675      	mov	r5, lr
 8003864:	2a08      	cmp	r2, #8
 8003866:	d10b      	bne.n	8003880 <_printf_i+0x120>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	07da      	lsls	r2, r3, #31
 800386c:	d508      	bpl.n	8003880 <_printf_i+0x120>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	bfde      	ittt	le
 8003876:	2330      	movle	r3, #48	; 0x30
 8003878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800387c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003880:	ebae 0305 	sub.w	r3, lr, r5
 8003884:	6123      	str	r3, [r4, #16]
 8003886:	f8cd 8000 	str.w	r8, [sp]
 800388a:	463b      	mov	r3, r7
 800388c:	aa03      	add	r2, sp, #12
 800388e:	4621      	mov	r1, r4
 8003890:	4630      	mov	r0, r6
 8003892:	f7ff feef 	bl	8003674 <_printf_common>
 8003896:	3001      	adds	r0, #1
 8003898:	d155      	bne.n	8003946 <_printf_i+0x1e6>
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	b005      	add	sp, #20
 80038a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80038a8:	493c      	ldr	r1, [pc, #240]	; (800399c <_printf_i+0x23c>)
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80038b2:	f100 0504 	add.w	r5, r0, #4
 80038b6:	601d      	str	r5, [r3, #0]
 80038b8:	d001      	beq.n	80038be <_printf_i+0x15e>
 80038ba:	6803      	ldr	r3, [r0, #0]
 80038bc:	e002      	b.n	80038c4 <_printf_i+0x164>
 80038be:	0655      	lsls	r5, r2, #25
 80038c0:	d5fb      	bpl.n	80038ba <_printf_i+0x15a>
 80038c2:	8803      	ldrh	r3, [r0, #0]
 80038c4:	07d0      	lsls	r0, r2, #31
 80038c6:	bf44      	itt	mi
 80038c8:	f042 0220 	orrmi.w	r2, r2, #32
 80038cc:	6022      	strmi	r2, [r4, #0]
 80038ce:	b91b      	cbnz	r3, 80038d8 <_printf_i+0x178>
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	f022 0220 	bic.w	r2, r2, #32
 80038d6:	6022      	str	r2, [r4, #0]
 80038d8:	2210      	movs	r2, #16
 80038da:	e7b1      	b.n	8003840 <_printf_i+0xe0>
 80038dc:	4675      	mov	r5, lr
 80038de:	fbb3 f0f2 	udiv	r0, r3, r2
 80038e2:	fb02 3310 	mls	r3, r2, r0, r3
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80038ec:	4603      	mov	r3, r0
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d1f5      	bne.n	80038de <_printf_i+0x17e>
 80038f2:	e7b7      	b.n	8003864 <_printf_i+0x104>
 80038f4:	6808      	ldr	r0, [r1, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	6949      	ldr	r1, [r1, #20]
 80038fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038fe:	d004      	beq.n	800390a <_printf_i+0x1aa>
 8003900:	1d10      	adds	r0, r2, #4
 8003902:	6018      	str	r0, [r3, #0]
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	6019      	str	r1, [r3, #0]
 8003908:	e007      	b.n	800391a <_printf_i+0x1ba>
 800390a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800390e:	f102 0004 	add.w	r0, r2, #4
 8003912:	6018      	str	r0, [r3, #0]
 8003914:	6813      	ldr	r3, [r2, #0]
 8003916:	d0f6      	beq.n	8003906 <_printf_i+0x1a6>
 8003918:	8019      	strh	r1, [r3, #0]
 800391a:	2300      	movs	r3, #0
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	4675      	mov	r5, lr
 8003920:	e7b1      	b.n	8003886 <_printf_i+0x126>
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	1d11      	adds	r1, r2, #4
 8003926:	6019      	str	r1, [r3, #0]
 8003928:	6815      	ldr	r5, [r2, #0]
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	2100      	movs	r1, #0
 800392e:	4628      	mov	r0, r5
 8003930:	f7fc fc56 	bl	80001e0 <memchr>
 8003934:	b108      	cbz	r0, 800393a <_printf_i+0x1da>
 8003936:	1b40      	subs	r0, r0, r5
 8003938:	6060      	str	r0, [r4, #4]
 800393a:	6863      	ldr	r3, [r4, #4]
 800393c:	6123      	str	r3, [r4, #16]
 800393e:	2300      	movs	r3, #0
 8003940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003944:	e79f      	b.n	8003886 <_printf_i+0x126>
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	462a      	mov	r2, r5
 800394a:	4639      	mov	r1, r7
 800394c:	4630      	mov	r0, r6
 800394e:	47c0      	blx	r8
 8003950:	3001      	adds	r0, #1
 8003952:	d0a2      	beq.n	800389a <_printf_i+0x13a>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	079b      	lsls	r3, r3, #30
 8003958:	d507      	bpl.n	800396a <_printf_i+0x20a>
 800395a:	2500      	movs	r5, #0
 800395c:	f104 0919 	add.w	r9, r4, #25
 8003960:	68e3      	ldr	r3, [r4, #12]
 8003962:	9a03      	ldr	r2, [sp, #12]
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	429d      	cmp	r5, r3
 8003968:	db05      	blt.n	8003976 <_printf_i+0x216>
 800396a:	68e0      	ldr	r0, [r4, #12]
 800396c:	9b03      	ldr	r3, [sp, #12]
 800396e:	4298      	cmp	r0, r3
 8003970:	bfb8      	it	lt
 8003972:	4618      	movlt	r0, r3
 8003974:	e793      	b.n	800389e <_printf_i+0x13e>
 8003976:	2301      	movs	r3, #1
 8003978:	464a      	mov	r2, r9
 800397a:	4639      	mov	r1, r7
 800397c:	4630      	mov	r0, r6
 800397e:	47c0      	blx	r8
 8003980:	3001      	adds	r0, #1
 8003982:	d08a      	beq.n	800389a <_printf_i+0x13a>
 8003984:	3501      	adds	r5, #1
 8003986:	e7eb      	b.n	8003960 <_printf_i+0x200>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1a7      	bne.n	80038dc <_printf_i+0x17c>
 800398c:	780b      	ldrb	r3, [r1, #0]
 800398e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003996:	e765      	b.n	8003864 <_printf_i+0x104>
 8003998:	0800635f 	.word	0x0800635f
 800399c:	0800634e 	.word	0x0800634e

080039a0 <siprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b500      	push	{lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80039aa:	ab1d      	add	r3, sp, #116	; 0x74
 80039ac:	f8ad 1014 	strh.w	r1, [sp, #20]
 80039b0:	9002      	str	r0, [sp, #8]
 80039b2:	9006      	str	r0, [sp, #24]
 80039b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b8:	480a      	ldr	r0, [pc, #40]	; (80039e4 <siprintf+0x44>)
 80039ba:	9104      	str	r1, [sp, #16]
 80039bc:	9107      	str	r1, [sp, #28]
 80039be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80039c6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	a902      	add	r1, sp, #8
 80039d0:	f001 fa6c 	bl	8004eac <_svfiprintf_r>
 80039d4:	9b02      	ldr	r3, [sp, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	b01c      	add	sp, #112	; 0x70
 80039dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e0:	b003      	add	sp, #12
 80039e2:	4770      	bx	lr
 80039e4:	2000000c 	.word	0x2000000c

080039e8 <quorem>:
 80039e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	6903      	ldr	r3, [r0, #16]
 80039ee:	690c      	ldr	r4, [r1, #16]
 80039f0:	429c      	cmp	r4, r3
 80039f2:	4680      	mov	r8, r0
 80039f4:	f300 8082 	bgt.w	8003afc <quorem+0x114>
 80039f8:	3c01      	subs	r4, #1
 80039fa:	f101 0714 	add.w	r7, r1, #20
 80039fe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003a02:	f100 0614 	add.w	r6, r0, #20
 8003a06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a0e:	eb06 030e 	add.w	r3, r6, lr
 8003a12:	3501      	adds	r5, #1
 8003a14:	eb07 090e 	add.w	r9, r7, lr
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a1e:	b395      	cbz	r5, 8003a86 <quorem+0x9e>
 8003a20:	f04f 0a00 	mov.w	sl, #0
 8003a24:	4638      	mov	r0, r7
 8003a26:	46b4      	mov	ip, r6
 8003a28:	46d3      	mov	fp, sl
 8003a2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a2e:	b293      	uxth	r3, r2
 8003a30:	fb05 a303 	mla	r3, r5, r3, sl
 8003a34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	ebab 0303 	sub.w	r3, fp, r3
 8003a3e:	0c12      	lsrs	r2, r2, #16
 8003a40:	f8bc b000 	ldrh.w	fp, [ip]
 8003a44:	fb05 a202 	mla	r2, r5, r2, sl
 8003a48:	fa13 f38b 	uxtah	r3, r3, fp
 8003a4c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a50:	fa1f fb82 	uxth.w	fp, r2
 8003a54:	f8dc 2000 	ldr.w	r2, [ip]
 8003a58:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a66:	4581      	cmp	r9, r0
 8003a68:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003a6c:	f84c 3b04 	str.w	r3, [ip], #4
 8003a70:	d2db      	bcs.n	8003a2a <quorem+0x42>
 8003a72:	f856 300e 	ldr.w	r3, [r6, lr]
 8003a76:	b933      	cbnz	r3, 8003a86 <quorem+0x9e>
 8003a78:	9b01      	ldr	r3, [sp, #4]
 8003a7a:	3b04      	subs	r3, #4
 8003a7c:	429e      	cmp	r6, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	d330      	bcc.n	8003ae4 <quorem+0xfc>
 8003a82:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a86:	4640      	mov	r0, r8
 8003a88:	f001 f833 	bl	8004af2 <__mcmp>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	db25      	blt.n	8003adc <quorem+0xf4>
 8003a90:	3501      	adds	r5, #1
 8003a92:	4630      	mov	r0, r6
 8003a94:	f04f 0e00 	mov.w	lr, #0
 8003a98:	f857 2b04 	ldr.w	r2, [r7], #4
 8003a9c:	f8d0 c000 	ldr.w	ip, [r0]
 8003aa0:	b293      	uxth	r3, r2
 8003aa2:	ebae 0303 	sub.w	r3, lr, r3
 8003aa6:	0c12      	lsrs	r2, r2, #16
 8003aa8:	fa13 f38c 	uxtah	r3, r3, ip
 8003aac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aba:	45b9      	cmp	r9, r7
 8003abc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003ac0:	f840 3b04 	str.w	r3, [r0], #4
 8003ac4:	d2e8      	bcs.n	8003a98 <quorem+0xb0>
 8003ac6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003aca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003ace:	b92a      	cbnz	r2, 8003adc <quorem+0xf4>
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	429e      	cmp	r6, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	d30b      	bcc.n	8003af0 <quorem+0x108>
 8003ad8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003adc:	4628      	mov	r0, r5
 8003ade:	b003      	add	sp, #12
 8003ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	d1ca      	bne.n	8003a82 <quorem+0x9a>
 8003aec:	3c01      	subs	r4, #1
 8003aee:	e7c5      	b.n	8003a7c <quorem+0x94>
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	3b04      	subs	r3, #4
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d1ef      	bne.n	8003ad8 <quorem+0xf0>
 8003af8:	3c01      	subs	r4, #1
 8003afa:	e7ea      	b.n	8003ad2 <quorem+0xea>
 8003afc:	2000      	movs	r0, #0
 8003afe:	e7ee      	b.n	8003ade <quorem+0xf6>

08003b00 <_dtoa_r>:
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	ec57 6b10 	vmov	r6, r7, d0
 8003b08:	b097      	sub	sp, #92	; 0x5c
 8003b0a:	e9cd 6700 	strd	r6, r7, [sp]
 8003b0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b10:	9107      	str	r1, [sp, #28]
 8003b12:	4604      	mov	r4, r0
 8003b14:	920a      	str	r2, [sp, #40]	; 0x28
 8003b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b18:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003b1a:	b93e      	cbnz	r6, 8003b2c <_dtoa_r+0x2c>
 8003b1c:	2010      	movs	r0, #16
 8003b1e:	f000 fdcb 	bl	80046b8 <malloc>
 8003b22:	6260      	str	r0, [r4, #36]	; 0x24
 8003b24:	6046      	str	r6, [r0, #4]
 8003b26:	6086      	str	r6, [r0, #8]
 8003b28:	6006      	str	r6, [r0, #0]
 8003b2a:	60c6      	str	r6, [r0, #12]
 8003b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	b151      	cbz	r1, 8003b48 <_dtoa_r+0x48>
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	604a      	str	r2, [r1, #4]
 8003b36:	2301      	movs	r3, #1
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f000 fe02 	bl	8004746 <_Bfree>
 8003b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	9b01      	ldr	r3, [sp, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbf      	itttt	lt
 8003b4e:	2301      	movlt	r3, #1
 8003b50:	602b      	strlt	r3, [r5, #0]
 8003b52:	9b01      	ldrlt	r3, [sp, #4]
 8003b54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	bfb2      	itee	lt
 8003b5a:	9301      	strlt	r3, [sp, #4]
 8003b5c:	2300      	movge	r3, #0
 8003b5e:	602b      	strge	r3, [r5, #0]
 8003b60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003b64:	4ba8      	ldr	r3, [pc, #672]	; (8003e08 <_dtoa_r+0x308>)
 8003b66:	ea33 0308 	bics.w	r3, r3, r8
 8003b6a:	d11b      	bne.n	8003ba4 <_dtoa_r+0xa4>
 8003b6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	9b00      	ldr	r3, [sp, #0]
 8003b76:	b923      	cbnz	r3, 8003b82 <_dtoa_r+0x82>
 8003b78:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f000 8578 	beq.w	8004672 <_dtoa_r+0xb72>
 8003b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b84:	b953      	cbnz	r3, 8003b9c <_dtoa_r+0x9c>
 8003b86:	4ba1      	ldr	r3, [pc, #644]	; (8003e0c <_dtoa_r+0x30c>)
 8003b88:	e021      	b.n	8003bce <_dtoa_r+0xce>
 8003b8a:	4ba1      	ldr	r3, [pc, #644]	; (8003e10 <_dtoa_r+0x310>)
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	9802      	ldr	r0, [sp, #8]
 8003b96:	b017      	add	sp, #92	; 0x5c
 8003b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9c:	4b9b      	ldr	r3, [pc, #620]	; (8003e0c <_dtoa_r+0x30c>)
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	e7f5      	b.n	8003b90 <_dtoa_r+0x90>
 8003ba4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2300      	movs	r3, #0
 8003bac:	4630      	mov	r0, r6
 8003bae:	4639      	mov	r1, r7
 8003bb0:	f7fc ff86 	bl	8000ac0 <__aeabi_dcmpeq>
 8003bb4:	4681      	mov	r9, r0
 8003bb6:	b160      	cbz	r0, 8003bd2 <_dtoa_r+0xd2>
 8003bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bba:	2301      	movs	r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8553 	beq.w	800466c <_dtoa_r+0xb6c>
 8003bc6:	4b93      	ldr	r3, [pc, #588]	; (8003e14 <_dtoa_r+0x314>)
 8003bc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	e7e0      	b.n	8003b94 <_dtoa_r+0x94>
 8003bd2:	aa14      	add	r2, sp, #80	; 0x50
 8003bd4:	a915      	add	r1, sp, #84	; 0x54
 8003bd6:	ec47 6b10 	vmov	d0, r6, r7
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f001 f801 	bl	8004be2 <__d2b>
 8003be0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003be4:	4682      	mov	sl, r0
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	d07e      	beq.n	8003ce8 <_dtoa_r+0x1e8>
 8003bea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003bee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003bf8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003bfc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003c00:	2200      	movs	r2, #0
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <_dtoa_r+0x318>)
 8003c04:	f7fc fb40 	bl	8000288 <__aeabi_dsub>
 8003c08:	a379      	add	r3, pc, #484	; (adr r3, 8003df0 <_dtoa_r+0x2f0>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fcef 	bl	80005f0 <__aeabi_dmul>
 8003c12:	a379      	add	r3, pc, #484	; (adr r3, 8003df8 <_dtoa_r+0x2f8>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc fb38 	bl	800028c <__adddf3>
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	460f      	mov	r7, r1
 8003c22:	f7fc fc7f 	bl	8000524 <__aeabi_i2d>
 8003c26:	a376      	add	r3, pc, #472	; (adr r3, 8003e00 <_dtoa_r+0x300>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc fce0 	bl	80005f0 <__aeabi_dmul>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4630      	mov	r0, r6
 8003c36:	4639      	mov	r1, r7
 8003c38:	f7fc fb28 	bl	800028c <__adddf3>
 8003c3c:	4606      	mov	r6, r0
 8003c3e:	460f      	mov	r7, r1
 8003c40:	f7fc ff86 	bl	8000b50 <__aeabi_d2iz>
 8003c44:	2200      	movs	r2, #0
 8003c46:	4683      	mov	fp, r0
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	4639      	mov	r1, r7
 8003c4e:	f7fc ff41 	bl	8000ad4 <__aeabi_dcmplt>
 8003c52:	b158      	cbz	r0, 8003c6c <_dtoa_r+0x16c>
 8003c54:	4658      	mov	r0, fp
 8003c56:	f7fc fc65 	bl	8000524 <__aeabi_i2d>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4630      	mov	r0, r6
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fc ff2d 	bl	8000ac0 <__aeabi_dcmpeq>
 8003c66:	b908      	cbnz	r0, 8003c6c <_dtoa_r+0x16c>
 8003c68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c6c:	f1bb 0f16 	cmp.w	fp, #22
 8003c70:	d859      	bhi.n	8003d26 <_dtoa_r+0x226>
 8003c72:	496a      	ldr	r1, [pc, #424]	; (8003e1c <_dtoa_r+0x31c>)
 8003c74:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c80:	f7fc ff46 	bl	8000b10 <__aeabi_dcmpgt>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d050      	beq.n	8003d2a <_dtoa_r+0x22a>
 8003c88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003c90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c92:	1b5d      	subs	r5, r3, r5
 8003c94:	1e6b      	subs	r3, r5, #1
 8003c96:	9306      	str	r3, [sp, #24]
 8003c98:	bf45      	ittet	mi
 8003c9a:	f1c5 0301 	rsbmi	r3, r5, #1
 8003c9e:	9305      	strmi	r3, [sp, #20]
 8003ca0:	2300      	movpl	r3, #0
 8003ca2:	2300      	movmi	r3, #0
 8003ca4:	bf4c      	ite	mi
 8003ca6:	9306      	strmi	r3, [sp, #24]
 8003ca8:	9305      	strpl	r3, [sp, #20]
 8003caa:	f1bb 0f00 	cmp.w	fp, #0
 8003cae:	db3e      	blt.n	8003d2e <_dtoa_r+0x22e>
 8003cb0:	9b06      	ldr	r3, [sp, #24]
 8003cb2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003cb6:	445b      	add	r3, fp
 8003cb8:	9306      	str	r3, [sp, #24]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9308      	str	r3, [sp, #32]
 8003cbe:	9b07      	ldr	r3, [sp, #28]
 8003cc0:	2b09      	cmp	r3, #9
 8003cc2:	f200 80af 	bhi.w	8003e24 <_dtoa_r+0x324>
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	bfc4      	itt	gt
 8003cca:	3b04      	subgt	r3, #4
 8003ccc:	9307      	strgt	r3, [sp, #28]
 8003cce:	9b07      	ldr	r3, [sp, #28]
 8003cd0:	f1a3 0302 	sub.w	r3, r3, #2
 8003cd4:	bfcc      	ite	gt
 8003cd6:	2600      	movgt	r6, #0
 8003cd8:	2601      	movle	r6, #1
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f200 80ae 	bhi.w	8003e3c <_dtoa_r+0x33c>
 8003ce0:	e8df f003 	tbb	[pc, r3]
 8003ce4:	772f8482 	.word	0x772f8482
 8003ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003cec:	441d      	add	r5, r3
 8003cee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	dd11      	ble.n	8003d1a <_dtoa_r+0x21a>
 8003cf6:	9a00      	ldr	r2, [sp, #0]
 8003cf8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003cfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003d00:	fa22 f000 	lsr.w	r0, r2, r0
 8003d04:	fa08 f303 	lsl.w	r3, r8, r3
 8003d08:	4318      	orrs	r0, r3
 8003d0a:	f7fc fbfb 	bl	8000504 <__aeabi_ui2d>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003d14:	3d01      	subs	r5, #1
 8003d16:	9312      	str	r3, [sp, #72]	; 0x48
 8003d18:	e772      	b.n	8003c00 <_dtoa_r+0x100>
 8003d1a:	f1c3 0020 	rsb	r0, r3, #32
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	fa03 f000 	lsl.w	r0, r3, r0
 8003d24:	e7f1      	b.n	8003d0a <_dtoa_r+0x20a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e7b1      	b.n	8003c8e <_dtoa_r+0x18e>
 8003d2a:	900e      	str	r0, [sp, #56]	; 0x38
 8003d2c:	e7b0      	b.n	8003c90 <_dtoa_r+0x190>
 8003d2e:	9b05      	ldr	r3, [sp, #20]
 8003d30:	eba3 030b 	sub.w	r3, r3, fp
 8003d34:	9305      	str	r3, [sp, #20]
 8003d36:	f1cb 0300 	rsb	r3, fp, #0
 8003d3a:	9308      	str	r3, [sp, #32]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d40:	e7bd      	b.n	8003cbe <_dtoa_r+0x1be>
 8003d42:	2301      	movs	r3, #1
 8003d44:	9309      	str	r3, [sp, #36]	; 0x24
 8003d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd7a      	ble.n	8003e42 <_dtoa_r+0x342>
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	9303      	str	r3, [sp, #12]
 8003d50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d52:	2200      	movs	r2, #0
 8003d54:	606a      	str	r2, [r5, #4]
 8003d56:	2104      	movs	r1, #4
 8003d58:	f101 0214 	add.w	r2, r1, #20
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d975      	bls.n	8003e4c <_dtoa_r+0x34c>
 8003d60:	6869      	ldr	r1, [r5, #4]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 fcbb 	bl	80046de <_Balloc>
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6a:	6028      	str	r0, [r5, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	9302      	str	r3, [sp, #8]
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	2b0e      	cmp	r3, #14
 8003d74:	f200 80e5 	bhi.w	8003f42 <_dtoa_r+0x442>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	f000 80e2 	beq.w	8003f42 <_dtoa_r+0x442>
 8003d7e:	ed9d 7b00 	vldr	d7, [sp]
 8003d82:	f1bb 0f00 	cmp.w	fp, #0
 8003d86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003d8a:	dd74      	ble.n	8003e76 <_dtoa_r+0x376>
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <_dtoa_r+0x31c>)
 8003d8e:	f00b 030f 	and.w	r3, fp, #15
 8003d92:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003d96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d9a:	06f0      	lsls	r0, r6, #27
 8003d9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003da0:	d559      	bpl.n	8003e56 <_dtoa_r+0x356>
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <_dtoa_r+0x320>)
 8003da4:	ec51 0b17 	vmov	r0, r1, d7
 8003da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dac:	f7fc fd4a 	bl	8000844 <__aeabi_ddiv>
 8003db0:	e9cd 0100 	strd	r0, r1, [sp]
 8003db4:	f006 060f 	and.w	r6, r6, #15
 8003db8:	2503      	movs	r5, #3
 8003dba:	4f19      	ldr	r7, [pc, #100]	; (8003e20 <_dtoa_r+0x320>)
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d14c      	bne.n	8003e5a <_dtoa_r+0x35a>
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dc8:	f7fc fd3c 	bl	8000844 <__aeabi_ddiv>
 8003dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8003dd0:	e06a      	b.n	8003ea8 <_dtoa_r+0x3a8>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dd8:	445b      	add	r3, fp
 8003dda:	9304      	str	r3, [sp, #16]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	bfb8      	it	lt
 8003de4:	2301      	movlt	r3, #1
 8003de6:	e7b3      	b.n	8003d50 <_dtoa_r+0x250>
 8003de8:	2300      	movs	r3, #0
 8003dea:	e7ab      	b.n	8003d44 <_dtoa_r+0x244>
 8003dec:	2300      	movs	r3, #0
 8003dee:	e7f1      	b.n	8003dd4 <_dtoa_r+0x2d4>
 8003df0:	636f4361 	.word	0x636f4361
 8003df4:	3fd287a7 	.word	0x3fd287a7
 8003df8:	8b60c8b3 	.word	0x8b60c8b3
 8003dfc:	3fc68a28 	.word	0x3fc68a28
 8003e00:	509f79fb 	.word	0x509f79fb
 8003e04:	3fd34413 	.word	0x3fd34413
 8003e08:	7ff00000 	.word	0x7ff00000
 8003e0c:	08006379 	.word	0x08006379
 8003e10:	08006370 	.word	0x08006370
 8003e14:	0800634d 	.word	0x0800634d
 8003e18:	3ff80000 	.word	0x3ff80000
 8003e1c:	080063a8 	.word	0x080063a8
 8003e20:	08006380 	.word	0x08006380
 8003e24:	2601      	movs	r6, #1
 8003e26:	2300      	movs	r3, #0
 8003e28:	9307      	str	r3, [sp, #28]
 8003e2a:	9609      	str	r6, [sp, #36]	; 0x24
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	9304      	str	r3, [sp, #16]
 8003e32:	9303      	str	r3, [sp, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2312      	movs	r3, #18
 8003e38:	920a      	str	r2, [sp, #40]	; 0x28
 8003e3a:	e789      	b.n	8003d50 <_dtoa_r+0x250>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	e7f4      	b.n	8003e2c <_dtoa_r+0x32c>
 8003e42:	2301      	movs	r3, #1
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	e7f5      	b.n	8003e38 <_dtoa_r+0x338>
 8003e4c:	686a      	ldr	r2, [r5, #4]
 8003e4e:	3201      	adds	r2, #1
 8003e50:	606a      	str	r2, [r5, #4]
 8003e52:	0049      	lsls	r1, r1, #1
 8003e54:	e780      	b.n	8003d58 <_dtoa_r+0x258>
 8003e56:	2502      	movs	r5, #2
 8003e58:	e7af      	b.n	8003dba <_dtoa_r+0x2ba>
 8003e5a:	07f1      	lsls	r1, r6, #31
 8003e5c:	d508      	bpl.n	8003e70 <_dtoa_r+0x370>
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4649      	mov	r1, r9
 8003e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e66:	f7fc fbc3 	bl	80005f0 <__aeabi_dmul>
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	4680      	mov	r8, r0
 8003e6e:	4689      	mov	r9, r1
 8003e70:	1076      	asrs	r6, r6, #1
 8003e72:	3708      	adds	r7, #8
 8003e74:	e7a2      	b.n	8003dbc <_dtoa_r+0x2bc>
 8003e76:	f000 809d 	beq.w	8003fb4 <_dtoa_r+0x4b4>
 8003e7a:	f1cb 0600 	rsb	r6, fp, #0
 8003e7e:	4b9f      	ldr	r3, [pc, #636]	; (80040fc <_dtoa_r+0x5fc>)
 8003e80:	4f9f      	ldr	r7, [pc, #636]	; (8004100 <_dtoa_r+0x600>)
 8003e82:	f006 020f 	and.w	r2, r6, #15
 8003e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003e92:	f7fc fbad 	bl	80005f0 <__aeabi_dmul>
 8003e96:	e9cd 0100 	strd	r0, r1, [sp]
 8003e9a:	1136      	asrs	r6, r6, #4
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2502      	movs	r5, #2
 8003ea0:	2e00      	cmp	r6, #0
 8003ea2:	d17c      	bne.n	8003f9e <_dtoa_r+0x49e>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d191      	bne.n	8003dcc <_dtoa_r+0x2cc>
 8003ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8084 	beq.w	8003fb8 <_dtoa_r+0x4b8>
 8003eb0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4b93      	ldr	r3, [pc, #588]	; (8004104 <_dtoa_r+0x604>)
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4649      	mov	r1, r9
 8003ebc:	f7fc fe0a 	bl	8000ad4 <__aeabi_dcmplt>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d079      	beq.n	8003fb8 <_dtoa_r+0x4b8>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d076      	beq.n	8003fb8 <_dtoa_r+0x4b8>
 8003eca:	9b04      	ldr	r3, [sp, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	dd34      	ble.n	8003f3a <_dtoa_r+0x43a>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4b8d      	ldr	r3, [pc, #564]	; (8004108 <_dtoa_r+0x608>)
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	f7fc fb8a 	bl	80005f0 <__aeabi_dmul>
 8003edc:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee0:	9e04      	ldr	r6, [sp, #16]
 8003ee2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003ee6:	3501      	adds	r5, #1
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f7fc fb1b 	bl	8000524 <__aeabi_i2d>
 8003eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ef2:	f7fc fb7d 	bl	80005f0 <__aeabi_dmul>
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4b84      	ldr	r3, [pc, #528]	; (800410c <_dtoa_r+0x60c>)
 8003efa:	f7fc f9c7 	bl	800028c <__adddf3>
 8003efe:	4680      	mov	r8, r0
 8003f00:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003f04:	2e00      	cmp	r6, #0
 8003f06:	d15a      	bne.n	8003fbe <_dtoa_r+0x4be>
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4b81      	ldr	r3, [pc, #516]	; (8004110 <_dtoa_r+0x610>)
 8003f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f10:	f7fc f9ba 	bl	8000288 <__aeabi_dsub>
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	e9cd 0100 	strd	r0, r1, [sp]
 8003f1c:	f7fc fdf8 	bl	8000b10 <__aeabi_dcmpgt>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f040 829b 	bne.w	800445c <_dtoa_r+0x95c>
 8003f26:	4642      	mov	r2, r8
 8003f28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f30:	f7fc fdd0 	bl	8000ad4 <__aeabi_dcmplt>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f040 828f 	bne.w	8004458 <_dtoa_r+0x958>
 8003f3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8003f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f2c0 8150 	blt.w	80041ea <_dtoa_r+0x6ea>
 8003f4a:	f1bb 0f0e 	cmp.w	fp, #14
 8003f4e:	f300 814c 	bgt.w	80041ea <_dtoa_r+0x6ea>
 8003f52:	4b6a      	ldr	r3, [pc, #424]	; (80040fc <_dtoa_r+0x5fc>)
 8003f54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f280 80da 	bge.w	8004118 <_dtoa_r+0x618>
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f300 80d6 	bgt.w	8004118 <_dtoa_r+0x618>
 8003f6c:	f040 8273 	bne.w	8004456 <_dtoa_r+0x956>
 8003f70:	2200      	movs	r2, #0
 8003f72:	4b67      	ldr	r3, [pc, #412]	; (8004110 <_dtoa_r+0x610>)
 8003f74:	4640      	mov	r0, r8
 8003f76:	4649      	mov	r1, r9
 8003f78:	f7fc fb3a 	bl	80005f0 <__aeabi_dmul>
 8003f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f80:	f7fc fdbc 	bl	8000afc <__aeabi_dcmpge>
 8003f84:	9e03      	ldr	r6, [sp, #12]
 8003f86:	4637      	mov	r7, r6
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f040 824a 	bne.w	8004422 <_dtoa_r+0x922>
 8003f8e:	9b02      	ldr	r3, [sp, #8]
 8003f90:	9a02      	ldr	r2, [sp, #8]
 8003f92:	1c5d      	adds	r5, r3, #1
 8003f94:	2331      	movs	r3, #49	; 0x31
 8003f96:	7013      	strb	r3, [r2, #0]
 8003f98:	f10b 0b01 	add.w	fp, fp, #1
 8003f9c:	e245      	b.n	800442a <_dtoa_r+0x92a>
 8003f9e:	07f2      	lsls	r2, r6, #31
 8003fa0:	d505      	bpl.n	8003fae <_dtoa_r+0x4ae>
 8003fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa6:	f7fc fb23 	bl	80005f0 <__aeabi_dmul>
 8003faa:	3501      	adds	r5, #1
 8003fac:	2301      	movs	r3, #1
 8003fae:	1076      	asrs	r6, r6, #1
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	e775      	b.n	8003ea0 <_dtoa_r+0x3a0>
 8003fb4:	2502      	movs	r5, #2
 8003fb6:	e777      	b.n	8003ea8 <_dtoa_r+0x3a8>
 8003fb8:	465f      	mov	r7, fp
 8003fba:	9e03      	ldr	r6, [sp, #12]
 8003fbc:	e794      	b.n	8003ee8 <_dtoa_r+0x3e8>
 8003fbe:	9a02      	ldr	r2, [sp, #8]
 8003fc0:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <_dtoa_r+0x5fc>)
 8003fc2:	4432      	add	r2, r6
 8003fc4:	9213      	str	r2, [sp, #76]	; 0x4c
 8003fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fc8:	1e71      	subs	r1, r6, #1
 8003fca:	2a00      	cmp	r2, #0
 8003fcc:	d048      	beq.n	8004060 <_dtoa_r+0x560>
 8003fce:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	494e      	ldr	r1, [pc, #312]	; (8004114 <_dtoa_r+0x614>)
 8003fda:	f7fc fc33 	bl	8000844 <__aeabi_ddiv>
 8003fde:	4642      	mov	r2, r8
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	f7fc f951 	bl	8000288 <__aeabi_dsub>
 8003fe6:	9d02      	ldr	r5, [sp, #8]
 8003fe8:	4680      	mov	r8, r0
 8003fea:	4689      	mov	r9, r1
 8003fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ff0:	f7fc fdae 	bl	8000b50 <__aeabi_d2iz>
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	f7fc fa95 	bl	8000524 <__aeabi_i2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004002:	f7fc f941 	bl	8000288 <__aeabi_dsub>
 8004006:	3630      	adds	r6, #48	; 0x30
 8004008:	f805 6b01 	strb.w	r6, [r5], #1
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	e9cd 0100 	strd	r0, r1, [sp]
 8004014:	f7fc fd5e 	bl	8000ad4 <__aeabi_dcmplt>
 8004018:	2800      	cmp	r0, #0
 800401a:	d165      	bne.n	80040e8 <_dtoa_r+0x5e8>
 800401c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004020:	2000      	movs	r0, #0
 8004022:	4938      	ldr	r1, [pc, #224]	; (8004104 <_dtoa_r+0x604>)
 8004024:	f7fc f930 	bl	8000288 <__aeabi_dsub>
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	f7fc fd52 	bl	8000ad4 <__aeabi_dcmplt>
 8004030:	2800      	cmp	r0, #0
 8004032:	f040 80ba 	bne.w	80041aa <_dtoa_r+0x6aa>
 8004036:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004038:	429d      	cmp	r5, r3
 800403a:	f43f af7e 	beq.w	8003f3a <_dtoa_r+0x43a>
 800403e:	2200      	movs	r2, #0
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <_dtoa_r+0x608>)
 8004042:	4640      	mov	r0, r8
 8004044:	4649      	mov	r1, r9
 8004046:	f7fc fad3 	bl	80005f0 <__aeabi_dmul>
 800404a:	2200      	movs	r2, #0
 800404c:	4680      	mov	r8, r0
 800404e:	4689      	mov	r9, r1
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <_dtoa_r+0x608>)
 8004052:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004056:	f7fc facb 	bl	80005f0 <__aeabi_dmul>
 800405a:	e9cd 0100 	strd	r0, r1, [sp]
 800405e:	e7c5      	b.n	8003fec <_dtoa_r+0x4ec>
 8004060:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800406c:	f7fc fac0 	bl	80005f0 <__aeabi_dmul>
 8004070:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004074:	9d02      	ldr	r5, [sp, #8]
 8004076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800407a:	f7fc fd69 	bl	8000b50 <__aeabi_d2iz>
 800407e:	4606      	mov	r6, r0
 8004080:	f7fc fa50 	bl	8000524 <__aeabi_i2d>
 8004084:	3630      	adds	r6, #48	; 0x30
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800408e:	f7fc f8fb 	bl	8000288 <__aeabi_dsub>
 8004092:	f805 6b01 	strb.w	r6, [r5], #1
 8004096:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004098:	42ab      	cmp	r3, r5
 800409a:	4680      	mov	r8, r0
 800409c:	4689      	mov	r9, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	d125      	bne.n	80040f0 <_dtoa_r+0x5f0>
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <_dtoa_r+0x614>)
 80040a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040aa:	f7fc f8ef 	bl	800028c <__adddf3>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4640      	mov	r0, r8
 80040b4:	4649      	mov	r1, r9
 80040b6:	f7fc fd2b 	bl	8000b10 <__aeabi_dcmpgt>
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d175      	bne.n	80041aa <_dtoa_r+0x6aa>
 80040be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040c2:	2000      	movs	r0, #0
 80040c4:	4913      	ldr	r1, [pc, #76]	; (8004114 <_dtoa_r+0x614>)
 80040c6:	f7fc f8df 	bl	8000288 <__aeabi_dsub>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4640      	mov	r0, r8
 80040d0:	4649      	mov	r1, r9
 80040d2:	f7fc fcff 	bl	8000ad4 <__aeabi_dcmplt>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	f43f af2f 	beq.w	8003f3a <_dtoa_r+0x43a>
 80040dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	f105 32ff 	add.w	r2, r5, #4294967295
 80040e6:	d001      	beq.n	80040ec <_dtoa_r+0x5ec>
 80040e8:	46bb      	mov	fp, r7
 80040ea:	e04d      	b.n	8004188 <_dtoa_r+0x688>
 80040ec:	4615      	mov	r5, r2
 80040ee:	e7f5      	b.n	80040dc <_dtoa_r+0x5dc>
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <_dtoa_r+0x608>)
 80040f2:	f7fc fa7d 	bl	80005f0 <__aeabi_dmul>
 80040f6:	e9cd 0100 	strd	r0, r1, [sp]
 80040fa:	e7bc      	b.n	8004076 <_dtoa_r+0x576>
 80040fc:	080063a8 	.word	0x080063a8
 8004100:	08006380 	.word	0x08006380
 8004104:	3ff00000 	.word	0x3ff00000
 8004108:	40240000 	.word	0x40240000
 800410c:	401c0000 	.word	0x401c0000
 8004110:	40140000 	.word	0x40140000
 8004114:	3fe00000 	.word	0x3fe00000
 8004118:	e9dd 6700 	ldrd	r6, r7, [sp]
 800411c:	9d02      	ldr	r5, [sp, #8]
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	4630      	mov	r0, r6
 8004124:	4639      	mov	r1, r7
 8004126:	f7fc fb8d 	bl	8000844 <__aeabi_ddiv>
 800412a:	f7fc fd11 	bl	8000b50 <__aeabi_d2iz>
 800412e:	9000      	str	r0, [sp, #0]
 8004130:	f7fc f9f8 	bl	8000524 <__aeabi_i2d>
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	f7fc fa5a 	bl	80005f0 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4630      	mov	r0, r6
 8004142:	4639      	mov	r1, r7
 8004144:	f7fc f8a0 	bl	8000288 <__aeabi_dsub>
 8004148:	9e00      	ldr	r6, [sp, #0]
 800414a:	9f03      	ldr	r7, [sp, #12]
 800414c:	3630      	adds	r6, #48	; 0x30
 800414e:	f805 6b01 	strb.w	r6, [r5], #1
 8004152:	9e02      	ldr	r6, [sp, #8]
 8004154:	1bae      	subs	r6, r5, r6
 8004156:	42b7      	cmp	r7, r6
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	d138      	bne.n	80041d0 <_dtoa_r+0x6d0>
 800415e:	f7fc f895 	bl	800028c <__adddf3>
 8004162:	4606      	mov	r6, r0
 8004164:	460f      	mov	r7, r1
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4640      	mov	r0, r8
 800416c:	4649      	mov	r1, r9
 800416e:	f7fc fcb1 	bl	8000ad4 <__aeabi_dcmplt>
 8004172:	b9c8      	cbnz	r0, 80041a8 <_dtoa_r+0x6a8>
 8004174:	4632      	mov	r2, r6
 8004176:	463b      	mov	r3, r7
 8004178:	4640      	mov	r0, r8
 800417a:	4649      	mov	r1, r9
 800417c:	f7fc fca0 	bl	8000ac0 <__aeabi_dcmpeq>
 8004180:	b110      	cbz	r0, 8004188 <_dtoa_r+0x688>
 8004182:	9b00      	ldr	r3, [sp, #0]
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d40f      	bmi.n	80041a8 <_dtoa_r+0x6a8>
 8004188:	4651      	mov	r1, sl
 800418a:	4620      	mov	r0, r4
 800418c:	f000 fadb 	bl	8004746 <_Bfree>
 8004190:	2300      	movs	r3, #0
 8004192:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004194:	702b      	strb	r3, [r5, #0]
 8004196:	f10b 0301 	add.w	r3, fp, #1
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f43f acf8 	beq.w	8003b94 <_dtoa_r+0x94>
 80041a4:	601d      	str	r5, [r3, #0]
 80041a6:	e4f5      	b.n	8003b94 <_dtoa_r+0x94>
 80041a8:	465f      	mov	r7, fp
 80041aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80041ae:	2a39      	cmp	r2, #57	; 0x39
 80041b0:	f105 33ff 	add.w	r3, r5, #4294967295
 80041b4:	d106      	bne.n	80041c4 <_dtoa_r+0x6c4>
 80041b6:	9a02      	ldr	r2, [sp, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d107      	bne.n	80041cc <_dtoa_r+0x6cc>
 80041bc:	2330      	movs	r3, #48	; 0x30
 80041be:	7013      	strb	r3, [r2, #0]
 80041c0:	3701      	adds	r7, #1
 80041c2:	4613      	mov	r3, r2
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	3201      	adds	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e78d      	b.n	80040e8 <_dtoa_r+0x5e8>
 80041cc:	461d      	mov	r5, r3
 80041ce:	e7ec      	b.n	80041aa <_dtoa_r+0x6aa>
 80041d0:	2200      	movs	r2, #0
 80041d2:	4ba4      	ldr	r3, [pc, #656]	; (8004464 <_dtoa_r+0x964>)
 80041d4:	f7fc fa0c 	bl	80005f0 <__aeabi_dmul>
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	4606      	mov	r6, r0
 80041de:	460f      	mov	r7, r1
 80041e0:	f7fc fc6e 	bl	8000ac0 <__aeabi_dcmpeq>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d09a      	beq.n	800411e <_dtoa_r+0x61e>
 80041e8:	e7ce      	b.n	8004188 <_dtoa_r+0x688>
 80041ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	f000 80cd 	beq.w	800438c <_dtoa_r+0x88c>
 80041f2:	9a07      	ldr	r2, [sp, #28]
 80041f4:	2a01      	cmp	r2, #1
 80041f6:	f300 80af 	bgt.w	8004358 <_dtoa_r+0x858>
 80041fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	f000 80a7 	beq.w	8004350 <_dtoa_r+0x850>
 8004202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004206:	9e08      	ldr	r6, [sp, #32]
 8004208:	9d05      	ldr	r5, [sp, #20]
 800420a:	9a05      	ldr	r2, [sp, #20]
 800420c:	441a      	add	r2, r3
 800420e:	9205      	str	r2, [sp, #20]
 8004210:	9a06      	ldr	r2, [sp, #24]
 8004212:	2101      	movs	r1, #1
 8004214:	441a      	add	r2, r3
 8004216:	4620      	mov	r0, r4
 8004218:	9206      	str	r2, [sp, #24]
 800421a:	f000 fb34 	bl	8004886 <__i2b>
 800421e:	4607      	mov	r7, r0
 8004220:	2d00      	cmp	r5, #0
 8004222:	dd0c      	ble.n	800423e <_dtoa_r+0x73e>
 8004224:	9b06      	ldr	r3, [sp, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	dd09      	ble.n	800423e <_dtoa_r+0x73e>
 800422a:	42ab      	cmp	r3, r5
 800422c:	9a05      	ldr	r2, [sp, #20]
 800422e:	bfa8      	it	ge
 8004230:	462b      	movge	r3, r5
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	9205      	str	r2, [sp, #20]
 8004236:	9a06      	ldr	r2, [sp, #24]
 8004238:	1aed      	subs	r5, r5, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	9306      	str	r3, [sp, #24]
 800423e:	9b08      	ldr	r3, [sp, #32]
 8004240:	b1f3      	cbz	r3, 8004280 <_dtoa_r+0x780>
 8004242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a5 	beq.w	8004394 <_dtoa_r+0x894>
 800424a:	2e00      	cmp	r6, #0
 800424c:	dd10      	ble.n	8004270 <_dtoa_r+0x770>
 800424e:	4639      	mov	r1, r7
 8004250:	4632      	mov	r2, r6
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fbae 	bl	80049b4 <__pow5mult>
 8004258:	4652      	mov	r2, sl
 800425a:	4601      	mov	r1, r0
 800425c:	4607      	mov	r7, r0
 800425e:	4620      	mov	r0, r4
 8004260:	f000 fb1a 	bl	8004898 <__multiply>
 8004264:	4651      	mov	r1, sl
 8004266:	4680      	mov	r8, r0
 8004268:	4620      	mov	r0, r4
 800426a:	f000 fa6c 	bl	8004746 <_Bfree>
 800426e:	46c2      	mov	sl, r8
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	1b9a      	subs	r2, r3, r6
 8004274:	d004      	beq.n	8004280 <_dtoa_r+0x780>
 8004276:	4651      	mov	r1, sl
 8004278:	4620      	mov	r0, r4
 800427a:	f000 fb9b 	bl	80049b4 <__pow5mult>
 800427e:	4682      	mov	sl, r0
 8004280:	2101      	movs	r1, #1
 8004282:	4620      	mov	r0, r4
 8004284:	f000 faff 	bl	8004886 <__i2b>
 8004288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800428a:	2b00      	cmp	r3, #0
 800428c:	4606      	mov	r6, r0
 800428e:	f340 8083 	ble.w	8004398 <_dtoa_r+0x898>
 8004292:	461a      	mov	r2, r3
 8004294:	4601      	mov	r1, r0
 8004296:	4620      	mov	r0, r4
 8004298:	f000 fb8c 	bl	80049b4 <__pow5mult>
 800429c:	9b07      	ldr	r3, [sp, #28]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	4606      	mov	r6, r0
 80042a2:	dd7c      	ble.n	800439e <_dtoa_r+0x89e>
 80042a4:	f04f 0800 	mov.w	r8, #0
 80042a8:	6933      	ldr	r3, [r6, #16]
 80042aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80042ae:	6918      	ldr	r0, [r3, #16]
 80042b0:	f000 fa9b 	bl	80047ea <__hi0bits>
 80042b4:	f1c0 0020 	rsb	r0, r0, #32
 80042b8:	9b06      	ldr	r3, [sp, #24]
 80042ba:	4418      	add	r0, r3
 80042bc:	f010 001f 	ands.w	r0, r0, #31
 80042c0:	f000 8096 	beq.w	80043f0 <_dtoa_r+0x8f0>
 80042c4:	f1c0 0320 	rsb	r3, r0, #32
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	f340 8087 	ble.w	80043dc <_dtoa_r+0x8dc>
 80042ce:	9b05      	ldr	r3, [sp, #20]
 80042d0:	f1c0 001c 	rsb	r0, r0, #28
 80042d4:	4403      	add	r3, r0
 80042d6:	9305      	str	r3, [sp, #20]
 80042d8:	9b06      	ldr	r3, [sp, #24]
 80042da:	4405      	add	r5, r0
 80042dc:	4403      	add	r3, r0
 80042de:	9306      	str	r3, [sp, #24]
 80042e0:	9b05      	ldr	r3, [sp, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dd05      	ble.n	80042f2 <_dtoa_r+0x7f2>
 80042e6:	4651      	mov	r1, sl
 80042e8:	461a      	mov	r2, r3
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fbb0 	bl	8004a50 <__lshift>
 80042f0:	4682      	mov	sl, r0
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	dd05      	ble.n	8004304 <_dtoa_r+0x804>
 80042f8:	4631      	mov	r1, r6
 80042fa:	461a      	mov	r2, r3
 80042fc:	4620      	mov	r0, r4
 80042fe:	f000 fba7 	bl	8004a50 <__lshift>
 8004302:	4606      	mov	r6, r0
 8004304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004306:	2b00      	cmp	r3, #0
 8004308:	d074      	beq.n	80043f4 <_dtoa_r+0x8f4>
 800430a:	4631      	mov	r1, r6
 800430c:	4650      	mov	r0, sl
 800430e:	f000 fbf0 	bl	8004af2 <__mcmp>
 8004312:	2800      	cmp	r0, #0
 8004314:	da6e      	bge.n	80043f4 <_dtoa_r+0x8f4>
 8004316:	2300      	movs	r3, #0
 8004318:	4651      	mov	r1, sl
 800431a:	220a      	movs	r2, #10
 800431c:	4620      	mov	r0, r4
 800431e:	f000 fa29 	bl	8004774 <__multadd>
 8004322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004324:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004328:	4682      	mov	sl, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 81a8 	beq.w	8004680 <_dtoa_r+0xb80>
 8004330:	2300      	movs	r3, #0
 8004332:	4639      	mov	r1, r7
 8004334:	220a      	movs	r2, #10
 8004336:	4620      	mov	r0, r4
 8004338:	f000 fa1c 	bl	8004774 <__multadd>
 800433c:	9b04      	ldr	r3, [sp, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	4607      	mov	r7, r0
 8004342:	f300 80c8 	bgt.w	80044d6 <_dtoa_r+0x9d6>
 8004346:	9b07      	ldr	r3, [sp, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	f340 80c4 	ble.w	80044d6 <_dtoa_r+0x9d6>
 800434e:	e059      	b.n	8004404 <_dtoa_r+0x904>
 8004350:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004352:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004356:	e756      	b.n	8004206 <_dtoa_r+0x706>
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	1e5e      	subs	r6, r3, #1
 800435c:	9b08      	ldr	r3, [sp, #32]
 800435e:	42b3      	cmp	r3, r6
 8004360:	bfbf      	itttt	lt
 8004362:	9b08      	ldrlt	r3, [sp, #32]
 8004364:	9608      	strlt	r6, [sp, #32]
 8004366:	1af2      	sublt	r2, r6, r3
 8004368:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800436a:	bfb6      	itet	lt
 800436c:	189b      	addlt	r3, r3, r2
 800436e:	1b9e      	subge	r6, r3, r6
 8004370:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	bfb8      	it	lt
 8004376:	2600      	movlt	r6, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	bfb9      	ittee	lt
 800437c:	9b05      	ldrlt	r3, [sp, #20]
 800437e:	9a03      	ldrlt	r2, [sp, #12]
 8004380:	9d05      	ldrge	r5, [sp, #20]
 8004382:	9b03      	ldrge	r3, [sp, #12]
 8004384:	bfbc      	itt	lt
 8004386:	1a9d      	sublt	r5, r3, r2
 8004388:	2300      	movlt	r3, #0
 800438a:	e73e      	b.n	800420a <_dtoa_r+0x70a>
 800438c:	9e08      	ldr	r6, [sp, #32]
 800438e:	9d05      	ldr	r5, [sp, #20]
 8004390:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004392:	e745      	b.n	8004220 <_dtoa_r+0x720>
 8004394:	9a08      	ldr	r2, [sp, #32]
 8004396:	e76e      	b.n	8004276 <_dtoa_r+0x776>
 8004398:	9b07      	ldr	r3, [sp, #28]
 800439a:	2b01      	cmp	r3, #1
 800439c:	dc19      	bgt.n	80043d2 <_dtoa_r+0x8d2>
 800439e:	9b00      	ldr	r3, [sp, #0]
 80043a0:	b9bb      	cbnz	r3, 80043d2 <_dtoa_r+0x8d2>
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a8:	b99b      	cbnz	r3, 80043d2 <_dtoa_r+0x8d2>
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043b0:	0d1b      	lsrs	r3, r3, #20
 80043b2:	051b      	lsls	r3, r3, #20
 80043b4:	b183      	cbz	r3, 80043d8 <_dtoa_r+0x8d8>
 80043b6:	9b05      	ldr	r3, [sp, #20]
 80043b8:	3301      	adds	r3, #1
 80043ba:	9305      	str	r3, [sp, #20]
 80043bc:	9b06      	ldr	r3, [sp, #24]
 80043be:	3301      	adds	r3, #1
 80043c0:	9306      	str	r3, [sp, #24]
 80043c2:	f04f 0801 	mov.w	r8, #1
 80043c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f af6d 	bne.w	80042a8 <_dtoa_r+0x7a8>
 80043ce:	2001      	movs	r0, #1
 80043d0:	e772      	b.n	80042b8 <_dtoa_r+0x7b8>
 80043d2:	f04f 0800 	mov.w	r8, #0
 80043d6:	e7f6      	b.n	80043c6 <_dtoa_r+0x8c6>
 80043d8:	4698      	mov	r8, r3
 80043da:	e7f4      	b.n	80043c6 <_dtoa_r+0x8c6>
 80043dc:	d080      	beq.n	80042e0 <_dtoa_r+0x7e0>
 80043de:	9a05      	ldr	r2, [sp, #20]
 80043e0:	331c      	adds	r3, #28
 80043e2:	441a      	add	r2, r3
 80043e4:	9205      	str	r2, [sp, #20]
 80043e6:	9a06      	ldr	r2, [sp, #24]
 80043e8:	441a      	add	r2, r3
 80043ea:	441d      	add	r5, r3
 80043ec:	4613      	mov	r3, r2
 80043ee:	e776      	b.n	80042de <_dtoa_r+0x7de>
 80043f0:	4603      	mov	r3, r0
 80043f2:	e7f4      	b.n	80043de <_dtoa_r+0x8de>
 80043f4:	9b03      	ldr	r3, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	dc36      	bgt.n	8004468 <_dtoa_r+0x968>
 80043fa:	9b07      	ldr	r3, [sp, #28]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	dd33      	ble.n	8004468 <_dtoa_r+0x968>
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	9b04      	ldr	r3, [sp, #16]
 8004406:	b963      	cbnz	r3, 8004422 <_dtoa_r+0x922>
 8004408:	4631      	mov	r1, r6
 800440a:	2205      	movs	r2, #5
 800440c:	4620      	mov	r0, r4
 800440e:	f000 f9b1 	bl	8004774 <__multadd>
 8004412:	4601      	mov	r1, r0
 8004414:	4606      	mov	r6, r0
 8004416:	4650      	mov	r0, sl
 8004418:	f000 fb6b 	bl	8004af2 <__mcmp>
 800441c:	2800      	cmp	r0, #0
 800441e:	f73f adb6 	bgt.w	8003f8e <_dtoa_r+0x48e>
 8004422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004424:	9d02      	ldr	r5, [sp, #8]
 8004426:	ea6f 0b03 	mvn.w	fp, r3
 800442a:	2300      	movs	r3, #0
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	4631      	mov	r1, r6
 8004430:	4620      	mov	r0, r4
 8004432:	f000 f988 	bl	8004746 <_Bfree>
 8004436:	2f00      	cmp	r7, #0
 8004438:	f43f aea6 	beq.w	8004188 <_dtoa_r+0x688>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	b12b      	cbz	r3, 800444c <_dtoa_r+0x94c>
 8004440:	42bb      	cmp	r3, r7
 8004442:	d003      	beq.n	800444c <_dtoa_r+0x94c>
 8004444:	4619      	mov	r1, r3
 8004446:	4620      	mov	r0, r4
 8004448:	f000 f97d 	bl	8004746 <_Bfree>
 800444c:	4639      	mov	r1, r7
 800444e:	4620      	mov	r0, r4
 8004450:	f000 f979 	bl	8004746 <_Bfree>
 8004454:	e698      	b.n	8004188 <_dtoa_r+0x688>
 8004456:	2600      	movs	r6, #0
 8004458:	4637      	mov	r7, r6
 800445a:	e7e2      	b.n	8004422 <_dtoa_r+0x922>
 800445c:	46bb      	mov	fp, r7
 800445e:	4637      	mov	r7, r6
 8004460:	e595      	b.n	8003f8e <_dtoa_r+0x48e>
 8004462:	bf00      	nop
 8004464:	40240000 	.word	0x40240000
 8004468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800446a:	bb93      	cbnz	r3, 80044d2 <_dtoa_r+0x9d2>
 800446c:	9b03      	ldr	r3, [sp, #12]
 800446e:	9304      	str	r3, [sp, #16]
 8004470:	9d02      	ldr	r5, [sp, #8]
 8004472:	4631      	mov	r1, r6
 8004474:	4650      	mov	r0, sl
 8004476:	f7ff fab7 	bl	80039e8 <quorem>
 800447a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800447e:	f805 9b01 	strb.w	r9, [r5], #1
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	9a04      	ldr	r2, [sp, #16]
 8004486:	1aeb      	subs	r3, r5, r3
 8004488:	429a      	cmp	r2, r3
 800448a:	f300 80dc 	bgt.w	8004646 <_dtoa_r+0xb46>
 800448e:	9b02      	ldr	r3, [sp, #8]
 8004490:	2a01      	cmp	r2, #1
 8004492:	bfac      	ite	ge
 8004494:	189b      	addge	r3, r3, r2
 8004496:	3301      	addlt	r3, #1
 8004498:	4698      	mov	r8, r3
 800449a:	2300      	movs	r3, #0
 800449c:	9303      	str	r3, [sp, #12]
 800449e:	4651      	mov	r1, sl
 80044a0:	2201      	movs	r2, #1
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fad4 	bl	8004a50 <__lshift>
 80044a8:	4631      	mov	r1, r6
 80044aa:	4682      	mov	sl, r0
 80044ac:	f000 fb21 	bl	8004af2 <__mcmp>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	f300 808d 	bgt.w	80045d0 <_dtoa_r+0xad0>
 80044b6:	d103      	bne.n	80044c0 <_dtoa_r+0x9c0>
 80044b8:	f019 0f01 	tst.w	r9, #1
 80044bc:	f040 8088 	bne.w	80045d0 <_dtoa_r+0xad0>
 80044c0:	4645      	mov	r5, r8
 80044c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044c6:	2b30      	cmp	r3, #48	; 0x30
 80044c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80044cc:	d1af      	bne.n	800442e <_dtoa_r+0x92e>
 80044ce:	4615      	mov	r5, r2
 80044d0:	e7f7      	b.n	80044c2 <_dtoa_r+0x9c2>
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	dd05      	ble.n	80044e6 <_dtoa_r+0x9e6>
 80044da:	4639      	mov	r1, r7
 80044dc:	462a      	mov	r2, r5
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 fab6 	bl	8004a50 <__lshift>
 80044e4:	4607      	mov	r7, r0
 80044e6:	f1b8 0f00 	cmp.w	r8, #0
 80044ea:	d04c      	beq.n	8004586 <_dtoa_r+0xa86>
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4620      	mov	r0, r4
 80044f0:	f000 f8f5 	bl	80046de <_Balloc>
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	3202      	adds	r2, #2
 80044f8:	4605      	mov	r5, r0
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	f107 010c 	add.w	r1, r7, #12
 8004500:	300c      	adds	r0, #12
 8004502:	f000 f8e1 	bl	80046c8 <memcpy>
 8004506:	2201      	movs	r2, #1
 8004508:	4629      	mov	r1, r5
 800450a:	4620      	mov	r0, r4
 800450c:	f000 faa0 	bl	8004a50 <__lshift>
 8004510:	9b00      	ldr	r3, [sp, #0]
 8004512:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004516:	9703      	str	r7, [sp, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	4607      	mov	r7, r0
 800451e:	9305      	str	r3, [sp, #20]
 8004520:	4631      	mov	r1, r6
 8004522:	4650      	mov	r0, sl
 8004524:	f7ff fa60 	bl	80039e8 <quorem>
 8004528:	9903      	ldr	r1, [sp, #12]
 800452a:	4605      	mov	r5, r0
 800452c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004530:	4650      	mov	r0, sl
 8004532:	f000 fade 	bl	8004af2 <__mcmp>
 8004536:	463a      	mov	r2, r7
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	4631      	mov	r1, r6
 800453c:	4620      	mov	r0, r4
 800453e:	f000 faf2 	bl	8004b26 <__mdiff>
 8004542:	68c3      	ldr	r3, [r0, #12]
 8004544:	4602      	mov	r2, r0
 8004546:	bb03      	cbnz	r3, 800458a <_dtoa_r+0xa8a>
 8004548:	4601      	mov	r1, r0
 800454a:	9006      	str	r0, [sp, #24]
 800454c:	4650      	mov	r0, sl
 800454e:	f000 fad0 	bl	8004af2 <__mcmp>
 8004552:	9a06      	ldr	r2, [sp, #24]
 8004554:	4603      	mov	r3, r0
 8004556:	4611      	mov	r1, r2
 8004558:	4620      	mov	r0, r4
 800455a:	9306      	str	r3, [sp, #24]
 800455c:	f000 f8f3 	bl	8004746 <_Bfree>
 8004560:	9b06      	ldr	r3, [sp, #24]
 8004562:	b9a3      	cbnz	r3, 800458e <_dtoa_r+0xa8e>
 8004564:	9a07      	ldr	r2, [sp, #28]
 8004566:	b992      	cbnz	r2, 800458e <_dtoa_r+0xa8e>
 8004568:	9a05      	ldr	r2, [sp, #20]
 800456a:	b982      	cbnz	r2, 800458e <_dtoa_r+0xa8e>
 800456c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004570:	d029      	beq.n	80045c6 <_dtoa_r+0xac6>
 8004572:	9b00      	ldr	r3, [sp, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	dd01      	ble.n	800457c <_dtoa_r+0xa7c>
 8004578:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800457c:	f108 0501 	add.w	r5, r8, #1
 8004580:	f888 9000 	strb.w	r9, [r8]
 8004584:	e753      	b.n	800442e <_dtoa_r+0x92e>
 8004586:	4638      	mov	r0, r7
 8004588:	e7c2      	b.n	8004510 <_dtoa_r+0xa10>
 800458a:	2301      	movs	r3, #1
 800458c:	e7e3      	b.n	8004556 <_dtoa_r+0xa56>
 800458e:	9a00      	ldr	r2, [sp, #0]
 8004590:	2a00      	cmp	r2, #0
 8004592:	db04      	blt.n	800459e <_dtoa_r+0xa9e>
 8004594:	d125      	bne.n	80045e2 <_dtoa_r+0xae2>
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	bb1a      	cbnz	r2, 80045e2 <_dtoa_r+0xae2>
 800459a:	9a05      	ldr	r2, [sp, #20]
 800459c:	bb0a      	cbnz	r2, 80045e2 <_dtoa_r+0xae2>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	ddec      	ble.n	800457c <_dtoa_r+0xa7c>
 80045a2:	4651      	mov	r1, sl
 80045a4:	2201      	movs	r2, #1
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 fa52 	bl	8004a50 <__lshift>
 80045ac:	4631      	mov	r1, r6
 80045ae:	4682      	mov	sl, r0
 80045b0:	f000 fa9f 	bl	8004af2 <__mcmp>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	dc03      	bgt.n	80045c0 <_dtoa_r+0xac0>
 80045b8:	d1e0      	bne.n	800457c <_dtoa_r+0xa7c>
 80045ba:	f019 0f01 	tst.w	r9, #1
 80045be:	d0dd      	beq.n	800457c <_dtoa_r+0xa7c>
 80045c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045c4:	d1d8      	bne.n	8004578 <_dtoa_r+0xa78>
 80045c6:	2339      	movs	r3, #57	; 0x39
 80045c8:	f888 3000 	strb.w	r3, [r8]
 80045cc:	f108 0801 	add.w	r8, r8, #1
 80045d0:	4645      	mov	r5, r8
 80045d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045d6:	2b39      	cmp	r3, #57	; 0x39
 80045d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80045dc:	d03b      	beq.n	8004656 <_dtoa_r+0xb56>
 80045de:	3301      	adds	r3, #1
 80045e0:	e040      	b.n	8004664 <_dtoa_r+0xb64>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f108 0501 	add.w	r5, r8, #1
 80045e8:	dd05      	ble.n	80045f6 <_dtoa_r+0xaf6>
 80045ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80045ee:	d0ea      	beq.n	80045c6 <_dtoa_r+0xac6>
 80045f0:	f109 0901 	add.w	r9, r9, #1
 80045f4:	e7c4      	b.n	8004580 <_dtoa_r+0xa80>
 80045f6:	9b02      	ldr	r3, [sp, #8]
 80045f8:	9a04      	ldr	r2, [sp, #16]
 80045fa:	f805 9c01 	strb.w	r9, [r5, #-1]
 80045fe:	1aeb      	subs	r3, r5, r3
 8004600:	4293      	cmp	r3, r2
 8004602:	46a8      	mov	r8, r5
 8004604:	f43f af4b 	beq.w	800449e <_dtoa_r+0x99e>
 8004608:	4651      	mov	r1, sl
 800460a:	2300      	movs	r3, #0
 800460c:	220a      	movs	r2, #10
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f8b0 	bl	8004774 <__multadd>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	9903      	ldr	r1, [sp, #12]
 8004618:	42bb      	cmp	r3, r7
 800461a:	4682      	mov	sl, r0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 020a 	mov.w	r2, #10
 8004624:	4620      	mov	r0, r4
 8004626:	d104      	bne.n	8004632 <_dtoa_r+0xb32>
 8004628:	f000 f8a4 	bl	8004774 <__multadd>
 800462c:	9003      	str	r0, [sp, #12]
 800462e:	4607      	mov	r7, r0
 8004630:	e776      	b.n	8004520 <_dtoa_r+0xa20>
 8004632:	f000 f89f 	bl	8004774 <__multadd>
 8004636:	2300      	movs	r3, #0
 8004638:	9003      	str	r0, [sp, #12]
 800463a:	220a      	movs	r2, #10
 800463c:	4639      	mov	r1, r7
 800463e:	4620      	mov	r0, r4
 8004640:	f000 f898 	bl	8004774 <__multadd>
 8004644:	e7f3      	b.n	800462e <_dtoa_r+0xb2e>
 8004646:	4651      	mov	r1, sl
 8004648:	2300      	movs	r3, #0
 800464a:	220a      	movs	r2, #10
 800464c:	4620      	mov	r0, r4
 800464e:	f000 f891 	bl	8004774 <__multadd>
 8004652:	4682      	mov	sl, r0
 8004654:	e70d      	b.n	8004472 <_dtoa_r+0x972>
 8004656:	9b02      	ldr	r3, [sp, #8]
 8004658:	4293      	cmp	r3, r2
 800465a:	d105      	bne.n	8004668 <_dtoa_r+0xb68>
 800465c:	9a02      	ldr	r2, [sp, #8]
 800465e:	f10b 0b01 	add.w	fp, fp, #1
 8004662:	2331      	movs	r3, #49	; 0x31
 8004664:	7013      	strb	r3, [r2, #0]
 8004666:	e6e2      	b.n	800442e <_dtoa_r+0x92e>
 8004668:	4615      	mov	r5, r2
 800466a:	e7b2      	b.n	80045d2 <_dtoa_r+0xad2>
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <_dtoa_r+0xb94>)
 800466e:	f7ff baae 	b.w	8003bce <_dtoa_r+0xce>
 8004672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f aa88 	bne.w	8003b8a <_dtoa_r+0x8a>
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <_dtoa_r+0xb98>)
 800467c:	f7ff baa7 	b.w	8003bce <_dtoa_r+0xce>
 8004680:	9b04      	ldr	r3, [sp, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f73f aef4 	bgt.w	8004470 <_dtoa_r+0x970>
 8004688:	9b07      	ldr	r3, [sp, #28]
 800468a:	2b02      	cmp	r3, #2
 800468c:	f77f aef0 	ble.w	8004470 <_dtoa_r+0x970>
 8004690:	e6b8      	b.n	8004404 <_dtoa_r+0x904>
 8004692:	bf00      	nop
 8004694:	0800634c 	.word	0x0800634c
 8004698:	08006370 	.word	0x08006370

0800469c <_localeconv_r>:
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <_localeconv_r+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a18      	ldr	r0, [r3, #32]
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <_localeconv_r+0x18>)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	bf08      	it	eq
 80046a8:	4618      	moveq	r0, r3
 80046aa:	30f0      	adds	r0, #240	; 0xf0
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000000c 	.word	0x2000000c
 80046b4:	20000070 	.word	0x20000070

080046b8 <malloc>:
 80046b8:	4b02      	ldr	r3, [pc, #8]	; (80046c4 <malloc+0xc>)
 80046ba:	4601      	mov	r1, r0
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f000 bb3b 	b.w	8004d38 <_malloc_r>
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <memcpy>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	1e43      	subs	r3, r0, #1
 80046cc:	440a      	add	r2, r1
 80046ce:	4291      	cmp	r1, r2
 80046d0:	d100      	bne.n	80046d4 <memcpy+0xc>
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046dc:	e7f7      	b.n	80046ce <memcpy+0x6>

080046de <_Balloc>:
 80046de:	b570      	push	{r4, r5, r6, lr}
 80046e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046e2:	4604      	mov	r4, r0
 80046e4:	460e      	mov	r6, r1
 80046e6:	b93d      	cbnz	r5, 80046f8 <_Balloc+0x1a>
 80046e8:	2010      	movs	r0, #16
 80046ea:	f7ff ffe5 	bl	80046b8 <malloc>
 80046ee:	6260      	str	r0, [r4, #36]	; 0x24
 80046f0:	6045      	str	r5, [r0, #4]
 80046f2:	6085      	str	r5, [r0, #8]
 80046f4:	6005      	str	r5, [r0, #0]
 80046f6:	60c5      	str	r5, [r0, #12]
 80046f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80046fa:	68eb      	ldr	r3, [r5, #12]
 80046fc:	b183      	cbz	r3, 8004720 <_Balloc+0x42>
 80046fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004706:	b9b8      	cbnz	r0, 8004738 <_Balloc+0x5a>
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f506 	lsl.w	r5, r1, r6
 800470e:	1d6a      	adds	r2, r5, #5
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	4620      	mov	r0, r4
 8004714:	f000 fab4 	bl	8004c80 <_calloc_r>
 8004718:	b160      	cbz	r0, 8004734 <_Balloc+0x56>
 800471a:	6046      	str	r6, [r0, #4]
 800471c:	6085      	str	r5, [r0, #8]
 800471e:	e00e      	b.n	800473e <_Balloc+0x60>
 8004720:	2221      	movs	r2, #33	; 0x21
 8004722:	2104      	movs	r1, #4
 8004724:	4620      	mov	r0, r4
 8004726:	f000 faab 	bl	8004c80 <_calloc_r>
 800472a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800472c:	60e8      	str	r0, [r5, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e4      	bne.n	80046fe <_Balloc+0x20>
 8004734:	2000      	movs	r0, #0
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	6802      	ldr	r2, [r0, #0]
 800473a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800473e:	2300      	movs	r3, #0
 8004740:	6103      	str	r3, [r0, #16]
 8004742:	60c3      	str	r3, [r0, #12]
 8004744:	bd70      	pop	{r4, r5, r6, pc}

08004746 <_Bfree>:
 8004746:	b570      	push	{r4, r5, r6, lr}
 8004748:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800474a:	4606      	mov	r6, r0
 800474c:	460d      	mov	r5, r1
 800474e:	b93c      	cbnz	r4, 8004760 <_Bfree+0x1a>
 8004750:	2010      	movs	r0, #16
 8004752:	f7ff ffb1 	bl	80046b8 <malloc>
 8004756:	6270      	str	r0, [r6, #36]	; 0x24
 8004758:	6044      	str	r4, [r0, #4]
 800475a:	6084      	str	r4, [r0, #8]
 800475c:	6004      	str	r4, [r0, #0]
 800475e:	60c4      	str	r4, [r0, #12]
 8004760:	b13d      	cbz	r5, 8004772 <_Bfree+0x2c>
 8004762:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004764:	686a      	ldr	r2, [r5, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800476c:	6029      	str	r1, [r5, #0]
 800476e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004772:	bd70      	pop	{r4, r5, r6, pc}

08004774 <__multadd>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	690d      	ldr	r5, [r1, #16]
 800477a:	461f      	mov	r7, r3
 800477c:	4606      	mov	r6, r0
 800477e:	460c      	mov	r4, r1
 8004780:	f101 0e14 	add.w	lr, r1, #20
 8004784:	2300      	movs	r3, #0
 8004786:	f8de 0000 	ldr.w	r0, [lr]
 800478a:	b281      	uxth	r1, r0
 800478c:	fb02 7101 	mla	r1, r2, r1, r7
 8004790:	0c0f      	lsrs	r7, r1, #16
 8004792:	0c00      	lsrs	r0, r0, #16
 8004794:	fb02 7000 	mla	r0, r2, r0, r7
 8004798:	b289      	uxth	r1, r1
 800479a:	3301      	adds	r3, #1
 800479c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80047a0:	429d      	cmp	r5, r3
 80047a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80047a6:	f84e 1b04 	str.w	r1, [lr], #4
 80047aa:	dcec      	bgt.n	8004786 <__multadd+0x12>
 80047ac:	b1d7      	cbz	r7, 80047e4 <__multadd+0x70>
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	429d      	cmp	r5, r3
 80047b2:	db12      	blt.n	80047da <__multadd+0x66>
 80047b4:	6861      	ldr	r1, [r4, #4]
 80047b6:	4630      	mov	r0, r6
 80047b8:	3101      	adds	r1, #1
 80047ba:	f7ff ff90 	bl	80046de <_Balloc>
 80047be:	6922      	ldr	r2, [r4, #16]
 80047c0:	3202      	adds	r2, #2
 80047c2:	f104 010c 	add.w	r1, r4, #12
 80047c6:	4680      	mov	r8, r0
 80047c8:	0092      	lsls	r2, r2, #2
 80047ca:	300c      	adds	r0, #12
 80047cc:	f7ff ff7c 	bl	80046c8 <memcpy>
 80047d0:	4621      	mov	r1, r4
 80047d2:	4630      	mov	r0, r6
 80047d4:	f7ff ffb7 	bl	8004746 <_Bfree>
 80047d8:	4644      	mov	r4, r8
 80047da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047de:	3501      	adds	r5, #1
 80047e0:	615f      	str	r7, [r3, #20]
 80047e2:	6125      	str	r5, [r4, #16]
 80047e4:	4620      	mov	r0, r4
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047ea <__hi0bits>:
 80047ea:	0c02      	lsrs	r2, r0, #16
 80047ec:	0412      	lsls	r2, r2, #16
 80047ee:	4603      	mov	r3, r0
 80047f0:	b9b2      	cbnz	r2, 8004820 <__hi0bits+0x36>
 80047f2:	0403      	lsls	r3, r0, #16
 80047f4:	2010      	movs	r0, #16
 80047f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80047fa:	bf04      	itt	eq
 80047fc:	021b      	lsleq	r3, r3, #8
 80047fe:	3008      	addeq	r0, #8
 8004800:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004804:	bf04      	itt	eq
 8004806:	011b      	lsleq	r3, r3, #4
 8004808:	3004      	addeq	r0, #4
 800480a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800480e:	bf04      	itt	eq
 8004810:	009b      	lsleq	r3, r3, #2
 8004812:	3002      	addeq	r0, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	db06      	blt.n	8004826 <__hi0bits+0x3c>
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	d503      	bpl.n	8004824 <__hi0bits+0x3a>
 800481c:	3001      	adds	r0, #1
 800481e:	4770      	bx	lr
 8004820:	2000      	movs	r0, #0
 8004822:	e7e8      	b.n	80047f6 <__hi0bits+0xc>
 8004824:	2020      	movs	r0, #32
 8004826:	4770      	bx	lr

08004828 <__lo0bits>:
 8004828:	6803      	ldr	r3, [r0, #0]
 800482a:	f013 0207 	ands.w	r2, r3, #7
 800482e:	4601      	mov	r1, r0
 8004830:	d00b      	beq.n	800484a <__lo0bits+0x22>
 8004832:	07da      	lsls	r2, r3, #31
 8004834:	d423      	bmi.n	800487e <__lo0bits+0x56>
 8004836:	0798      	lsls	r0, r3, #30
 8004838:	bf49      	itett	mi
 800483a:	085b      	lsrmi	r3, r3, #1
 800483c:	089b      	lsrpl	r3, r3, #2
 800483e:	2001      	movmi	r0, #1
 8004840:	600b      	strmi	r3, [r1, #0]
 8004842:	bf5c      	itt	pl
 8004844:	600b      	strpl	r3, [r1, #0]
 8004846:	2002      	movpl	r0, #2
 8004848:	4770      	bx	lr
 800484a:	b298      	uxth	r0, r3
 800484c:	b9a8      	cbnz	r0, 800487a <__lo0bits+0x52>
 800484e:	0c1b      	lsrs	r3, r3, #16
 8004850:	2010      	movs	r0, #16
 8004852:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004856:	bf04      	itt	eq
 8004858:	0a1b      	lsreq	r3, r3, #8
 800485a:	3008      	addeq	r0, #8
 800485c:	071a      	lsls	r2, r3, #28
 800485e:	bf04      	itt	eq
 8004860:	091b      	lsreq	r3, r3, #4
 8004862:	3004      	addeq	r0, #4
 8004864:	079a      	lsls	r2, r3, #30
 8004866:	bf04      	itt	eq
 8004868:	089b      	lsreq	r3, r3, #2
 800486a:	3002      	addeq	r0, #2
 800486c:	07da      	lsls	r2, r3, #31
 800486e:	d402      	bmi.n	8004876 <__lo0bits+0x4e>
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	d006      	beq.n	8004882 <__lo0bits+0x5a>
 8004874:	3001      	adds	r0, #1
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	4770      	bx	lr
 800487a:	4610      	mov	r0, r2
 800487c:	e7e9      	b.n	8004852 <__lo0bits+0x2a>
 800487e:	2000      	movs	r0, #0
 8004880:	4770      	bx	lr
 8004882:	2020      	movs	r0, #32
 8004884:	4770      	bx	lr

08004886 <__i2b>:
 8004886:	b510      	push	{r4, lr}
 8004888:	460c      	mov	r4, r1
 800488a:	2101      	movs	r1, #1
 800488c:	f7ff ff27 	bl	80046de <_Balloc>
 8004890:	2201      	movs	r2, #1
 8004892:	6144      	str	r4, [r0, #20]
 8004894:	6102      	str	r2, [r0, #16]
 8004896:	bd10      	pop	{r4, pc}

08004898 <__multiply>:
 8004898:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4614      	mov	r4, r2
 800489e:	690a      	ldr	r2, [r1, #16]
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bfb8      	it	lt
 80048a6:	460b      	movlt	r3, r1
 80048a8:	4689      	mov	r9, r1
 80048aa:	bfbc      	itt	lt
 80048ac:	46a1      	movlt	r9, r4
 80048ae:	461c      	movlt	r4, r3
 80048b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80048b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80048b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80048bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80048c0:	eb07 060a 	add.w	r6, r7, sl
 80048c4:	429e      	cmp	r6, r3
 80048c6:	bfc8      	it	gt
 80048c8:	3101      	addgt	r1, #1
 80048ca:	f7ff ff08 	bl	80046de <_Balloc>
 80048ce:	f100 0514 	add.w	r5, r0, #20
 80048d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80048d6:	462b      	mov	r3, r5
 80048d8:	2200      	movs	r2, #0
 80048da:	4543      	cmp	r3, r8
 80048dc:	d316      	bcc.n	800490c <__multiply+0x74>
 80048de:	f104 0214 	add.w	r2, r4, #20
 80048e2:	f109 0114 	add.w	r1, r9, #20
 80048e6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80048ea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9c01      	ldr	r4, [sp, #4]
 80048f2:	4294      	cmp	r4, r2
 80048f4:	4613      	mov	r3, r2
 80048f6:	d80c      	bhi.n	8004912 <__multiply+0x7a>
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	dd03      	ble.n	8004904 <__multiply+0x6c>
 80048fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004900:	2b00      	cmp	r3, #0
 8004902:	d054      	beq.n	80049ae <__multiply+0x116>
 8004904:	6106      	str	r6, [r0, #16]
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	f843 2b04 	str.w	r2, [r3], #4
 8004910:	e7e3      	b.n	80048da <__multiply+0x42>
 8004912:	f8b3 a000 	ldrh.w	sl, [r3]
 8004916:	3204      	adds	r2, #4
 8004918:	f1ba 0f00 	cmp.w	sl, #0
 800491c:	d020      	beq.n	8004960 <__multiply+0xc8>
 800491e:	46ae      	mov	lr, r5
 8004920:	4689      	mov	r9, r1
 8004922:	f04f 0c00 	mov.w	ip, #0
 8004926:	f859 4b04 	ldr.w	r4, [r9], #4
 800492a:	f8be b000 	ldrh.w	fp, [lr]
 800492e:	b2a3      	uxth	r3, r4
 8004930:	fb0a b303 	mla	r3, sl, r3, fp
 8004934:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004938:	f8de 4000 	ldr.w	r4, [lr]
 800493c:	4463      	add	r3, ip
 800493e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004942:	fb0a c40b 	mla	r4, sl, fp, ip
 8004946:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800494a:	b29b      	uxth	r3, r3
 800494c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004950:	454f      	cmp	r7, r9
 8004952:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004956:	f84e 3b04 	str.w	r3, [lr], #4
 800495a:	d8e4      	bhi.n	8004926 <__multiply+0x8e>
 800495c:	f8ce c000 	str.w	ip, [lr]
 8004960:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004964:	f1b9 0f00 	cmp.w	r9, #0
 8004968:	d01f      	beq.n	80049aa <__multiply+0x112>
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	46ae      	mov	lr, r5
 800496e:	468c      	mov	ip, r1
 8004970:	f04f 0a00 	mov.w	sl, #0
 8004974:	f8bc 4000 	ldrh.w	r4, [ip]
 8004978:	f8be b002 	ldrh.w	fp, [lr, #2]
 800497c:	fb09 b404 	mla	r4, r9, r4, fp
 8004980:	44a2      	add	sl, r4
 8004982:	b29b      	uxth	r3, r3
 8004984:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004988:	f84e 3b04 	str.w	r3, [lr], #4
 800498c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004990:	f8be 4000 	ldrh.w	r4, [lr]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	fb09 4303 	mla	r3, r9, r3, r4
 800499a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800499e:	4567      	cmp	r7, ip
 80049a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049a4:	d8e6      	bhi.n	8004974 <__multiply+0xdc>
 80049a6:	f8ce 3000 	str.w	r3, [lr]
 80049aa:	3504      	adds	r5, #4
 80049ac:	e7a0      	b.n	80048f0 <__multiply+0x58>
 80049ae:	3e01      	subs	r6, #1
 80049b0:	e7a2      	b.n	80048f8 <__multiply+0x60>
	...

080049b4 <__pow5mult>:
 80049b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b8:	4615      	mov	r5, r2
 80049ba:	f012 0203 	ands.w	r2, r2, #3
 80049be:	4606      	mov	r6, r0
 80049c0:	460f      	mov	r7, r1
 80049c2:	d007      	beq.n	80049d4 <__pow5mult+0x20>
 80049c4:	3a01      	subs	r2, #1
 80049c6:	4c21      	ldr	r4, [pc, #132]	; (8004a4c <__pow5mult+0x98>)
 80049c8:	2300      	movs	r3, #0
 80049ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049ce:	f7ff fed1 	bl	8004774 <__multadd>
 80049d2:	4607      	mov	r7, r0
 80049d4:	10ad      	asrs	r5, r5, #2
 80049d6:	d035      	beq.n	8004a44 <__pow5mult+0x90>
 80049d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80049da:	b93c      	cbnz	r4, 80049ec <__pow5mult+0x38>
 80049dc:	2010      	movs	r0, #16
 80049de:	f7ff fe6b 	bl	80046b8 <malloc>
 80049e2:	6270      	str	r0, [r6, #36]	; 0x24
 80049e4:	6044      	str	r4, [r0, #4]
 80049e6:	6084      	str	r4, [r0, #8]
 80049e8:	6004      	str	r4, [r0, #0]
 80049ea:	60c4      	str	r4, [r0, #12]
 80049ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80049f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80049f4:	b94c      	cbnz	r4, 8004a0a <__pow5mult+0x56>
 80049f6:	f240 2171 	movw	r1, #625	; 0x271
 80049fa:	4630      	mov	r0, r6
 80049fc:	f7ff ff43 	bl	8004886 <__i2b>
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a06:	4604      	mov	r4, r0
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	f04f 0800 	mov.w	r8, #0
 8004a0e:	07eb      	lsls	r3, r5, #31
 8004a10:	d50a      	bpl.n	8004a28 <__pow5mult+0x74>
 8004a12:	4639      	mov	r1, r7
 8004a14:	4622      	mov	r2, r4
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7ff ff3e 	bl	8004898 <__multiply>
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4681      	mov	r9, r0
 8004a20:	4630      	mov	r0, r6
 8004a22:	f7ff fe90 	bl	8004746 <_Bfree>
 8004a26:	464f      	mov	r7, r9
 8004a28:	106d      	asrs	r5, r5, #1
 8004a2a:	d00b      	beq.n	8004a44 <__pow5mult+0x90>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	b938      	cbnz	r0, 8004a40 <__pow5mult+0x8c>
 8004a30:	4622      	mov	r2, r4
 8004a32:	4621      	mov	r1, r4
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff ff2f 	bl	8004898 <__multiply>
 8004a3a:	6020      	str	r0, [r4, #0]
 8004a3c:	f8c0 8000 	str.w	r8, [r0]
 8004a40:	4604      	mov	r4, r0
 8004a42:	e7e4      	b.n	8004a0e <__pow5mult+0x5a>
 8004a44:	4638      	mov	r0, r7
 8004a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08006470 	.word	0x08006470

08004a50 <__lshift>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	460c      	mov	r4, r1
 8004a56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	6849      	ldr	r1, [r1, #4]
 8004a5e:	eb0a 0903 	add.w	r9, sl, r3
 8004a62:	68a3      	ldr	r3, [r4, #8]
 8004a64:	4607      	mov	r7, r0
 8004a66:	4616      	mov	r6, r2
 8004a68:	f109 0501 	add.w	r5, r9, #1
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	db31      	blt.n	8004ad4 <__lshift+0x84>
 8004a70:	4638      	mov	r0, r7
 8004a72:	f7ff fe34 	bl	80046de <_Balloc>
 8004a76:	2200      	movs	r2, #0
 8004a78:	4680      	mov	r8, r0
 8004a7a:	f100 0314 	add.w	r3, r0, #20
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4552      	cmp	r2, sl
 8004a82:	db2a      	blt.n	8004ada <__lshift+0x8a>
 8004a84:	6920      	ldr	r0, [r4, #16]
 8004a86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a8a:	f104 0114 	add.w	r1, r4, #20
 8004a8e:	f016 021f 	ands.w	r2, r6, #31
 8004a92:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004a96:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004a9a:	d022      	beq.n	8004ae2 <__lshift+0x92>
 8004a9c:	f1c2 0c20 	rsb	ip, r2, #32
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	680e      	ldr	r6, [r1, #0]
 8004aa4:	4096      	lsls	r6, r2
 8004aa6:	4330      	orrs	r0, r6
 8004aa8:	f843 0b04 	str.w	r0, [r3], #4
 8004aac:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ab0:	458e      	cmp	lr, r1
 8004ab2:	fa20 f00c 	lsr.w	r0, r0, ip
 8004ab6:	d8f4      	bhi.n	8004aa2 <__lshift+0x52>
 8004ab8:	6018      	str	r0, [r3, #0]
 8004aba:	b108      	cbz	r0, 8004ac0 <__lshift+0x70>
 8004abc:	f109 0502 	add.w	r5, r9, #2
 8004ac0:	3d01      	subs	r5, #1
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f8c8 5010 	str.w	r5, [r8, #16]
 8004ac8:	4621      	mov	r1, r4
 8004aca:	f7ff fe3c 	bl	8004746 <_Bfree>
 8004ace:	4640      	mov	r0, r8
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	3101      	adds	r1, #1
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	e7c8      	b.n	8004a6c <__lshift+0x1c>
 8004ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ade:	3201      	adds	r2, #1
 8004ae0:	e7ce      	b.n	8004a80 <__lshift+0x30>
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	f851 2b04 	ldr.w	r2, [r1], #4
 8004ae8:	f843 2f04 	str.w	r2, [r3, #4]!
 8004aec:	458e      	cmp	lr, r1
 8004aee:	d8f9      	bhi.n	8004ae4 <__lshift+0x94>
 8004af0:	e7e6      	b.n	8004ac0 <__lshift+0x70>

08004af2 <__mcmp>:
 8004af2:	6903      	ldr	r3, [r0, #16]
 8004af4:	690a      	ldr	r2, [r1, #16]
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	b530      	push	{r4, r5, lr}
 8004afa:	d10c      	bne.n	8004b16 <__mcmp+0x24>
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	3014      	adds	r0, #20
 8004b00:	3114      	adds	r1, #20
 8004b02:	1884      	adds	r4, r0, r2
 8004b04:	4411      	add	r1, r2
 8004b06:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b0e:	4295      	cmp	r5, r2
 8004b10:	d003      	beq.n	8004b1a <__mcmp+0x28>
 8004b12:	d305      	bcc.n	8004b20 <__mcmp+0x2e>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	bd30      	pop	{r4, r5, pc}
 8004b1a:	42a0      	cmp	r0, r4
 8004b1c:	d3f3      	bcc.n	8004b06 <__mcmp+0x14>
 8004b1e:	e7fa      	b.n	8004b16 <__mcmp+0x24>
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	e7f7      	b.n	8004b16 <__mcmp+0x24>

08004b26 <__mdiff>:
 8004b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2a:	460d      	mov	r5, r1
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4628      	mov	r0, r5
 8004b32:	4614      	mov	r4, r2
 8004b34:	f7ff ffdd 	bl	8004af2 <__mcmp>
 8004b38:	1e06      	subs	r6, r0, #0
 8004b3a:	d108      	bne.n	8004b4e <__mdiff+0x28>
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4638      	mov	r0, r7
 8004b40:	f7ff fdcd 	bl	80046de <_Balloc>
 8004b44:	2301      	movs	r3, #1
 8004b46:	6103      	str	r3, [r0, #16]
 8004b48:	6146      	str	r6, [r0, #20]
 8004b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4e:	bfa4      	itt	ge
 8004b50:	4623      	movge	r3, r4
 8004b52:	462c      	movge	r4, r5
 8004b54:	4638      	mov	r0, r7
 8004b56:	6861      	ldr	r1, [r4, #4]
 8004b58:	bfa6      	itte	ge
 8004b5a:	461d      	movge	r5, r3
 8004b5c:	2600      	movge	r6, #0
 8004b5e:	2601      	movlt	r6, #1
 8004b60:	f7ff fdbd 	bl	80046de <_Balloc>
 8004b64:	692b      	ldr	r3, [r5, #16]
 8004b66:	60c6      	str	r6, [r0, #12]
 8004b68:	6926      	ldr	r6, [r4, #16]
 8004b6a:	f105 0914 	add.w	r9, r5, #20
 8004b6e:	f104 0214 	add.w	r2, r4, #20
 8004b72:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004b76:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004b7a:	f100 0514 	add.w	r5, r0, #20
 8004b7e:	f04f 0c00 	mov.w	ip, #0
 8004b82:	f852 ab04 	ldr.w	sl, [r2], #4
 8004b86:	f859 4b04 	ldr.w	r4, [r9], #4
 8004b8a:	fa1c f18a 	uxtah	r1, ip, sl
 8004b8e:	b2a3      	uxth	r3, r4
 8004b90:	1ac9      	subs	r1, r1, r3
 8004b92:	0c23      	lsrs	r3, r4, #16
 8004b94:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004b98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004b9c:	b289      	uxth	r1, r1
 8004b9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ba2:	45c8      	cmp	r8, r9
 8004ba4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ba8:	4696      	mov	lr, r2
 8004baa:	f845 3b04 	str.w	r3, [r5], #4
 8004bae:	d8e8      	bhi.n	8004b82 <__mdiff+0x5c>
 8004bb0:	45be      	cmp	lr, r7
 8004bb2:	d305      	bcc.n	8004bc0 <__mdiff+0x9a>
 8004bb4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004bb8:	b18b      	cbz	r3, 8004bde <__mdiff+0xb8>
 8004bba:	6106      	str	r6, [r0, #16]
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004bc4:	fa1c f381 	uxtah	r3, ip, r1
 8004bc8:	141a      	asrs	r2, r3, #16
 8004bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bd8:	f845 3b04 	str.w	r3, [r5], #4
 8004bdc:	e7e8      	b.n	8004bb0 <__mdiff+0x8a>
 8004bde:	3e01      	subs	r6, #1
 8004be0:	e7e8      	b.n	8004bb4 <__mdiff+0x8e>

08004be2 <__d2b>:
 8004be2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004be6:	460e      	mov	r6, r1
 8004be8:	2101      	movs	r1, #1
 8004bea:	ec59 8b10 	vmov	r8, r9, d0
 8004bee:	4615      	mov	r5, r2
 8004bf0:	f7ff fd75 	bl	80046de <_Balloc>
 8004bf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bfe:	bb34      	cbnz	r4, 8004c4e <__d2b+0x6c>
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	f1b8 0f00 	cmp.w	r8, #0
 8004c06:	d027      	beq.n	8004c58 <__d2b+0x76>
 8004c08:	a802      	add	r0, sp, #8
 8004c0a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004c0e:	f7ff fe0b 	bl	8004828 <__lo0bits>
 8004c12:	9900      	ldr	r1, [sp, #0]
 8004c14:	b1f0      	cbz	r0, 8004c54 <__d2b+0x72>
 8004c16:	9a01      	ldr	r2, [sp, #4]
 8004c18:	f1c0 0320 	rsb	r3, r0, #32
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	430b      	orrs	r3, r1
 8004c22:	40c2      	lsrs	r2, r0
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	9201      	str	r2, [sp, #4]
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2102      	movne	r1, #2
 8004c32:	2101      	moveq	r1, #1
 8004c34:	6139      	str	r1, [r7, #16]
 8004c36:	b1c4      	cbz	r4, 8004c6a <__d2b+0x88>
 8004c38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004c3c:	4404      	add	r4, r0
 8004c3e:	6034      	str	r4, [r6, #0]
 8004c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c44:	6028      	str	r0, [r5, #0]
 8004c46:	4638      	mov	r0, r7
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	e7d5      	b.n	8004c00 <__d2b+0x1e>
 8004c54:	6179      	str	r1, [r7, #20]
 8004c56:	e7e7      	b.n	8004c28 <__d2b+0x46>
 8004c58:	a801      	add	r0, sp, #4
 8004c5a:	f7ff fde5 	bl	8004828 <__lo0bits>
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	2101      	movs	r1, #1
 8004c64:	6139      	str	r1, [r7, #16]
 8004c66:	3020      	adds	r0, #32
 8004c68:	e7e5      	b.n	8004c36 <__d2b+0x54>
 8004c6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004c6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004c72:	6030      	str	r0, [r6, #0]
 8004c74:	6918      	ldr	r0, [r3, #16]
 8004c76:	f7ff fdb8 	bl	80047ea <__hi0bits>
 8004c7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004c7e:	e7e1      	b.n	8004c44 <__d2b+0x62>

08004c80 <_calloc_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	fb02 f401 	mul.w	r4, r2, r1
 8004c86:	4621      	mov	r1, r4
 8004c88:	f000 f856 	bl	8004d38 <_malloc_r>
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	b118      	cbz	r0, 8004c98 <_calloc_r+0x18>
 8004c90:	4622      	mov	r2, r4
 8004c92:	2100      	movs	r1, #0
 8004c94:	f7fe fa10 	bl	80030b8 <memset>
 8004c98:	4628      	mov	r0, r5
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}

08004c9c <_free_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4605      	mov	r5, r0
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	d045      	beq.n	8004d30 <_free_r+0x94>
 8004ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca8:	1f0c      	subs	r4, r1, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bfb8      	it	lt
 8004cae:	18e4      	addlt	r4, r4, r3
 8004cb0:	f000 fa2c 	bl	800510c <__malloc_lock>
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <_free_r+0x98>)
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	4610      	mov	r0, r2
 8004cba:	b933      	cbnz	r3, 8004cca <_free_r+0x2e>
 8004cbc:	6063      	str	r3, [r4, #4]
 8004cbe:	6014      	str	r4, [r2, #0]
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cc6:	f000 ba22 	b.w	800510e <__malloc_unlock>
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	d90c      	bls.n	8004ce8 <_free_r+0x4c>
 8004cce:	6821      	ldr	r1, [r4, #0]
 8004cd0:	1862      	adds	r2, r4, r1
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bf04      	itt	eq
 8004cd6:	681a      	ldreq	r2, [r3, #0]
 8004cd8:	685b      	ldreq	r3, [r3, #4]
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	bf04      	itt	eq
 8004cde:	1852      	addeq	r2, r2, r1
 8004ce0:	6022      	streq	r2, [r4, #0]
 8004ce2:	6004      	str	r4, [r0, #0]
 8004ce4:	e7ec      	b.n	8004cc0 <_free_r+0x24>
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	b10a      	cbz	r2, 8004cf0 <_free_r+0x54>
 8004cec:	42a2      	cmp	r2, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x4a>
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	1858      	adds	r0, r3, r1
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x74>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	1858      	adds	r0, r3, r1
 8004cfe:	4282      	cmp	r2, r0
 8004d00:	6019      	str	r1, [r3, #0]
 8004d02:	d1dd      	bne.n	8004cc0 <_free_r+0x24>
 8004d04:	6810      	ldr	r0, [r2, #0]
 8004d06:	6852      	ldr	r2, [r2, #4]
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	4401      	add	r1, r0
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	e7d7      	b.n	8004cc0 <_free_r+0x24>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x7c>
 8004d12:	230c      	movs	r3, #12
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	e7d3      	b.n	8004cc0 <_free_r+0x24>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6811      	ldreq	r1, [r2, #0]
 8004d22:	6852      	ldreq	r2, [r2, #4]
 8004d24:	6062      	str	r2, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1809      	addeq	r1, r1, r0
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	605c      	str	r4, [r3, #4]
 8004d2e:	e7c7      	b.n	8004cc0 <_free_r+0x24>
 8004d30:	bd38      	pop	{r3, r4, r5, pc}
 8004d32:	bf00      	nop
 8004d34:	20000200 	.word	0x20000200

08004d38 <_malloc_r>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	1ccd      	adds	r5, r1, #3
 8004d3c:	f025 0503 	bic.w	r5, r5, #3
 8004d40:	3508      	adds	r5, #8
 8004d42:	2d0c      	cmp	r5, #12
 8004d44:	bf38      	it	cc
 8004d46:	250c      	movcc	r5, #12
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	db01      	blt.n	8004d52 <_malloc_r+0x1a>
 8004d4e:	42a9      	cmp	r1, r5
 8004d50:	d903      	bls.n	8004d5a <_malloc_r+0x22>
 8004d52:	230c      	movs	r3, #12
 8004d54:	6033      	str	r3, [r6, #0]
 8004d56:	2000      	movs	r0, #0
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	f000 f9d7 	bl	800510c <__malloc_lock>
 8004d5e:	4a23      	ldr	r2, [pc, #140]	; (8004dec <_malloc_r+0xb4>)
 8004d60:	6814      	ldr	r4, [r2, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	b991      	cbnz	r1, 8004d8c <_malloc_r+0x54>
 8004d66:	4c22      	ldr	r4, [pc, #136]	; (8004df0 <_malloc_r+0xb8>)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	b91b      	cbnz	r3, 8004d74 <_malloc_r+0x3c>
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f000 f991 	bl	8005094 <_sbrk_r>
 8004d72:	6020      	str	r0, [r4, #0]
 8004d74:	4629      	mov	r1, r5
 8004d76:	4630      	mov	r0, r6
 8004d78:	f000 f98c 	bl	8005094 <_sbrk_r>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d126      	bne.n	8004dce <_malloc_r+0x96>
 8004d80:	230c      	movs	r3, #12
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f9c2 	bl	800510e <__malloc_unlock>
 8004d8a:	e7e4      	b.n	8004d56 <_malloc_r+0x1e>
 8004d8c:	680b      	ldr	r3, [r1, #0]
 8004d8e:	1b5b      	subs	r3, r3, r5
 8004d90:	d41a      	bmi.n	8004dc8 <_malloc_r+0x90>
 8004d92:	2b0b      	cmp	r3, #11
 8004d94:	d90f      	bls.n	8004db6 <_malloc_r+0x7e>
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	50cd      	str	r5, [r1, r3]
 8004d9a:	18cc      	adds	r4, r1, r3
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 f9b6 	bl	800510e <__malloc_unlock>
 8004da2:	f104 000b 	add.w	r0, r4, #11
 8004da6:	1d23      	adds	r3, r4, #4
 8004da8:	f020 0007 	bic.w	r0, r0, #7
 8004dac:	1ac3      	subs	r3, r0, r3
 8004dae:	d01b      	beq.n	8004de8 <_malloc_r+0xb0>
 8004db0:	425a      	negs	r2, r3
 8004db2:	50e2      	str	r2, [r4, r3]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	428c      	cmp	r4, r1
 8004db8:	bf0d      	iteet	eq
 8004dba:	6863      	ldreq	r3, [r4, #4]
 8004dbc:	684b      	ldrne	r3, [r1, #4]
 8004dbe:	6063      	strne	r3, [r4, #4]
 8004dc0:	6013      	streq	r3, [r2, #0]
 8004dc2:	bf18      	it	ne
 8004dc4:	460c      	movne	r4, r1
 8004dc6:	e7e9      	b.n	8004d9c <_malloc_r+0x64>
 8004dc8:	460c      	mov	r4, r1
 8004dca:	6849      	ldr	r1, [r1, #4]
 8004dcc:	e7ca      	b.n	8004d64 <_malloc_r+0x2c>
 8004dce:	1cc4      	adds	r4, r0, #3
 8004dd0:	f024 0403 	bic.w	r4, r4, #3
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d005      	beq.n	8004de4 <_malloc_r+0xac>
 8004dd8:	1a21      	subs	r1, r4, r0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 f95a 	bl	8005094 <_sbrk_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d0cd      	beq.n	8004d80 <_malloc_r+0x48>
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	e7d9      	b.n	8004d9c <_malloc_r+0x64>
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	bf00      	nop
 8004dec:	20000200 	.word	0x20000200
 8004df0:	20000204 	.word	0x20000204

08004df4 <__ssputs_r>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	688e      	ldr	r6, [r1, #8]
 8004dfa:	429e      	cmp	r6, r3
 8004dfc:	4682      	mov	sl, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4691      	mov	r9, r2
 8004e02:	4698      	mov	r8, r3
 8004e04:	d835      	bhi.n	8004e72 <__ssputs_r+0x7e>
 8004e06:	898a      	ldrh	r2, [r1, #12]
 8004e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e0c:	d031      	beq.n	8004e72 <__ssputs_r+0x7e>
 8004e0e:	6825      	ldr	r5, [r4, #0]
 8004e10:	6909      	ldr	r1, [r1, #16]
 8004e12:	1a6f      	subs	r7, r5, r1
 8004e14:	6965      	ldr	r5, [r4, #20]
 8004e16:	2302      	movs	r3, #2
 8004e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e20:	f108 0301 	add.w	r3, r8, #1
 8004e24:	443b      	add	r3, r7
 8004e26:	429d      	cmp	r5, r3
 8004e28:	bf38      	it	cc
 8004e2a:	461d      	movcc	r5, r3
 8004e2c:	0553      	lsls	r3, r2, #21
 8004e2e:	d531      	bpl.n	8004e94 <__ssputs_r+0xa0>
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7ff ff81 	bl	8004d38 <_malloc_r>
 8004e36:	4606      	mov	r6, r0
 8004e38:	b950      	cbnz	r0, 8004e50 <__ssputs_r+0x5c>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	f8ca 3000 	str.w	r3, [sl]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e50:	463a      	mov	r2, r7
 8004e52:	6921      	ldr	r1, [r4, #16]
 8004e54:	f7ff fc38 	bl	80046c8 <memcpy>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6126      	str	r6, [r4, #16]
 8004e66:	6165      	str	r5, [r4, #20]
 8004e68:	443e      	add	r6, r7
 8004e6a:	1bed      	subs	r5, r5, r7
 8004e6c:	6026      	str	r6, [r4, #0]
 8004e6e:	60a5      	str	r5, [r4, #8]
 8004e70:	4646      	mov	r6, r8
 8004e72:	4546      	cmp	r6, r8
 8004e74:	bf28      	it	cs
 8004e76:	4646      	movcs	r6, r8
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	6820      	ldr	r0, [r4, #0]
 8004e7e:	f000 f92b 	bl	80050d8 <memmove>
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	60a3      	str	r3, [r4, #8]
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	441e      	add	r6, r3
 8004e8c:	6026      	str	r6, [r4, #0]
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e94:	462a      	mov	r2, r5
 8004e96:	f000 f93b 	bl	8005110 <_realloc_r>
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1e1      	bne.n	8004e64 <__ssputs_r+0x70>
 8004ea0:	6921      	ldr	r1, [r4, #16]
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	f7ff fefa 	bl	8004c9c <_free_r>
 8004ea8:	e7c7      	b.n	8004e3a <__ssputs_r+0x46>
	...

08004eac <_svfiprintf_r>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	b09d      	sub	sp, #116	; 0x74
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	9303      	str	r3, [sp, #12]
 8004eb6:	898b      	ldrh	r3, [r1, #12]
 8004eb8:	061c      	lsls	r4, r3, #24
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	d50f      	bpl.n	8004ee0 <_svfiprintf_r+0x34>
 8004ec0:	690b      	ldr	r3, [r1, #16]
 8004ec2:	b96b      	cbnz	r3, 8004ee0 <_svfiprintf_r+0x34>
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	f7ff ff37 	bl	8004d38 <_malloc_r>
 8004eca:	6028      	str	r0, [r5, #0]
 8004ecc:	6128      	str	r0, [r5, #16]
 8004ece:	b928      	cbnz	r0, 8004edc <_svfiprintf_r+0x30>
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	f8c8 3000 	str.w	r3, [r8]
 8004ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eda:	e0c5      	b.n	8005068 <_svfiprintf_r+0x1bc>
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	616b      	str	r3, [r5, #20]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eea:	2330      	movs	r3, #48	; 0x30
 8004eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef0:	f04f 0b01 	mov.w	fp, #1
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	463c      	mov	r4, r7
 8004ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d13c      	bne.n	8004f7a <_svfiprintf_r+0xce>
 8004f00:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f04:	d00b      	beq.n	8004f1e <_svfiprintf_r+0x72>
 8004f06:	4653      	mov	r3, sl
 8004f08:	4632      	mov	r2, r6
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	f7ff ff71 	bl	8004df4 <__ssputs_r>
 8004f12:	3001      	adds	r0, #1
 8004f14:	f000 80a3 	beq.w	800505e <_svfiprintf_r+0x1b2>
 8004f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1a:	4453      	add	r3, sl
 8004f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f1e:	783b      	ldrb	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 809c 	beq.w	800505e <_svfiprintf_r+0x1b2>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	9304      	str	r3, [sp, #16]
 8004f2e:	9307      	str	r3, [sp, #28]
 8004f30:	9205      	str	r2, [sp, #20]
 8004f32:	9306      	str	r3, [sp, #24]
 8004f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f38:	931a      	str	r3, [sp, #104]	; 0x68
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	4850      	ldr	r0, [pc, #320]	; (8005080 <_svfiprintf_r+0x1d4>)
 8004f40:	f7fb f94e 	bl	80001e0 <memchr>
 8004f44:	1c67      	adds	r7, r4, #1
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	b9d8      	cbnz	r0, 8004f82 <_svfiprintf_r+0xd6>
 8004f4a:	06d9      	lsls	r1, r3, #27
 8004f4c:	bf44      	itt	mi
 8004f4e:	2220      	movmi	r2, #32
 8004f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f54:	071a      	lsls	r2, r3, #28
 8004f56:	bf44      	itt	mi
 8004f58:	222b      	movmi	r2, #43	; 0x2b
 8004f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f5e:	7822      	ldrb	r2, [r4, #0]
 8004f60:	2a2a      	cmp	r2, #42	; 0x2a
 8004f62:	d016      	beq.n	8004f92 <_svfiprintf_r+0xe6>
 8004f64:	9a07      	ldr	r2, [sp, #28]
 8004f66:	2100      	movs	r1, #0
 8004f68:	200a      	movs	r0, #10
 8004f6a:	4627      	mov	r7, r4
 8004f6c:	3401      	adds	r4, #1
 8004f6e:	783b      	ldrb	r3, [r7, #0]
 8004f70:	3b30      	subs	r3, #48	; 0x30
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	d951      	bls.n	800501a <_svfiprintf_r+0x16e>
 8004f76:	b1c9      	cbz	r1, 8004fac <_svfiprintf_r+0x100>
 8004f78:	e011      	b.n	8004f9e <_svfiprintf_r+0xf2>
 8004f7a:	2b25      	cmp	r3, #37	; 0x25
 8004f7c:	d0c0      	beq.n	8004f00 <_svfiprintf_r+0x54>
 8004f7e:	4627      	mov	r7, r4
 8004f80:	e7b9      	b.n	8004ef6 <_svfiprintf_r+0x4a>
 8004f82:	4a3f      	ldr	r2, [pc, #252]	; (8005080 <_svfiprintf_r+0x1d4>)
 8004f84:	1a80      	subs	r0, r0, r2
 8004f86:	fa0b f000 	lsl.w	r0, fp, r0
 8004f8a:	4318      	orrs	r0, r3
 8004f8c:	9004      	str	r0, [sp, #16]
 8004f8e:	463c      	mov	r4, r7
 8004f90:	e7d3      	b.n	8004f3a <_svfiprintf_r+0x8e>
 8004f92:	9a03      	ldr	r2, [sp, #12]
 8004f94:	1d11      	adds	r1, r2, #4
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	9103      	str	r1, [sp, #12]
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	db01      	blt.n	8004fa2 <_svfiprintf_r+0xf6>
 8004f9e:	9207      	str	r2, [sp, #28]
 8004fa0:	e004      	b.n	8004fac <_svfiprintf_r+0x100>
 8004fa2:	4252      	negs	r2, r2
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	9207      	str	r2, [sp, #28]
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	783b      	ldrb	r3, [r7, #0]
 8004fae:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb0:	d10e      	bne.n	8004fd0 <_svfiprintf_r+0x124>
 8004fb2:	787b      	ldrb	r3, [r7, #1]
 8004fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb6:	f107 0101 	add.w	r1, r7, #1
 8004fba:	d132      	bne.n	8005022 <_svfiprintf_r+0x176>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	9203      	str	r2, [sp, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bfb8      	it	lt
 8004fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fcc:	3702      	adds	r7, #2
 8004fce:	9305      	str	r3, [sp, #20]
 8004fd0:	4c2c      	ldr	r4, [pc, #176]	; (8005084 <_svfiprintf_r+0x1d8>)
 8004fd2:	7839      	ldrb	r1, [r7, #0]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fb f902 	bl	80001e0 <memchr>
 8004fdc:	b138      	cbz	r0, 8004fee <_svfiprintf_r+0x142>
 8004fde:	2340      	movs	r3, #64	; 0x40
 8004fe0:	1b00      	subs	r0, r0, r4
 8004fe2:	fa03 f000 	lsl.w	r0, r3, r0
 8004fe6:	9b04      	ldr	r3, [sp, #16]
 8004fe8:	4303      	orrs	r3, r0
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	3701      	adds	r7, #1
 8004fee:	7839      	ldrb	r1, [r7, #0]
 8004ff0:	4825      	ldr	r0, [pc, #148]	; (8005088 <_svfiprintf_r+0x1dc>)
 8004ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ff6:	2206      	movs	r2, #6
 8004ff8:	1c7e      	adds	r6, r7, #1
 8004ffa:	f7fb f8f1 	bl	80001e0 <memchr>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d035      	beq.n	800506e <_svfiprintf_r+0x1c2>
 8005002:	4b22      	ldr	r3, [pc, #136]	; (800508c <_svfiprintf_r+0x1e0>)
 8005004:	b9fb      	cbnz	r3, 8005046 <_svfiprintf_r+0x19a>
 8005006:	9b03      	ldr	r3, [sp, #12]
 8005008:	3307      	adds	r3, #7
 800500a:	f023 0307 	bic.w	r3, r3, #7
 800500e:	3308      	adds	r3, #8
 8005010:	9303      	str	r3, [sp, #12]
 8005012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005014:	444b      	add	r3, r9
 8005016:	9309      	str	r3, [sp, #36]	; 0x24
 8005018:	e76c      	b.n	8004ef4 <_svfiprintf_r+0x48>
 800501a:	fb00 3202 	mla	r2, r0, r2, r3
 800501e:	2101      	movs	r1, #1
 8005020:	e7a3      	b.n	8004f6a <_svfiprintf_r+0xbe>
 8005022:	2300      	movs	r3, #0
 8005024:	9305      	str	r3, [sp, #20]
 8005026:	4618      	mov	r0, r3
 8005028:	240a      	movs	r4, #10
 800502a:	460f      	mov	r7, r1
 800502c:	3101      	adds	r1, #1
 800502e:	783a      	ldrb	r2, [r7, #0]
 8005030:	3a30      	subs	r2, #48	; 0x30
 8005032:	2a09      	cmp	r2, #9
 8005034:	d903      	bls.n	800503e <_svfiprintf_r+0x192>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ca      	beq.n	8004fd0 <_svfiprintf_r+0x124>
 800503a:	9005      	str	r0, [sp, #20]
 800503c:	e7c8      	b.n	8004fd0 <_svfiprintf_r+0x124>
 800503e:	fb04 2000 	mla	r0, r4, r0, r2
 8005042:	2301      	movs	r3, #1
 8005044:	e7f1      	b.n	800502a <_svfiprintf_r+0x17e>
 8005046:	ab03      	add	r3, sp, #12
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <_svfiprintf_r+0x1e4>)
 800504e:	a904      	add	r1, sp, #16
 8005050:	4640      	mov	r0, r8
 8005052:	f7fe f8cf 	bl	80031f4 <_printf_float>
 8005056:	f1b0 3fff 	cmp.w	r0, #4294967295
 800505a:	4681      	mov	r9, r0
 800505c:	d1d9      	bne.n	8005012 <_svfiprintf_r+0x166>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	065b      	lsls	r3, r3, #25
 8005062:	f53f af38 	bmi.w	8004ed6 <_svfiprintf_r+0x2a>
 8005066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005068:	b01d      	add	sp, #116	; 0x74
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	ab03      	add	r3, sp, #12
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	462a      	mov	r2, r5
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <_svfiprintf_r+0x1e4>)
 8005076:	a904      	add	r1, sp, #16
 8005078:	4640      	mov	r0, r8
 800507a:	f7fe fb71 	bl	8003760 <_printf_i>
 800507e:	e7ea      	b.n	8005056 <_svfiprintf_r+0x1aa>
 8005080:	0800647c 	.word	0x0800647c
 8005084:	08006482 	.word	0x08006482
 8005088:	08006486 	.word	0x08006486
 800508c:	080031f5 	.word	0x080031f5
 8005090:	08004df5 	.word	0x08004df5

08005094 <_sbrk_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4c06      	ldr	r4, [pc, #24]	; (80050b0 <_sbrk_r+0x1c>)
 8005098:	2300      	movs	r3, #0
 800509a:	4605      	mov	r5, r0
 800509c:	4608      	mov	r0, r1
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	f001 f8dc 	bl	800625c <_sbrk>
 80050a4:	1c43      	adds	r3, r0, #1
 80050a6:	d102      	bne.n	80050ae <_sbrk_r+0x1a>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	b103      	cbz	r3, 80050ae <_sbrk_r+0x1a>
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	20000390 	.word	0x20000390

080050b4 <__ascii_mbtowc>:
 80050b4:	b082      	sub	sp, #8
 80050b6:	b901      	cbnz	r1, 80050ba <__ascii_mbtowc+0x6>
 80050b8:	a901      	add	r1, sp, #4
 80050ba:	b142      	cbz	r2, 80050ce <__ascii_mbtowc+0x1a>
 80050bc:	b14b      	cbz	r3, 80050d2 <__ascii_mbtowc+0x1e>
 80050be:	7813      	ldrb	r3, [r2, #0]
 80050c0:	600b      	str	r3, [r1, #0]
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	1c10      	adds	r0, r2, #0
 80050c6:	bf18      	it	ne
 80050c8:	2001      	movne	r0, #1
 80050ca:	b002      	add	sp, #8
 80050cc:	4770      	bx	lr
 80050ce:	4610      	mov	r0, r2
 80050d0:	e7fb      	b.n	80050ca <__ascii_mbtowc+0x16>
 80050d2:	f06f 0001 	mvn.w	r0, #1
 80050d6:	e7f8      	b.n	80050ca <__ascii_mbtowc+0x16>

080050d8 <memmove>:
 80050d8:	4288      	cmp	r0, r1
 80050da:	b510      	push	{r4, lr}
 80050dc:	eb01 0302 	add.w	r3, r1, r2
 80050e0:	d803      	bhi.n	80050ea <memmove+0x12>
 80050e2:	1e42      	subs	r2, r0, #1
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d10c      	bne.n	8005102 <memmove+0x2a>
 80050e8:	bd10      	pop	{r4, pc}
 80050ea:	4298      	cmp	r0, r3
 80050ec:	d2f9      	bcs.n	80050e2 <memmove+0xa>
 80050ee:	1881      	adds	r1, r0, r2
 80050f0:	1ad2      	subs	r2, r2, r3
 80050f2:	42d3      	cmn	r3, r2
 80050f4:	d100      	bne.n	80050f8 <memmove+0x20>
 80050f6:	bd10      	pop	{r4, pc}
 80050f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005100:	e7f7      	b.n	80050f2 <memmove+0x1a>
 8005102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005106:	f802 4f01 	strb.w	r4, [r2, #1]!
 800510a:	e7eb      	b.n	80050e4 <memmove+0xc>

0800510c <__malloc_lock>:
 800510c:	4770      	bx	lr

0800510e <__malloc_unlock>:
 800510e:	4770      	bx	lr

08005110 <_realloc_r>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	4607      	mov	r7, r0
 8005114:	4614      	mov	r4, r2
 8005116:	460e      	mov	r6, r1
 8005118:	b921      	cbnz	r1, 8005124 <_realloc_r+0x14>
 800511a:	4611      	mov	r1, r2
 800511c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005120:	f7ff be0a 	b.w	8004d38 <_malloc_r>
 8005124:	b922      	cbnz	r2, 8005130 <_realloc_r+0x20>
 8005126:	f7ff fdb9 	bl	8004c9c <_free_r>
 800512a:	4625      	mov	r5, r4
 800512c:	4628      	mov	r0, r5
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	f000 f821 	bl	8005176 <_malloc_usable_size_r>
 8005134:	4284      	cmp	r4, r0
 8005136:	d90f      	bls.n	8005158 <_realloc_r+0x48>
 8005138:	4621      	mov	r1, r4
 800513a:	4638      	mov	r0, r7
 800513c:	f7ff fdfc 	bl	8004d38 <_malloc_r>
 8005140:	4605      	mov	r5, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d0f2      	beq.n	800512c <_realloc_r+0x1c>
 8005146:	4631      	mov	r1, r6
 8005148:	4622      	mov	r2, r4
 800514a:	f7ff fabd 	bl	80046c8 <memcpy>
 800514e:	4631      	mov	r1, r6
 8005150:	4638      	mov	r0, r7
 8005152:	f7ff fda3 	bl	8004c9c <_free_r>
 8005156:	e7e9      	b.n	800512c <_realloc_r+0x1c>
 8005158:	4635      	mov	r5, r6
 800515a:	e7e7      	b.n	800512c <_realloc_r+0x1c>

0800515c <__ascii_wctomb>:
 800515c:	b149      	cbz	r1, 8005172 <__ascii_wctomb+0x16>
 800515e:	2aff      	cmp	r2, #255	; 0xff
 8005160:	bf85      	ittet	hi
 8005162:	238a      	movhi	r3, #138	; 0x8a
 8005164:	6003      	strhi	r3, [r0, #0]
 8005166:	700a      	strbls	r2, [r1, #0]
 8005168:	f04f 30ff 	movhi.w	r0, #4294967295
 800516c:	bf98      	it	ls
 800516e:	2001      	movls	r0, #1
 8005170:	4770      	bx	lr
 8005172:	4608      	mov	r0, r1
 8005174:	4770      	bx	lr

08005176 <_malloc_usable_size_r>:
 8005176:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800517a:	2800      	cmp	r0, #0
 800517c:	f1a0 0004 	sub.w	r0, r0, #4
 8005180:	bfbc      	itt	lt
 8005182:	580b      	ldrlt	r3, [r1, r0]
 8005184:	18c0      	addlt	r0, r0, r3
 8005186:	4770      	bx	lr

08005188 <pow>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ed2d 8b04 	vpush	{d8-d9}
 8005190:	b08d      	sub	sp, #52	; 0x34
 8005192:	ec57 6b10 	vmov	r6, r7, d0
 8005196:	ec55 4b11 	vmov	r4, r5, d1
 800519a:	f000 f96d 	bl	8005478 <__ieee754_pow>
 800519e:	4bae      	ldr	r3, [pc, #696]	; (8005458 <pow+0x2d0>)
 80051a0:	eeb0 8a40 	vmov.f32	s16, s0
 80051a4:	eef0 8a60 	vmov.f32	s17, s1
 80051a8:	f993 9000 	ldrsb.w	r9, [r3]
 80051ac:	f1b9 3fff 	cmp.w	r9, #4294967295
 80051b0:	4698      	mov	r8, r3
 80051b2:	d05f      	beq.n	8005274 <pow+0xec>
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb fcb2 	bl	8000b24 <__aeabi_dcmpun>
 80051c0:	4683      	mov	fp, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d156      	bne.n	8005274 <pow+0xec>
 80051c6:	4632      	mov	r2, r6
 80051c8:	463b      	mov	r3, r7
 80051ca:	4630      	mov	r0, r6
 80051cc:	4639      	mov	r1, r7
 80051ce:	f7fb fca9 	bl	8000b24 <__aeabi_dcmpun>
 80051d2:	9001      	str	r0, [sp, #4]
 80051d4:	b1e8      	cbz	r0, 8005212 <pow+0x8a>
 80051d6:	2200      	movs	r2, #0
 80051d8:	2300      	movs	r3, #0
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fb fc6f 	bl	8000ac0 <__aeabi_dcmpeq>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d046      	beq.n	8005274 <pow+0xec>
 80051e6:	2301      	movs	r3, #1
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	4b9c      	ldr	r3, [pc, #624]	; (800545c <pow+0x2d4>)
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	4b9c      	ldr	r3, [pc, #624]	; (8005460 <pow+0x2d8>)
 80051f0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80051f4:	2200      	movs	r2, #0
 80051f6:	f1b9 0f02 	cmp.w	r9, #2
 80051fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80051fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005202:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005206:	d033      	beq.n	8005270 <pow+0xe8>
 8005208:	a802      	add	r0, sp, #8
 800520a:	f000 ff06 	bl	800601a <matherr>
 800520e:	bb48      	cbnz	r0, 8005264 <pow+0xdc>
 8005210:	e05e      	b.n	80052d0 <pow+0x148>
 8005212:	f04f 0a00 	mov.w	sl, #0
 8005216:	f04f 0b00 	mov.w	fp, #0
 800521a:	4652      	mov	r2, sl
 800521c:	465b      	mov	r3, fp
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb fc4d 	bl	8000ac0 <__aeabi_dcmpeq>
 8005226:	ec4b ab19 	vmov	d9, sl, fp
 800522a:	2800      	cmp	r0, #0
 800522c:	d055      	beq.n	80052da <pow+0x152>
 800522e:	4652      	mov	r2, sl
 8005230:	465b      	mov	r3, fp
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb fc43 	bl	8000ac0 <__aeabi_dcmpeq>
 800523a:	4680      	mov	r8, r0
 800523c:	b318      	cbz	r0, 8005286 <pow+0xfe>
 800523e:	2301      	movs	r3, #1
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	4b86      	ldr	r3, [pc, #536]	; (800545c <pow+0x2d4>)
 8005244:	9303      	str	r3, [sp, #12]
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	930a      	str	r3, [sp, #40]	; 0x28
 800524a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800524e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005252:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005256:	f1b9 0f00 	cmp.w	r9, #0
 800525a:	d0d5      	beq.n	8005208 <pow+0x80>
 800525c:	4b80      	ldr	r3, [pc, #512]	; (8005460 <pow+0x2d8>)
 800525e:	2200      	movs	r2, #0
 8005260:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	b11b      	cbz	r3, 8005270 <pow+0xe8>
 8005268:	f000 fff2 	bl	8006250 <__errno>
 800526c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526e:	6003      	str	r3, [r0, #0]
 8005270:	ed9d 8b08 	vldr	d8, [sp, #32]
 8005274:	eeb0 0a48 	vmov.f32	s0, s16
 8005278:	eef0 0a68 	vmov.f32	s1, s17
 800527c:	b00d      	add	sp, #52	; 0x34
 800527e:	ecbd 8b04 	vpop	{d8-d9}
 8005282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005286:	ec45 4b10 	vmov	d0, r4, r5
 800528a:	f000 febe 	bl	800600a <finite>
 800528e:	2800      	cmp	r0, #0
 8005290:	d0f0      	beq.n	8005274 <pow+0xec>
 8005292:	4652      	mov	r2, sl
 8005294:	465b      	mov	r3, fp
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fc1b 	bl	8000ad4 <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0e8      	beq.n	8005274 <pow+0xec>
 80052a2:	2301      	movs	r3, #1
 80052a4:	9302      	str	r3, [sp, #8]
 80052a6:	4b6d      	ldr	r3, [pc, #436]	; (800545c <pow+0x2d4>)
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	4b6b      	ldr	r3, [pc, #428]	; (8005458 <pow+0x2d0>)
 80052ac:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80052b0:	f993 3000 	ldrsb.w	r3, [r3]
 80052b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80052bc:	b913      	cbnz	r3, 80052c4 <pow+0x13c>
 80052be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80052c2:	e7a1      	b.n	8005208 <pow+0x80>
 80052c4:	4967      	ldr	r1, [pc, #412]	; (8005464 <pow+0x2dc>)
 80052c6:	2000      	movs	r0, #0
 80052c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d19b      	bne.n	8005208 <pow+0x80>
 80052d0:	f000 ffbe 	bl	8006250 <__errno>
 80052d4:	2321      	movs	r3, #33	; 0x21
 80052d6:	6003      	str	r3, [r0, #0]
 80052d8:	e7c4      	b.n	8005264 <pow+0xdc>
 80052da:	eeb0 0a48 	vmov.f32	s0, s16
 80052de:	eef0 0a68 	vmov.f32	s1, s17
 80052e2:	f000 fe92 	bl	800600a <finite>
 80052e6:	9001      	str	r0, [sp, #4]
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f040 808a 	bne.w	8005402 <pow+0x27a>
 80052ee:	ec47 6b10 	vmov	d0, r6, r7
 80052f2:	f000 fe8a 	bl	800600a <finite>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f000 8083 	beq.w	8005402 <pow+0x27a>
 80052fc:	ec45 4b10 	vmov	d0, r4, r5
 8005300:	f000 fe83 	bl	800600a <finite>
 8005304:	2800      	cmp	r0, #0
 8005306:	d07c      	beq.n	8005402 <pow+0x27a>
 8005308:	ec53 2b18 	vmov	r2, r3, d8
 800530c:	ee18 0a10 	vmov	r0, s16
 8005310:	4619      	mov	r1, r3
 8005312:	f7fb fc07 	bl	8000b24 <__aeabi_dcmpun>
 8005316:	f998 9000 	ldrsb.w	r9, [r8]
 800531a:	4b50      	ldr	r3, [pc, #320]	; (800545c <pow+0x2d4>)
 800531c:	b1b0      	cbz	r0, 800534c <pow+0x1c4>
 800531e:	2201      	movs	r2, #1
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	9202      	str	r2, [sp, #8]
 8005326:	930a      	str	r3, [sp, #40]	; 0x28
 8005328:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800532c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005330:	f1b9 0f00 	cmp.w	r9, #0
 8005334:	d0c3      	beq.n	80052be <pow+0x136>
 8005336:	4652      	mov	r2, sl
 8005338:	465b      	mov	r3, fp
 800533a:	4650      	mov	r0, sl
 800533c:	4659      	mov	r1, fp
 800533e:	f7fb fa81 	bl	8000844 <__aeabi_ddiv>
 8005342:	f1b9 0f02 	cmp.w	r9, #2
 8005346:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800534a:	e7c0      	b.n	80052ce <pow+0x146>
 800534c:	2203      	movs	r2, #3
 800534e:	9202      	str	r2, [sp, #8]
 8005350:	9303      	str	r3, [sp, #12]
 8005352:	900a      	str	r0, [sp, #40]	; 0x28
 8005354:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005358:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800535c:	f1b9 0f00 	cmp.w	r9, #0
 8005360:	d12c      	bne.n	80053bc <pow+0x234>
 8005362:	4b41      	ldr	r3, [pc, #260]	; (8005468 <pow+0x2e0>)
 8005364:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005368:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800536c:	4630      	mov	r0, r6
 800536e:	4652      	mov	r2, sl
 8005370:	465b      	mov	r3, fp
 8005372:	4639      	mov	r1, r7
 8005374:	f7fb fbae 	bl	8000ad4 <__aeabi_dcmplt>
 8005378:	2800      	cmp	r0, #0
 800537a:	d066      	beq.n	800544a <pow+0x2c2>
 800537c:	2200      	movs	r2, #0
 800537e:	4b3b      	ldr	r3, [pc, #236]	; (800546c <pow+0x2e4>)
 8005380:	4620      	mov	r0, r4
 8005382:	4629      	mov	r1, r5
 8005384:	f7fb f934 	bl	80005f0 <__aeabi_dmul>
 8005388:	4604      	mov	r4, r0
 800538a:	460d      	mov	r5, r1
 800538c:	ec45 4b10 	vmov	d0, r4, r5
 8005390:	f000 fe4e 	bl	8006030 <rint>
 8005394:	4620      	mov	r0, r4
 8005396:	ec53 2b10 	vmov	r2, r3, d0
 800539a:	4629      	mov	r1, r5
 800539c:	f7fb fb90 	bl	8000ac0 <__aeabi_dcmpeq>
 80053a0:	b920      	cbnz	r0, 80053ac <pow+0x224>
 80053a2:	4b33      	ldr	r3, [pc, #204]	; (8005470 <pow+0x2e8>)
 80053a4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80053a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053ac:	f998 3000 	ldrsb.w	r3, [r8]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d14a      	bne.n	800544a <pow+0x2c2>
 80053b4:	f000 ff4c 	bl	8006250 <__errno>
 80053b8:	2322      	movs	r3, #34	; 0x22
 80053ba:	e78c      	b.n	80052d6 <pow+0x14e>
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <pow+0x2ec>)
 80053be:	2200      	movs	r2, #0
 80053c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053c4:	4630      	mov	r0, r6
 80053c6:	4652      	mov	r2, sl
 80053c8:	465b      	mov	r3, fp
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb fb82 	bl	8000ad4 <__aeabi_dcmplt>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d0eb      	beq.n	80053ac <pow+0x224>
 80053d4:	2200      	movs	r2, #0
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <pow+0x2e4>)
 80053d8:	4620      	mov	r0, r4
 80053da:	4629      	mov	r1, r5
 80053dc:	f7fb f908 	bl	80005f0 <__aeabi_dmul>
 80053e0:	4604      	mov	r4, r0
 80053e2:	460d      	mov	r5, r1
 80053e4:	ec45 4b10 	vmov	d0, r4, r5
 80053e8:	f000 fe22 	bl	8006030 <rint>
 80053ec:	4620      	mov	r0, r4
 80053ee:	ec53 2b10 	vmov	r2, r3, d0
 80053f2:	4629      	mov	r1, r5
 80053f4:	f7fb fb64 	bl	8000ac0 <__aeabi_dcmpeq>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1d7      	bne.n	80053ac <pow+0x224>
 80053fc:	2200      	movs	r2, #0
 80053fe:	4b19      	ldr	r3, [pc, #100]	; (8005464 <pow+0x2dc>)
 8005400:	e7d2      	b.n	80053a8 <pow+0x220>
 8005402:	2200      	movs	r2, #0
 8005404:	2300      	movs	r3, #0
 8005406:	ec51 0b18 	vmov	r0, r1, d8
 800540a:	f7fb fb59 	bl	8000ac0 <__aeabi_dcmpeq>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f af30 	beq.w	8005274 <pow+0xec>
 8005414:	ec47 6b10 	vmov	d0, r6, r7
 8005418:	f000 fdf7 	bl	800600a <finite>
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f af29 	beq.w	8005274 <pow+0xec>
 8005422:	ec45 4b10 	vmov	d0, r4, r5
 8005426:	f000 fdf0 	bl	800600a <finite>
 800542a:	2800      	cmp	r0, #0
 800542c:	f43f af22 	beq.w	8005274 <pow+0xec>
 8005430:	2304      	movs	r3, #4
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <pow+0x2d4>)
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	2300      	movs	r3, #0
 800543a:	930a      	str	r3, [sp, #40]	; 0x28
 800543c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005440:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005444:	ed8d 9b08 	vstr	d9, [sp, #32]
 8005448:	e7b0      	b.n	80053ac <pow+0x224>
 800544a:	a802      	add	r0, sp, #8
 800544c:	f000 fde5 	bl	800601a <matherr>
 8005450:	2800      	cmp	r0, #0
 8005452:	f47f af07 	bne.w	8005264 <pow+0xdc>
 8005456:	e7ad      	b.n	80053b4 <pow+0x22c>
 8005458:	200001dc 	.word	0x200001dc
 800545c:	08006598 	.word	0x08006598
 8005460:	3ff00000 	.word	0x3ff00000
 8005464:	fff00000 	.word	0xfff00000
 8005468:	47efffff 	.word	0x47efffff
 800546c:	3fe00000 	.word	0x3fe00000
 8005470:	c7efffff 	.word	0xc7efffff
 8005474:	7ff00000 	.word	0x7ff00000

08005478 <__ieee754_pow>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	b091      	sub	sp, #68	; 0x44
 800547e:	ed8d 1b00 	vstr	d1, [sp]
 8005482:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8005486:	ec57 6b10 	vmov	r6, r7, d0
 800548a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800548e:	ea58 0302 	orrs.w	r3, r8, r2
 8005492:	ee10 aa10 	vmov	sl, s0
 8005496:	463d      	mov	r5, r7
 8005498:	f000 84bd 	beq.w	8005e16 <__ieee754_pow+0x99e>
 800549c:	4b78      	ldr	r3, [pc, #480]	; (8005680 <__ieee754_pow+0x208>)
 800549e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80054a2:	429c      	cmp	r4, r3
 80054a4:	dc09      	bgt.n	80054ba <__ieee754_pow+0x42>
 80054a6:	d103      	bne.n	80054b0 <__ieee754_pow+0x38>
 80054a8:	b93e      	cbnz	r6, 80054ba <__ieee754_pow+0x42>
 80054aa:	45a0      	cmp	r8, r4
 80054ac:	dc0d      	bgt.n	80054ca <__ieee754_pow+0x52>
 80054ae:	e001      	b.n	80054b4 <__ieee754_pow+0x3c>
 80054b0:	4598      	cmp	r8, r3
 80054b2:	dc02      	bgt.n	80054ba <__ieee754_pow+0x42>
 80054b4:	4598      	cmp	r8, r3
 80054b6:	d10e      	bne.n	80054d6 <__ieee754_pow+0x5e>
 80054b8:	b16a      	cbz	r2, 80054d6 <__ieee754_pow+0x5e>
 80054ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054c2:	ea54 030a 	orrs.w	r3, r4, sl
 80054c6:	f000 84a6 	beq.w	8005e16 <__ieee754_pow+0x99e>
 80054ca:	486e      	ldr	r0, [pc, #440]	; (8005684 <__ieee754_pow+0x20c>)
 80054cc:	b011      	add	sp, #68	; 0x44
 80054ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d2:	f000 bda5 	b.w	8006020 <nan>
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	da53      	bge.n	8005582 <__ieee754_pow+0x10a>
 80054da:	4b6b      	ldr	r3, [pc, #428]	; (8005688 <__ieee754_pow+0x210>)
 80054dc:	4598      	cmp	r8, r3
 80054de:	dc4d      	bgt.n	800557c <__ieee754_pow+0x104>
 80054e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054e4:	4598      	cmp	r8, r3
 80054e6:	dd4c      	ble.n	8005582 <__ieee754_pow+0x10a>
 80054e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054f0:	2b14      	cmp	r3, #20
 80054f2:	dd26      	ble.n	8005542 <__ieee754_pow+0xca>
 80054f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80054f8:	fa22 f103 	lsr.w	r1, r2, r3
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	429a      	cmp	r2, r3
 8005502:	d13e      	bne.n	8005582 <__ieee754_pow+0x10a>
 8005504:	f001 0101 	and.w	r1, r1, #1
 8005508:	f1c1 0b02 	rsb	fp, r1, #2
 800550c:	2a00      	cmp	r2, #0
 800550e:	d15b      	bne.n	80055c8 <__ieee754_pow+0x150>
 8005510:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <__ieee754_pow+0x208>)
 8005512:	4598      	cmp	r8, r3
 8005514:	d124      	bne.n	8005560 <__ieee754_pow+0xe8>
 8005516:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800551a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800551e:	ea53 030a 	orrs.w	r3, r3, sl
 8005522:	f000 8478 	beq.w	8005e16 <__ieee754_pow+0x99e>
 8005526:	4b59      	ldr	r3, [pc, #356]	; (800568c <__ieee754_pow+0x214>)
 8005528:	429c      	cmp	r4, r3
 800552a:	dd2d      	ble.n	8005588 <__ieee754_pow+0x110>
 800552c:	f1b9 0f00 	cmp.w	r9, #0
 8005530:	f280 8475 	bge.w	8005e1e <__ieee754_pow+0x9a6>
 8005534:	2000      	movs	r0, #0
 8005536:	2100      	movs	r1, #0
 8005538:	ec41 0b10 	vmov	d0, r0, r1
 800553c:	b011      	add	sp, #68	; 0x44
 800553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005542:	2a00      	cmp	r2, #0
 8005544:	d13e      	bne.n	80055c4 <__ieee754_pow+0x14c>
 8005546:	f1c3 0314 	rsb	r3, r3, #20
 800554a:	fa48 f103 	asr.w	r1, r8, r3
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	4598      	cmp	r8, r3
 8005554:	f040 846b 	bne.w	8005e2e <__ieee754_pow+0x9b6>
 8005558:	f001 0101 	and.w	r1, r1, #1
 800555c:	f1c1 0b02 	rsb	fp, r1, #2
 8005560:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <__ieee754_pow+0x218>)
 8005562:	4598      	cmp	r8, r3
 8005564:	d118      	bne.n	8005598 <__ieee754_pow+0x120>
 8005566:	f1b9 0f00 	cmp.w	r9, #0
 800556a:	f280 845c 	bge.w	8005e26 <__ieee754_pow+0x9ae>
 800556e:	4948      	ldr	r1, [pc, #288]	; (8005690 <__ieee754_pow+0x218>)
 8005570:	4632      	mov	r2, r6
 8005572:	463b      	mov	r3, r7
 8005574:	2000      	movs	r0, #0
 8005576:	f7fb f965 	bl	8000844 <__aeabi_ddiv>
 800557a:	e7dd      	b.n	8005538 <__ieee754_pow+0xc0>
 800557c:	f04f 0b02 	mov.w	fp, #2
 8005580:	e7c4      	b.n	800550c <__ieee754_pow+0x94>
 8005582:	f04f 0b00 	mov.w	fp, #0
 8005586:	e7c1      	b.n	800550c <__ieee754_pow+0x94>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	dad2      	bge.n	8005534 <__ieee754_pow+0xbc>
 800558e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8005592:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005596:	e7cf      	b.n	8005538 <__ieee754_pow+0xc0>
 8005598:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800559c:	d106      	bne.n	80055ac <__ieee754_pow+0x134>
 800559e:	4632      	mov	r2, r6
 80055a0:	463b      	mov	r3, r7
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fb f823 	bl	80005f0 <__aeabi_dmul>
 80055aa:	e7c5      	b.n	8005538 <__ieee754_pow+0xc0>
 80055ac:	4b39      	ldr	r3, [pc, #228]	; (8005694 <__ieee754_pow+0x21c>)
 80055ae:	4599      	cmp	r9, r3
 80055b0:	d10a      	bne.n	80055c8 <__ieee754_pow+0x150>
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	db08      	blt.n	80055c8 <__ieee754_pow+0x150>
 80055b6:	ec47 6b10 	vmov	d0, r6, r7
 80055ba:	b011      	add	sp, #68	; 0x44
 80055bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	f000 bc6c 	b.w	8005e9c <__ieee754_sqrt>
 80055c4:	f04f 0b00 	mov.w	fp, #0
 80055c8:	ec47 6b10 	vmov	d0, r6, r7
 80055cc:	f000 fd16 	bl	8005ffc <fabs>
 80055d0:	ec51 0b10 	vmov	r0, r1, d0
 80055d4:	f1ba 0f00 	cmp.w	sl, #0
 80055d8:	d127      	bne.n	800562a <__ieee754_pow+0x1b2>
 80055da:	b124      	cbz	r4, 80055e6 <__ieee754_pow+0x16e>
 80055dc:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <__ieee754_pow+0x218>)
 80055de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d121      	bne.n	800562a <__ieee754_pow+0x1b2>
 80055e6:	f1b9 0f00 	cmp.w	r9, #0
 80055ea:	da05      	bge.n	80055f8 <__ieee754_pow+0x180>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	2000      	movs	r0, #0
 80055f2:	4927      	ldr	r1, [pc, #156]	; (8005690 <__ieee754_pow+0x218>)
 80055f4:	f7fb f926 	bl	8000844 <__aeabi_ddiv>
 80055f8:	2d00      	cmp	r5, #0
 80055fa:	da9d      	bge.n	8005538 <__ieee754_pow+0xc0>
 80055fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005600:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005604:	ea54 030b 	orrs.w	r3, r4, fp
 8005608:	d108      	bne.n	800561c <__ieee754_pow+0x1a4>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f7fa fe39 	bl	8000288 <__aeabi_dsub>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	e7ac      	b.n	8005576 <__ieee754_pow+0xfe>
 800561c:	f1bb 0f01 	cmp.w	fp, #1
 8005620:	d18a      	bne.n	8005538 <__ieee754_pow+0xc0>
 8005622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005626:	4619      	mov	r1, r3
 8005628:	e786      	b.n	8005538 <__ieee754_pow+0xc0>
 800562a:	0fed      	lsrs	r5, r5, #31
 800562c:	1e6b      	subs	r3, r5, #1
 800562e:	930d      	str	r3, [sp, #52]	; 0x34
 8005630:	ea5b 0303 	orrs.w	r3, fp, r3
 8005634:	d102      	bne.n	800563c <__ieee754_pow+0x1c4>
 8005636:	4632      	mov	r2, r6
 8005638:	463b      	mov	r3, r7
 800563a:	e7e8      	b.n	800560e <__ieee754_pow+0x196>
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <__ieee754_pow+0x220>)
 800563e:	4598      	cmp	r8, r3
 8005640:	f340 80fe 	ble.w	8005840 <__ieee754_pow+0x3c8>
 8005644:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005648:	4598      	cmp	r8, r3
 800564a:	dd0a      	ble.n	8005662 <__ieee754_pow+0x1ea>
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <__ieee754_pow+0x214>)
 800564e:	429c      	cmp	r4, r3
 8005650:	dc0d      	bgt.n	800566e <__ieee754_pow+0x1f6>
 8005652:	f1b9 0f00 	cmp.w	r9, #0
 8005656:	f6bf af6d 	bge.w	8005534 <__ieee754_pow+0xbc>
 800565a:	a307      	add	r3, pc, #28	; (adr r3, 8005678 <__ieee754_pow+0x200>)
 800565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005660:	e79f      	b.n	80055a2 <__ieee754_pow+0x12a>
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <__ieee754_pow+0x224>)
 8005664:	429c      	cmp	r4, r3
 8005666:	ddf4      	ble.n	8005652 <__ieee754_pow+0x1da>
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <__ieee754_pow+0x218>)
 800566a:	429c      	cmp	r4, r3
 800566c:	dd18      	ble.n	80056a0 <__ieee754_pow+0x228>
 800566e:	f1b9 0f00 	cmp.w	r9, #0
 8005672:	dcf2      	bgt.n	800565a <__ieee754_pow+0x1e2>
 8005674:	e75e      	b.n	8005534 <__ieee754_pow+0xbc>
 8005676:	bf00      	nop
 8005678:	8800759c 	.word	0x8800759c
 800567c:	7e37e43c 	.word	0x7e37e43c
 8005680:	7ff00000 	.word	0x7ff00000
 8005684:	080062ec 	.word	0x080062ec
 8005688:	433fffff 	.word	0x433fffff
 800568c:	3fefffff 	.word	0x3fefffff
 8005690:	3ff00000 	.word	0x3ff00000
 8005694:	3fe00000 	.word	0x3fe00000
 8005698:	41e00000 	.word	0x41e00000
 800569c:	3feffffe 	.word	0x3feffffe
 80056a0:	2200      	movs	r2, #0
 80056a2:	4b63      	ldr	r3, [pc, #396]	; (8005830 <__ieee754_pow+0x3b8>)
 80056a4:	f7fa fdf0 	bl	8000288 <__aeabi_dsub>
 80056a8:	a355      	add	r3, pc, #340	; (adr r3, 8005800 <__ieee754_pow+0x388>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	f7fa ff9d 	bl	80005f0 <__aeabi_dmul>
 80056b6:	a354      	add	r3, pc, #336	; (adr r3, 8005808 <__ieee754_pow+0x390>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	4620      	mov	r0, r4
 80056c2:	4629      	mov	r1, r5
 80056c4:	f7fa ff94 	bl	80005f0 <__aeabi_dmul>
 80056c8:	2200      	movs	r2, #0
 80056ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ce:	4b59      	ldr	r3, [pc, #356]	; (8005834 <__ieee754_pow+0x3bc>)
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fa ff8c 	bl	80005f0 <__aeabi_dmul>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	a14c      	add	r1, pc, #304	; (adr r1, 8005810 <__ieee754_pow+0x398>)
 80056de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e2:	f7fa fdd1 	bl	8000288 <__aeabi_dsub>
 80056e6:	4622      	mov	r2, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	f7fa ff81 	bl	80005f0 <__aeabi_dmul>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	2000      	movs	r0, #0
 80056f4:	4950      	ldr	r1, [pc, #320]	; (8005838 <__ieee754_pow+0x3c0>)
 80056f6:	f7fa fdc7 	bl	8000288 <__aeabi_dsub>
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	4680      	mov	r8, r0
 8005700:	4689      	mov	r9, r1
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f7fa ff73 	bl	80005f0 <__aeabi_dmul>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4640      	mov	r0, r8
 8005710:	4649      	mov	r1, r9
 8005712:	f7fa ff6d 	bl	80005f0 <__aeabi_dmul>
 8005716:	a340      	add	r3, pc, #256	; (adr r3, 8005818 <__ieee754_pow+0x3a0>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa ff68 	bl	80005f0 <__aeabi_dmul>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005728:	f7fa fdae 	bl	8000288 <__aeabi_dsub>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4604      	mov	r4, r0
 8005732:	460d      	mov	r5, r1
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fda8 	bl	800028c <__adddf3>
 800573c:	2000      	movs	r0, #0
 800573e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005742:	4632      	mov	r2, r6
 8005744:	463b      	mov	r3, r7
 8005746:	f7fa fd9f 	bl	8000288 <__aeabi_dsub>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fd99 	bl	8000288 <__aeabi_dsub>
 8005756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005758:	f10b 33ff 	add.w	r3, fp, #4294967295
 800575c:	4313      	orrs	r3, r2
 800575e:	4606      	mov	r6, r0
 8005760:	460f      	mov	r7, r1
 8005762:	f040 81eb 	bne.w	8005b3c <__ieee754_pow+0x6c4>
 8005766:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005820 <__ieee754_pow+0x3a8>
 800576a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800576e:	2400      	movs	r4, #0
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005778:	ed8d 7b02 	vstr	d7, [sp, #8]
 800577c:	f7fa fd84 	bl	8000288 <__aeabi_dsub>
 8005780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005784:	f7fa ff34 	bl	80005f0 <__aeabi_dmul>
 8005788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa ff2c 	bl	80005f0 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4640      	mov	r0, r8
 800579e:	4649      	mov	r1, r9
 80057a0:	f7fa fd74 	bl	800028c <__adddf3>
 80057a4:	4622      	mov	r2, r4
 80057a6:	462b      	mov	r3, r5
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057b0:	f7fa ff1e 	bl	80005f0 <__aeabi_dmul>
 80057b4:	460b      	mov	r3, r1
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	4602      	mov	r2, r0
 80057bc:	4649      	mov	r1, r9
 80057be:	4640      	mov	r0, r8
 80057c0:	e9cd 4500 	strd	r4, r5, [sp]
 80057c4:	f7fa fd62 	bl	800028c <__adddf3>
 80057c8:	4b1c      	ldr	r3, [pc, #112]	; (800583c <__ieee754_pow+0x3c4>)
 80057ca:	4299      	cmp	r1, r3
 80057cc:	4606      	mov	r6, r0
 80057ce:	460f      	mov	r7, r1
 80057d0:	468b      	mov	fp, r1
 80057d2:	f340 82f7 	ble.w	8005dc4 <__ieee754_pow+0x94c>
 80057d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057de:	4303      	orrs	r3, r0
 80057e0:	f000 81ea 	beq.w	8005bb8 <__ieee754_pow+0x740>
 80057e4:	a310      	add	r3, pc, #64	; (adr r3, 8005828 <__ieee754_pow+0x3b0>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ee:	f7fa feff 	bl	80005f0 <__aeabi_dmul>
 80057f2:	a30d      	add	r3, pc, #52	; (adr r3, 8005828 <__ieee754_pow+0x3b0>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	e6d5      	b.n	80055a6 <__ieee754_pow+0x12e>
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w
 8005800:	60000000 	.word	0x60000000
 8005804:	3ff71547 	.word	0x3ff71547
 8005808:	f85ddf44 	.word	0xf85ddf44
 800580c:	3e54ae0b 	.word	0x3e54ae0b
 8005810:	55555555 	.word	0x55555555
 8005814:	3fd55555 	.word	0x3fd55555
 8005818:	652b82fe 	.word	0x652b82fe
 800581c:	3ff71547 	.word	0x3ff71547
 8005820:	00000000 	.word	0x00000000
 8005824:	bff00000 	.word	0xbff00000
 8005828:	8800759c 	.word	0x8800759c
 800582c:	7e37e43c 	.word	0x7e37e43c
 8005830:	3ff00000 	.word	0x3ff00000
 8005834:	3fd00000 	.word	0x3fd00000
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	408fffff 	.word	0x408fffff
 8005840:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	da05      	bge.n	8005856 <__ieee754_pow+0x3de>
 800584a:	4bd3      	ldr	r3, [pc, #844]	; (8005b98 <__ieee754_pow+0x720>)
 800584c:	f7fa fed0 	bl	80005f0 <__aeabi_dmul>
 8005850:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005854:	460c      	mov	r4, r1
 8005856:	1523      	asrs	r3, r4, #20
 8005858:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800585c:	4413      	add	r3, r2
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	4bce      	ldr	r3, [pc, #824]	; (8005b9c <__ieee754_pow+0x724>)
 8005862:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005866:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800586a:	429c      	cmp	r4, r3
 800586c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005870:	dd08      	ble.n	8005884 <__ieee754_pow+0x40c>
 8005872:	4bcb      	ldr	r3, [pc, #812]	; (8005ba0 <__ieee754_pow+0x728>)
 8005874:	429c      	cmp	r4, r3
 8005876:	f340 815e 	ble.w	8005b36 <__ieee754_pow+0x6be>
 800587a:	9b07      	ldr	r3, [sp, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	9307      	str	r3, [sp, #28]
 8005880:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005884:	f04f 0a00 	mov.w	sl, #0
 8005888:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800588c:	930c      	str	r3, [sp, #48]	; 0x30
 800588e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005890:	4bc4      	ldr	r3, [pc, #784]	; (8005ba4 <__ieee754_pow+0x72c>)
 8005892:	4413      	add	r3, r2
 8005894:	ed93 7b00 	vldr	d7, [r3]
 8005898:	4629      	mov	r1, r5
 800589a:	ec53 2b17 	vmov	r2, r3, d7
 800589e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80058a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80058a6:	f7fa fcef 	bl	8000288 <__aeabi_dsub>
 80058aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058ae:	4606      	mov	r6, r0
 80058b0:	460f      	mov	r7, r1
 80058b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058b6:	f7fa fce9 	bl	800028c <__adddf3>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	2000      	movs	r0, #0
 80058c0:	49b9      	ldr	r1, [pc, #740]	; (8005ba8 <__ieee754_pow+0x730>)
 80058c2:	f7fa ffbf 	bl	8000844 <__aeabi_ddiv>
 80058c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4630      	mov	r0, r6
 80058d0:	4639      	mov	r1, r7
 80058d2:	f7fa fe8d 	bl	80005f0 <__aeabi_dmul>
 80058d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058ea:	106d      	asrs	r5, r5, #1
 80058ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058f4:	2200      	movs	r2, #0
 80058f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	4614      	mov	r4, r2
 8005900:	461d      	mov	r5, r3
 8005902:	f7fa fe75 	bl	80005f0 <__aeabi_dmul>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fcbb 	bl	8000288 <__aeabi_dsub>
 8005912:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005916:	4606      	mov	r6, r0
 8005918:	460f      	mov	r7, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fcb3 	bl	8000288 <__aeabi_dsub>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800592a:	f7fa fcad 	bl	8000288 <__aeabi_dsub>
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	f7fa fe5d 	bl	80005f0 <__aeabi_dmul>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fca3 	bl	8000288 <__aeabi_dsub>
 8005942:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005946:	f7fa fe53 	bl	80005f0 <__aeabi_dmul>
 800594a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800594e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	f7fa fe4b 	bl	80005f0 <__aeabi_dmul>
 800595a:	a37b      	add	r3, pc, #492	; (adr r3, 8005b48 <__ieee754_pow+0x6d0>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	4604      	mov	r4, r0
 8005962:	460d      	mov	r5, r1
 8005964:	f7fa fe44 	bl	80005f0 <__aeabi_dmul>
 8005968:	a379      	add	r3, pc, #484	; (adr r3, 8005b50 <__ieee754_pow+0x6d8>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fc8d 	bl	800028c <__adddf3>
 8005972:	4622      	mov	r2, r4
 8005974:	462b      	mov	r3, r5
 8005976:	f7fa fe3b 	bl	80005f0 <__aeabi_dmul>
 800597a:	a377      	add	r3, pc, #476	; (adr r3, 8005b58 <__ieee754_pow+0x6e0>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fa fc84 	bl	800028c <__adddf3>
 8005984:	4622      	mov	r2, r4
 8005986:	462b      	mov	r3, r5
 8005988:	f7fa fe32 	bl	80005f0 <__aeabi_dmul>
 800598c:	a374      	add	r3, pc, #464	; (adr r3, 8005b60 <__ieee754_pow+0x6e8>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fc7b 	bl	800028c <__adddf3>
 8005996:	4622      	mov	r2, r4
 8005998:	462b      	mov	r3, r5
 800599a:	f7fa fe29 	bl	80005f0 <__aeabi_dmul>
 800599e:	a372      	add	r3, pc, #456	; (adr r3, 8005b68 <__ieee754_pow+0x6f0>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fc72 	bl	800028c <__adddf3>
 80059a8:	4622      	mov	r2, r4
 80059aa:	462b      	mov	r3, r5
 80059ac:	f7fa fe20 	bl	80005f0 <__aeabi_dmul>
 80059b0:	a36f      	add	r3, pc, #444	; (adr r3, 8005b70 <__ieee754_pow+0x6f8>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fc69 	bl	800028c <__adddf3>
 80059ba:	4622      	mov	r2, r4
 80059bc:	4606      	mov	r6, r0
 80059be:	460f      	mov	r7, r1
 80059c0:	462b      	mov	r3, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fa fe13 	bl	80005f0 <__aeabi_dmul>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fe0d 	bl	80005f0 <__aeabi_dmul>
 80059d6:	4642      	mov	r2, r8
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	464b      	mov	r3, r9
 80059de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e2:	f7fa fc53 	bl	800028c <__adddf3>
 80059e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059ea:	f7fa fe01 	bl	80005f0 <__aeabi_dmul>
 80059ee:	4622      	mov	r2, r4
 80059f0:	462b      	mov	r3, r5
 80059f2:	f7fa fc4b 	bl	800028c <__adddf3>
 80059f6:	4642      	mov	r2, r8
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	464b      	mov	r3, r9
 80059fe:	4640      	mov	r0, r8
 8005a00:	4649      	mov	r1, r9
 8005a02:	f7fa fdf5 	bl	80005f0 <__aeabi_dmul>
 8005a06:	2200      	movs	r2, #0
 8005a08:	4b68      	ldr	r3, [pc, #416]	; (8005bac <__ieee754_pow+0x734>)
 8005a0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a0e:	f7fa fc3d 	bl	800028c <__adddf3>
 8005a12:	4632      	mov	r2, r6
 8005a14:	463b      	mov	r3, r7
 8005a16:	f7fa fc39 	bl	800028c <__adddf3>
 8005a1a:	9802      	ldr	r0, [sp, #8]
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4640      	mov	r0, r8
 8005a26:	4649      	mov	r1, r9
 8005a28:	f7fa fde2 	bl	80005f0 <__aeabi_dmul>
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4680      	mov	r8, r0
 8005a30:	4689      	mov	r9, r1
 8005a32:	4b5e      	ldr	r3, [pc, #376]	; (8005bac <__ieee754_pow+0x734>)
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa fc26 	bl	8000288 <__aeabi_dsub>
 8005a3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a40:	f7fa fc22 	bl	8000288 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fa fc1c 	bl	8000288 <__aeabi_dsub>
 8005a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a54:	f7fa fdcc 	bl	80005f0 <__aeabi_dmul>
 8005a58:	4622      	mov	r2, r4
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	462b      	mov	r3, r5
 8005a60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a64:	f7fa fdc4 	bl	80005f0 <__aeabi_dmul>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa fc0c 	bl	800028c <__adddf3>
 8005a74:	4606      	mov	r6, r0
 8005a76:	460f      	mov	r7, r1
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	4649      	mov	r1, r9
 8005a80:	f7fa fc04 	bl	800028c <__adddf3>
 8005a84:	9802      	ldr	r0, [sp, #8]
 8005a86:	a33c      	add	r3, pc, #240	; (adr r3, 8005b78 <__ieee754_pow+0x700>)
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	460d      	mov	r5, r1
 8005a90:	f7fa fdae 	bl	80005f0 <__aeabi_dmul>
 8005a94:	4642      	mov	r2, r8
 8005a96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fbf2 	bl	8000288 <__aeabi_dsub>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	4639      	mov	r1, r7
 8005aac:	f7fa fbec 	bl	8000288 <__aeabi_dsub>
 8005ab0:	a333      	add	r3, pc, #204	; (adr r3, 8005b80 <__ieee754_pow+0x708>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd9b 	bl	80005f0 <__aeabi_dmul>
 8005aba:	a333      	add	r3, pc, #204	; (adr r3, 8005b88 <__ieee754_pow+0x710>)
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	460f      	mov	r7, r1
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	f7fa fd92 	bl	80005f0 <__aeabi_dmul>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	f7fa fbda 	bl	800028c <__adddf3>
 8005ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ada:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <__ieee754_pow+0x738>)
 8005adc:	4413      	add	r3, r2
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fbd3 	bl	800028c <__adddf3>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	9807      	ldr	r0, [sp, #28]
 8005aea:	460d      	mov	r5, r1
 8005aec:	f7fa fd1a 	bl	8000524 <__aeabi_i2d>
 8005af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <__ieee754_pow+0x73c>)
 8005af4:	4413      	add	r3, r2
 8005af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b06:	f7fa fbc1 	bl	800028c <__adddf3>
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	f7fa fbbd 	bl	800028c <__adddf3>
 8005b12:	4632      	mov	r2, r6
 8005b14:	463b      	mov	r3, r7
 8005b16:	f7fa fbb9 	bl	800028c <__adddf3>
 8005b1a:	9802      	ldr	r0, [sp, #8]
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	463b      	mov	r3, r7
 8005b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	f7fa fbac 	bl	8000288 <__aeabi_dsub>
 8005b30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b34:	e607      	b.n	8005746 <__ieee754_pow+0x2ce>
 8005b36:	f04f 0a01 	mov.w	sl, #1
 8005b3a:	e6a5      	b.n	8005888 <__ieee754_pow+0x410>
 8005b3c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005b90 <__ieee754_pow+0x718>
 8005b40:	e613      	b.n	800576a <__ieee754_pow+0x2f2>
 8005b42:	bf00      	nop
 8005b44:	f3af 8000 	nop.w
 8005b48:	4a454eef 	.word	0x4a454eef
 8005b4c:	3fca7e28 	.word	0x3fca7e28
 8005b50:	93c9db65 	.word	0x93c9db65
 8005b54:	3fcd864a 	.word	0x3fcd864a
 8005b58:	a91d4101 	.word	0xa91d4101
 8005b5c:	3fd17460 	.word	0x3fd17460
 8005b60:	518f264d 	.word	0x518f264d
 8005b64:	3fd55555 	.word	0x3fd55555
 8005b68:	db6fabff 	.word	0xdb6fabff
 8005b6c:	3fdb6db6 	.word	0x3fdb6db6
 8005b70:	33333303 	.word	0x33333303
 8005b74:	3fe33333 	.word	0x3fe33333
 8005b78:	e0000000 	.word	0xe0000000
 8005b7c:	3feec709 	.word	0x3feec709
 8005b80:	dc3a03fd 	.word	0xdc3a03fd
 8005b84:	3feec709 	.word	0x3feec709
 8005b88:	145b01f5 	.word	0x145b01f5
 8005b8c:	be3e2fe0 	.word	0xbe3e2fe0
 8005b90:	00000000 	.word	0x00000000
 8005b94:	3ff00000 	.word	0x3ff00000
 8005b98:	43400000 	.word	0x43400000
 8005b9c:	0003988e 	.word	0x0003988e
 8005ba0:	000bb679 	.word	0x000bb679
 8005ba4:	080065a0 	.word	0x080065a0
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	40080000 	.word	0x40080000
 8005bb0:	080065c0 	.word	0x080065c0
 8005bb4:	080065b0 	.word	0x080065b0
 8005bb8:	a3b6      	add	r3, pc, #728	; (adr r3, 8005e94 <__ieee754_pow+0xa1c>)
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fa fb63 	bl	800028c <__adddf3>
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bcc:	462b      	mov	r3, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	f7fa fb59 	bl	8000288 <__aeabi_dsub>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bde:	f7fa ff97 	bl	8000b10 <__aeabi_dcmpgt>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f47f adfe 	bne.w	80057e4 <__ieee754_pow+0x36c>
 8005be8:	4aa5      	ldr	r2, [pc, #660]	; (8005e80 <__ieee754_pow+0xa08>)
 8005bea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f340 810c 	ble.w	8005e0c <__ieee754_pow+0x994>
 8005bf4:	151b      	asrs	r3, r3, #20
 8005bf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005bfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005bfe:	fa4a f303 	asr.w	r3, sl, r3
 8005c02:	445b      	add	r3, fp
 8005c04:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005c08:	4e9e      	ldr	r6, [pc, #632]	; (8005e84 <__ieee754_pow+0xa0c>)
 8005c0a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005c0e:	4116      	asrs	r6, r2
 8005c10:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c14:	2000      	movs	r0, #0
 8005c16:	ea23 0106 	bic.w	r1, r3, r6
 8005c1a:	f1c2 0214 	rsb	r2, r2, #20
 8005c1e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c22:	fa4a fa02 	asr.w	sl, sl, r2
 8005c26:	f1bb 0f00 	cmp.w	fp, #0
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	bfb8      	it	lt
 8005c34:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c38:	f7fa fb26 	bl	8000288 <__aeabi_dsub>
 8005c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c48:	f7fa fb20 	bl	800028c <__adddf3>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	a37a      	add	r3, pc, #488	; (adr r3, 8005e38 <__ieee754_pow+0x9c0>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	f7fa fcca 	bl	80005f0 <__aeabi_dmul>
 8005c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c60:	4606      	mov	r6, r0
 8005c62:	460f      	mov	r7, r1
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa fb0e 	bl	8000288 <__aeabi_dsub>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa fb08 	bl	8000288 <__aeabi_dsub>
 8005c78:	a371      	add	r3, pc, #452	; (adr r3, 8005e40 <__ieee754_pow+0x9c8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fcb7 	bl	80005f0 <__aeabi_dmul>
 8005c82:	a371      	add	r3, pc, #452	; (adr r3, 8005e48 <__ieee754_pow+0x9d0>)
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	4680      	mov	r8, r0
 8005c8a:	4689      	mov	r9, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fcae 	bl	80005f0 <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa faf6 	bl	800028c <__adddf3>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa faee 	bl	800028c <__adddf3>
 8005cb0:	4632      	mov	r2, r6
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	f7fa fae6 	bl	8000288 <__aeabi_dsub>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa fae0 	bl	8000288 <__aeabi_dsub>
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	464b      	mov	r3, r9
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	f7fa fc8c 	bl	80005f0 <__aeabi_dmul>
 8005cd8:	a35d      	add	r3, pc, #372	; (adr r3, 8005e50 <__ieee754_pow+0x9d8>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	f7fa fc85 	bl	80005f0 <__aeabi_dmul>
 8005ce6:	a35c      	add	r3, pc, #368	; (adr r3, 8005e58 <__ieee754_pow+0x9e0>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa facc 	bl	8000288 <__aeabi_dsub>
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	462b      	mov	r3, r5
 8005cf4:	f7fa fc7c 	bl	80005f0 <__aeabi_dmul>
 8005cf8:	a359      	add	r3, pc, #356	; (adr r3, 8005e60 <__ieee754_pow+0x9e8>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fac5 	bl	800028c <__adddf3>
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	f7fa fc73 	bl	80005f0 <__aeabi_dmul>
 8005d0a:	a357      	add	r3, pc, #348	; (adr r3, 8005e68 <__ieee754_pow+0x9f0>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa faba 	bl	8000288 <__aeabi_dsub>
 8005d14:	4622      	mov	r2, r4
 8005d16:	462b      	mov	r3, r5
 8005d18:	f7fa fc6a 	bl	80005f0 <__aeabi_dmul>
 8005d1c:	a354      	add	r3, pc, #336	; (adr r3, 8005e70 <__ieee754_pow+0x9f8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fab3 	bl	800028c <__adddf3>
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	f7fa fc61 	bl	80005f0 <__aeabi_dmul>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa faa7 	bl	8000288 <__aeabi_dsub>
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fc53 	bl	80005f0 <__aeabi_dmul>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8005d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fa96 	bl	8000288 <__aeabi_dsub>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d64:	f7fa fd6e 	bl	8000844 <__aeabi_ddiv>
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4640      	mov	r0, r8
 8005d72:	4649      	mov	r1, r9
 8005d74:	f7fa fc3c 	bl	80005f0 <__aeabi_dmul>
 8005d78:	4632      	mov	r2, r6
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	f7fa fa86 	bl	800028c <__adddf3>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4620      	mov	r0, r4
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7fa fa7e 	bl	8000288 <__aeabi_dsub>
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	f7fa fa7a 	bl	8000288 <__aeabi_dsub>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	2000      	movs	r0, #0
 8005d9a:	493b      	ldr	r1, [pc, #236]	; (8005e88 <__ieee754_pow+0xa10>)
 8005d9c:	f7fa fa74 	bl	8000288 <__aeabi_dsub>
 8005da0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005da4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	da31      	bge.n	8005e12 <__ieee754_pow+0x99a>
 8005dae:	4650      	mov	r0, sl
 8005db0:	ec43 2b10 	vmov	d0, r2, r3
 8005db4:	f000 f9c4 	bl	8006140 <scalbn>
 8005db8:	ec51 0b10 	vmov	r0, r1, d0
 8005dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dc0:	f7ff bbf1 	b.w	80055a6 <__ieee754_pow+0x12e>
 8005dc4:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <__ieee754_pow+0xa14>)
 8005dc6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dca:	429e      	cmp	r6, r3
 8005dcc:	f77f af0c 	ble.w	8005be8 <__ieee754_pow+0x770>
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <__ieee754_pow+0xa18>)
 8005dd2:	440b      	add	r3, r1
 8005dd4:	4303      	orrs	r3, r0
 8005dd6:	d00b      	beq.n	8005df0 <__ieee754_pow+0x978>
 8005dd8:	a327      	add	r3, pc, #156	; (adr r3, 8005e78 <__ieee754_pow+0xa00>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de2:	f7fa fc05 	bl	80005f0 <__aeabi_dmul>
 8005de6:	a324      	add	r3, pc, #144	; (adr r3, 8005e78 <__ieee754_pow+0xa00>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7ff bbdb 	b.w	80055a6 <__ieee754_pow+0x12e>
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	f7fa fa48 	bl	8000288 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa fe72 	bl	8000ae8 <__aeabi_dcmple>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f43f aeef 	beq.w	8005be8 <__ieee754_pow+0x770>
 8005e0a:	e7e5      	b.n	8005dd8 <__ieee754_pow+0x960>
 8005e0c:	f04f 0a00 	mov.w	sl, #0
 8005e10:	e716      	b.n	8005c40 <__ieee754_pow+0x7c8>
 8005e12:	4621      	mov	r1, r4
 8005e14:	e7d2      	b.n	8005dbc <__ieee754_pow+0x944>
 8005e16:	2000      	movs	r0, #0
 8005e18:	491b      	ldr	r1, [pc, #108]	; (8005e88 <__ieee754_pow+0xa10>)
 8005e1a:	f7ff bb8d 	b.w	8005538 <__ieee754_pow+0xc0>
 8005e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e22:	f7ff bb89 	b.w	8005538 <__ieee754_pow+0xc0>
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7ff bb85 	b.w	8005538 <__ieee754_pow+0xc0>
 8005e2e:	4693      	mov	fp, r2
 8005e30:	f7ff bb96 	b.w	8005560 <__ieee754_pow+0xe8>
 8005e34:	f3af 8000 	nop.w
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	3fe62e43 	.word	0x3fe62e43
 8005e40:	fefa39ef 	.word	0xfefa39ef
 8005e44:	3fe62e42 	.word	0x3fe62e42
 8005e48:	0ca86c39 	.word	0x0ca86c39
 8005e4c:	be205c61 	.word	0xbe205c61
 8005e50:	72bea4d0 	.word	0x72bea4d0
 8005e54:	3e663769 	.word	0x3e663769
 8005e58:	c5d26bf1 	.word	0xc5d26bf1
 8005e5c:	3ebbbd41 	.word	0x3ebbbd41
 8005e60:	af25de2c 	.word	0xaf25de2c
 8005e64:	3f11566a 	.word	0x3f11566a
 8005e68:	16bebd93 	.word	0x16bebd93
 8005e6c:	3f66c16c 	.word	0x3f66c16c
 8005e70:	5555553e 	.word	0x5555553e
 8005e74:	3fc55555 	.word	0x3fc55555
 8005e78:	c2f8f359 	.word	0xc2f8f359
 8005e7c:	01a56e1f 	.word	0x01a56e1f
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	000fffff 	.word	0x000fffff
 8005e88:	3ff00000 	.word	0x3ff00000
 8005e8c:	4090cbff 	.word	0x4090cbff
 8005e90:	3f6f3400 	.word	0x3f6f3400
 8005e94:	652b82fe 	.word	0x652b82fe
 8005e98:	3c971547 	.word	0x3c971547

08005e9c <__ieee754_sqrt>:
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	ec55 4b10 	vmov	r4, r5, d0
 8005ea4:	4e54      	ldr	r6, [pc, #336]	; (8005ff8 <__ieee754_sqrt+0x15c>)
 8005ea6:	43ae      	bics	r6, r5
 8005ea8:	ee10 0a10 	vmov	r0, s0
 8005eac:	462b      	mov	r3, r5
 8005eae:	462a      	mov	r2, r5
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	d113      	bne.n	8005edc <__ieee754_sqrt+0x40>
 8005eb4:	ee10 2a10 	vmov	r2, s0
 8005eb8:	462b      	mov	r3, r5
 8005eba:	ee10 0a10 	vmov	r0, s0
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa fb96 	bl	80005f0 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa f9de 	bl	800028c <__adddf3>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	ec45 4b10 	vmov	d0, r4, r5
 8005ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	dc10      	bgt.n	8005f02 <__ieee754_sqrt+0x66>
 8005ee0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ee4:	4330      	orrs	r0, r6
 8005ee6:	d0f5      	beq.n	8005ed4 <__ieee754_sqrt+0x38>
 8005ee8:	b15d      	cbz	r5, 8005f02 <__ieee754_sqrt+0x66>
 8005eea:	ee10 2a10 	vmov	r2, s0
 8005eee:	462b      	mov	r3, r5
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	f7fa f9c8 	bl	8000288 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	f7fa fca2 	bl	8000844 <__aeabi_ddiv>
 8005f00:	e7e6      	b.n	8005ed0 <__ieee754_sqrt+0x34>
 8005f02:	151b      	asrs	r3, r3, #20
 8005f04:	d10c      	bne.n	8005f20 <__ieee754_sqrt+0x84>
 8005f06:	2a00      	cmp	r2, #0
 8005f08:	d06d      	beq.n	8005fe6 <__ieee754_sqrt+0x14a>
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	02d6      	lsls	r6, r2, #11
 8005f0e:	d56e      	bpl.n	8005fee <__ieee754_sqrt+0x152>
 8005f10:	1e44      	subs	r4, r0, #1
 8005f12:	1b1b      	subs	r3, r3, r4
 8005f14:	f1c0 0420 	rsb	r4, r0, #32
 8005f18:	fa21 f404 	lsr.w	r4, r1, r4
 8005f1c:	4322      	orrs	r2, r4
 8005f1e:	4081      	lsls	r1, r0
 8005f20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f24:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005f28:	07dd      	lsls	r5, r3, #31
 8005f2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f2e:	bf42      	ittt	mi
 8005f30:	0052      	lslmi	r2, r2, #1
 8005f32:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8005f36:	0049      	lslmi	r1, r1, #1
 8005f38:	1058      	asrs	r0, r3, #1
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005f40:	441a      	add	r2, r3
 8005f42:	0049      	lsls	r1, r1, #1
 8005f44:	2316      	movs	r3, #22
 8005f46:	462c      	mov	r4, r5
 8005f48:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005f4c:	19a7      	adds	r7, r4, r6
 8005f4e:	4297      	cmp	r7, r2
 8005f50:	bfde      	ittt	le
 8005f52:	1bd2      	suble	r2, r2, r7
 8005f54:	19bc      	addle	r4, r7, r6
 8005f56:	19ad      	addle	r5, r5, r6
 8005f58:	0052      	lsls	r2, r2, #1
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005f60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005f68:	d1f0      	bne.n	8005f4c <__ieee754_sqrt+0xb0>
 8005f6a:	f04f 0e20 	mov.w	lr, #32
 8005f6e:	469c      	mov	ip, r3
 8005f70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f74:	42a2      	cmp	r2, r4
 8005f76:	eb06 070c 	add.w	r7, r6, ip
 8005f7a:	dc02      	bgt.n	8005f82 <__ieee754_sqrt+0xe6>
 8005f7c:	d112      	bne.n	8005fa4 <__ieee754_sqrt+0x108>
 8005f7e:	428f      	cmp	r7, r1
 8005f80:	d810      	bhi.n	8005fa4 <__ieee754_sqrt+0x108>
 8005f82:	2f00      	cmp	r7, #0
 8005f84:	eb07 0c06 	add.w	ip, r7, r6
 8005f88:	da34      	bge.n	8005ff4 <__ieee754_sqrt+0x158>
 8005f8a:	f1bc 0f00 	cmp.w	ip, #0
 8005f8e:	db31      	blt.n	8005ff4 <__ieee754_sqrt+0x158>
 8005f90:	f104 0801 	add.w	r8, r4, #1
 8005f94:	1b12      	subs	r2, r2, r4
 8005f96:	428f      	cmp	r7, r1
 8005f98:	bf88      	it	hi
 8005f9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005f9e:	1bc9      	subs	r1, r1, r7
 8005fa0:	4433      	add	r3, r6
 8005fa2:	4644      	mov	r4, r8
 8005fa4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005fa8:	f1be 0e01 	subs.w	lr, lr, #1
 8005fac:	443a      	add	r2, r7
 8005fae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005fb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005fb6:	d1dd      	bne.n	8005f74 <__ieee754_sqrt+0xd8>
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	d006      	beq.n	8005fca <__ieee754_sqrt+0x12e>
 8005fbc:	1c5c      	adds	r4, r3, #1
 8005fbe:	bf13      	iteet	ne
 8005fc0:	3301      	addne	r3, #1
 8005fc2:	3501      	addeq	r5, #1
 8005fc4:	4673      	moveq	r3, lr
 8005fc6:	f023 0301 	bicne.w	r3, r3, #1
 8005fca:	106a      	asrs	r2, r5, #1
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	07e9      	lsls	r1, r5, #31
 8005fd0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005fd4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005fd8:	bf48      	it	mi
 8005fda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	e776      	b.n	8005ed4 <__ieee754_sqrt+0x38>
 8005fe6:	0aca      	lsrs	r2, r1, #11
 8005fe8:	3b15      	subs	r3, #21
 8005fea:	0549      	lsls	r1, r1, #21
 8005fec:	e78b      	b.n	8005f06 <__ieee754_sqrt+0x6a>
 8005fee:	0052      	lsls	r2, r2, #1
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	e78b      	b.n	8005f0c <__ieee754_sqrt+0x70>
 8005ff4:	46a0      	mov	r8, r4
 8005ff6:	e7cd      	b.n	8005f94 <__ieee754_sqrt+0xf8>
 8005ff8:	7ff00000 	.word	0x7ff00000

08005ffc <fabs>:
 8005ffc:	ec53 2b10 	vmov	r2, r3, d0
 8006000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006004:	ec43 2b10 	vmov	d0, r2, r3
 8006008:	4770      	bx	lr

0800600a <finite>:
 800600a:	ee10 3a90 	vmov	r3, s1
 800600e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006012:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006016:	0fc0      	lsrs	r0, r0, #31
 8006018:	4770      	bx	lr

0800601a <matherr>:
 800601a:	2000      	movs	r0, #0
 800601c:	4770      	bx	lr
	...

08006020 <nan>:
 8006020:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006028 <nan+0x8>
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	00000000 	.word	0x00000000
 800602c:	7ff80000 	.word	0x7ff80000

08006030 <rint>:
 8006030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006032:	ec51 0b10 	vmov	r0, r1, d0
 8006036:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800603a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800603e:	2e13      	cmp	r6, #19
 8006040:	ee10 7a10 	vmov	r7, s0
 8006044:	460b      	mov	r3, r1
 8006046:	4602      	mov	r2, r0
 8006048:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800604c:	dc58      	bgt.n	8006100 <rint+0xd0>
 800604e:	2e00      	cmp	r6, #0
 8006050:	da2b      	bge.n	80060aa <rint+0x7a>
 8006052:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006056:	4302      	orrs	r2, r0
 8006058:	d023      	beq.n	80060a2 <rint+0x72>
 800605a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800605e:	4302      	orrs	r2, r0
 8006060:	4251      	negs	r1, r2
 8006062:	4311      	orrs	r1, r2
 8006064:	0b09      	lsrs	r1, r1, #12
 8006066:	0c5b      	lsrs	r3, r3, #17
 8006068:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800606c:	045b      	lsls	r3, r3, #17
 800606e:	ea41 0703 	orr.w	r7, r1, r3
 8006072:	4b31      	ldr	r3, [pc, #196]	; (8006138 <rint+0x108>)
 8006074:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006078:	4639      	mov	r1, r7
 800607a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800607e:	ee10 0a10 	vmov	r0, s0
 8006082:	4632      	mov	r2, r6
 8006084:	463b      	mov	r3, r7
 8006086:	f7fa f901 	bl	800028c <__adddf3>
 800608a:	e9cd 0100 	strd	r0, r1, [sp]
 800608e:	463b      	mov	r3, r7
 8006090:	4632      	mov	r2, r6
 8006092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006096:	f7fa f8f7 	bl	8000288 <__aeabi_dsub>
 800609a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800609e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80060a2:	ec41 0b10 	vmov	d0, r0, r1
 80060a6:	b003      	add	sp, #12
 80060a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060aa:	4c24      	ldr	r4, [pc, #144]	; (800613c <rint+0x10c>)
 80060ac:	4134      	asrs	r4, r6
 80060ae:	ea01 0704 	and.w	r7, r1, r4
 80060b2:	4307      	orrs	r7, r0
 80060b4:	d0f5      	beq.n	80060a2 <rint+0x72>
 80060b6:	0861      	lsrs	r1, r4, #1
 80060b8:	ea03 0001 	and.w	r0, r3, r1
 80060bc:	4302      	orrs	r2, r0
 80060be:	d00b      	beq.n	80060d8 <rint+0xa8>
 80060c0:	ea23 0101 	bic.w	r1, r3, r1
 80060c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80060c8:	2e13      	cmp	r6, #19
 80060ca:	fa43 f306 	asr.w	r3, r3, r6
 80060ce:	bf0c      	ite	eq
 80060d0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80060d4:	2200      	movne	r2, #0
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4619      	mov	r1, r3
 80060da:	4b17      	ldr	r3, [pc, #92]	; (8006138 <rint+0x108>)
 80060dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80060e4:	4610      	mov	r0, r2
 80060e6:	462b      	mov	r3, r5
 80060e8:	4622      	mov	r2, r4
 80060ea:	f7fa f8cf 	bl	800028c <__adddf3>
 80060ee:	e9cd 0100 	strd	r0, r1, [sp]
 80060f2:	4622      	mov	r2, r4
 80060f4:	462b      	mov	r3, r5
 80060f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060fa:	f7fa f8c5 	bl	8000288 <__aeabi_dsub>
 80060fe:	e7d0      	b.n	80060a2 <rint+0x72>
 8006100:	2e33      	cmp	r6, #51	; 0x33
 8006102:	dd08      	ble.n	8006116 <rint+0xe6>
 8006104:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006108:	d1cb      	bne.n	80060a2 <rint+0x72>
 800610a:	ee10 2a10 	vmov	r2, s0
 800610e:	460b      	mov	r3, r1
 8006110:	f7fa f8bc 	bl	800028c <__adddf3>
 8006114:	e7c5      	b.n	80060a2 <rint+0x72>
 8006116:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800611a:	f04f 34ff 	mov.w	r4, #4294967295
 800611e:	40f4      	lsrs	r4, r6
 8006120:	4220      	tst	r0, r4
 8006122:	d0be      	beq.n	80060a2 <rint+0x72>
 8006124:	0861      	lsrs	r1, r4, #1
 8006126:	420f      	tst	r7, r1
 8006128:	bf1f      	itttt	ne
 800612a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800612e:	ea27 0101 	bicne.w	r1, r7, r1
 8006132:	4132      	asrne	r2, r6
 8006134:	430a      	orrne	r2, r1
 8006136:	e7cf      	b.n	80060d8 <rint+0xa8>
 8006138:	080065d0 	.word	0x080065d0
 800613c:	000fffff 	.word	0x000fffff

08006140 <scalbn>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	ec55 4b10 	vmov	r4, r5, d0
 8006146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800614a:	4606      	mov	r6, r0
 800614c:	462b      	mov	r3, r5
 800614e:	b9b2      	cbnz	r2, 800617e <scalbn+0x3e>
 8006150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006154:	4323      	orrs	r3, r4
 8006156:	d03c      	beq.n	80061d2 <scalbn+0x92>
 8006158:	2200      	movs	r2, #0
 800615a:	4b33      	ldr	r3, [pc, #204]	; (8006228 <scalbn+0xe8>)
 800615c:	4629      	mov	r1, r5
 800615e:	ee10 0a10 	vmov	r0, s0
 8006162:	f7fa fa45 	bl	80005f0 <__aeabi_dmul>
 8006166:	4a31      	ldr	r2, [pc, #196]	; (800622c <scalbn+0xec>)
 8006168:	4296      	cmp	r6, r2
 800616a:	4604      	mov	r4, r0
 800616c:	460d      	mov	r5, r1
 800616e:	460b      	mov	r3, r1
 8006170:	da13      	bge.n	800619a <scalbn+0x5a>
 8006172:	a329      	add	r3, pc, #164	; (adr r3, 8006218 <scalbn+0xd8>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f7fa fa3a 	bl	80005f0 <__aeabi_dmul>
 800617c:	e00a      	b.n	8006194 <scalbn+0x54>
 800617e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006182:	428a      	cmp	r2, r1
 8006184:	d10c      	bne.n	80061a0 <scalbn+0x60>
 8006186:	ee10 2a10 	vmov	r2, s0
 800618a:	462b      	mov	r3, r5
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa f87c 	bl	800028c <__adddf3>
 8006194:	4604      	mov	r4, r0
 8006196:	460d      	mov	r5, r1
 8006198:	e01b      	b.n	80061d2 <scalbn+0x92>
 800619a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800619e:	3a36      	subs	r2, #54	; 0x36
 80061a0:	4432      	add	r2, r6
 80061a2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061a6:	428a      	cmp	r2, r1
 80061a8:	dd0b      	ble.n	80061c2 <scalbn+0x82>
 80061aa:	ec45 4b11 	vmov	d1, r4, r5
 80061ae:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006220 <scalbn+0xe0>
 80061b2:	f000 f83f 	bl	8006234 <copysign>
 80061b6:	a31a      	add	r3, pc, #104	; (adr r3, 8006220 <scalbn+0xe0>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	ec51 0b10 	vmov	r0, r1, d0
 80061c0:	e7da      	b.n	8006178 <scalbn+0x38>
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	dd08      	ble.n	80061d8 <scalbn+0x98>
 80061c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061d2:	ec45 4b10 	vmov	d0, r4, r5
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061dc:	da0d      	bge.n	80061fa <scalbn+0xba>
 80061de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061e2:	429e      	cmp	r6, r3
 80061e4:	ec45 4b11 	vmov	d1, r4, r5
 80061e8:	dce1      	bgt.n	80061ae <scalbn+0x6e>
 80061ea:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006218 <scalbn+0xd8>
 80061ee:	f000 f821 	bl	8006234 <copysign>
 80061f2:	a309      	add	r3, pc, #36	; (adr r3, 8006218 <scalbn+0xd8>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	e7e0      	b.n	80061bc <scalbn+0x7c>
 80061fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061fe:	3236      	adds	r2, #54	; 0x36
 8006200:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006204:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	2200      	movs	r2, #0
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <scalbn+0xf0>)
 8006210:	e7b2      	b.n	8006178 <scalbn+0x38>
 8006212:	bf00      	nop
 8006214:	f3af 8000 	nop.w
 8006218:	c2f8f359 	.word	0xc2f8f359
 800621c:	01a56e1f 	.word	0x01a56e1f
 8006220:	8800759c 	.word	0x8800759c
 8006224:	7e37e43c 	.word	0x7e37e43c
 8006228:	43500000 	.word	0x43500000
 800622c:	ffff3cb0 	.word	0xffff3cb0
 8006230:	3c900000 	.word	0x3c900000

08006234 <copysign>:
 8006234:	ec53 2b10 	vmov	r2, r3, d0
 8006238:	ee11 0a90 	vmov	r0, s3
 800623c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006240:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006244:	ea41 0300 	orr.w	r3, r1, r0
 8006248:	ec43 2b10 	vmov	d0, r2, r3
 800624c:	4770      	bx	lr
	...

08006250 <__errno>:
 8006250:	4b01      	ldr	r3, [pc, #4]	; (8006258 <__errno+0x8>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	2000000c 	.word	0x2000000c

0800625c <_sbrk>:
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <_sbrk+0x14>)
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	4602      	mov	r2, r0
 8006262:	b909      	cbnz	r1, 8006268 <_sbrk+0xc>
 8006264:	4903      	ldr	r1, [pc, #12]	; (8006274 <_sbrk+0x18>)
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	4402      	add	r2, r0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	4770      	bx	lr
 8006270:	20000208 	.word	0x20000208
 8006274:	20000394 	.word	0x20000394

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
