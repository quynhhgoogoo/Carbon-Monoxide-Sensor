
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08002344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  20000008  0800234c  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000164  0800234c  00020164  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e460  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fca  00000000  00000000  0002e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000075b8  00000000  00000000  00030462  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a28  00000000  00000000  00037a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b98  00000000  00000000  00038448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000577b  00000000  00000000  00038fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a88  00000000  00000000  0003e75b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000421e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c54  00000000  00000000  00042260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000008 	.word	0x20000008
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080022c0 	.word	0x080022c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	080022c0 	.word	0x080022c0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97a 	b.w	80004d8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9e08      	ldr	r6, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d151      	bne.n	80002b0 <__udivmoddi4+0xb4>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96d      	bls.n	80002ee <__udivmoddi4+0xf2>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0c20 	rsb	ip, lr, #32
 8000220:	fa01 f50e 	lsl.w	r5, r1, lr
 8000224:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000238:	0c25      	lsrs	r5, r4, #16
 800023a:	fbbc f8fa 	udiv	r8, ip, sl
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb0a cc18 	mls	ip, sl, r8, ip
 8000246:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024a:	fb08 f309 	mul.w	r3, r8, r9
 800024e:	42ab      	cmp	r3, r5
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x6c>
 8000252:	19ed      	adds	r5, r5, r7
 8000254:	f108 32ff 	add.w	r2, r8, #4294967295
 8000258:	f080 8123 	bcs.w	80004a2 <__udivmoddi4+0x2a6>
 800025c:	42ab      	cmp	r3, r5
 800025e:	f240 8120 	bls.w	80004a2 <__udivmoddi4+0x2a6>
 8000262:	f1a8 0802 	sub.w	r8, r8, #2
 8000266:	443d      	add	r5, r7
 8000268:	1aed      	subs	r5, r5, r3
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000270:	fb0a 5510 	mls	r5, sl, r0, r5
 8000274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000278:	fb00 f909 	mul.w	r9, r0, r9
 800027c:	45a1      	cmp	r9, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x98>
 8000280:	19e4      	adds	r4, r4, r7
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 810a 	bcs.w	800049e <__udivmoddi4+0x2a2>
 800028a:	45a1      	cmp	r9, r4
 800028c:	f240 8107 	bls.w	800049e <__udivmoddi4+0x2a2>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	eba4 0409 	sub.w	r4, r4, r9
 8000298:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d061      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a6:	2300      	movs	r3, #0
 80002a8:	6034      	str	r4, [r6, #0]
 80002aa:	6073      	str	r3, [r6, #4]
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0xc8>
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d054      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e886 0021 	stmia.w	r6, {r0, r5}
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	f040 808e 	bne.w	80003ea <__udivmoddi4+0x1ee>
 80002ce:	42ab      	cmp	r3, r5
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xdc>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2d0>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb65 0503 	sbc.w	r5, r5, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	46ac      	mov	ip, r5
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d03f      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b912      	cbnz	r2, 80002f6 <__udivmoddi4+0xfa>
 80002f0:	2701      	movs	r7, #1
 80002f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f6:	fab7 fe87 	clz	lr, r7
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d134      	bne.n	800036a <__udivmoddi4+0x16e>
 8000300:	1beb      	subs	r3, r5, r7
 8000302:	0c3a      	lsrs	r2, r7, #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f8f2 	udiv	r8, r3, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	fb02 3318 	mls	r3, r2, r8, r3
 8000314:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000318:	fb0c f308 	mul.w	r3, ip, r8
 800031c:	42ab      	cmp	r3, r5
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19ed      	adds	r5, r5, r7
 8000322:	f108 30ff 	add.w	r0, r8, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42ab      	cmp	r3, r5
 800032a:	f200 80d1 	bhi.w	80004d0 <__udivmoddi4+0x2d4>
 800032e:	4680      	mov	r8, r0
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb5 f0f2 	udiv	r0, r5, r2
 8000338:	fb02 5510 	mls	r5, r2, r0, r5
 800033c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000340:	fb0c fc00 	mul.w	ip, ip, r0
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 040c 	sub.w	r4, r4, ip
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	e79d      	b.n	800029e <__udivmoddi4+0xa2>
 8000362:	4631      	mov	r1, r6
 8000364:	4630      	mov	r0, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0420 	rsb	r4, lr, #32
 800036e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f804 	lsr.w	r8, r0, r4
 800037a:	0c3a      	lsrs	r2, r7, #16
 800037c:	fa25 f404 	lsr.w	r4, r5, r4
 8000380:	ea48 0803 	orr.w	r8, r8, r3
 8000384:	fbb4 f1f2 	udiv	r1, r4, r2
 8000388:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800038c:	fb02 4411 	mls	r4, r2, r1, r4
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000398:	fb01 f30c 	mul.w	r3, r1, ip
 800039c:	42ab      	cmp	r3, r5
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1bc>
 80003a4:	19ed      	adds	r5, r5, r7
 80003a6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003aa:	f080 808a 	bcs.w	80004c2 <__udivmoddi4+0x2c6>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	f240 8087 	bls.w	80004c2 <__udivmoddi4+0x2c6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	1aeb      	subs	r3, r5, r3
 80003ba:	fa1f f588 	uxth.w	r5, r8
 80003be:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c2:	fb02 3310 	mls	r3, r2, r0, r3
 80003c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ca:	fb00 f30c 	mul.w	r3, r0, ip
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1e6>
 80003d2:	19ed      	adds	r5, r5, r7
 80003d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d8:	d26f      	bcs.n	80004ba <__udivmoddi4+0x2be>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0x2be>
 80003de:	3802      	subs	r0, #2
 80003e0:	443d      	add	r5, r7
 80003e2:	1aeb      	subs	r3, r5, r3
 80003e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e8:	e78f      	b.n	800030a <__udivmoddi4+0x10e>
 80003ea:	f1c1 0720 	rsb	r7, r1, #32
 80003ee:	fa22 f807 	lsr.w	r8, r2, r7
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa05 f401 	lsl.w	r4, r5, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	40fd      	lsrs	r5, r7
 8000406:	ea4e 0e04 	orr.w	lr, lr, r4
 800040a:	fbb5 f9fc 	udiv	r9, r5, ip
 800040e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000412:	fb0c 5519 	mls	r5, ip, r9, r5
 8000416:	fa1f f883 	uxth.w	r8, r3
 800041a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041e:	fb09 f408 	mul.w	r4, r9, r8
 8000422:	42ac      	cmp	r4, r5
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 fa01 	lsl.w	sl, r0, r1
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x244>
 800042e:	18ed      	adds	r5, r5, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d243      	bcs.n	80004be <__udivmoddi4+0x2c2>
 8000436:	42ac      	cmp	r4, r5
 8000438:	d941      	bls.n	80004be <__udivmoddi4+0x2c2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	441d      	add	r5, r3
 8000440:	1b2d      	subs	r5, r5, r4
 8000442:	fa1f fe8e 	uxth.w	lr, lr
 8000446:	fbb5 f0fc 	udiv	r0, r5, ip
 800044a:	fb0c 5510 	mls	r5, ip, r0, r5
 800044e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45a0      	cmp	r8, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26e>
 800045a:	18e4      	adds	r4, r4, r3
 800045c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000460:	d229      	bcs.n	80004b6 <__udivmoddi4+0x2ba>
 8000462:	45a0      	cmp	r8, r4
 8000464:	d927      	bls.n	80004b6 <__udivmoddi4+0x2ba>
 8000466:	3802      	subs	r0, #2
 8000468:	441c      	add	r4, r3
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454c      	cmp	r4, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	464d      	mov	r5, r9
 800047c:	d315      	bcc.n	80004aa <__udivmoddi4+0x2ae>
 800047e:	d012      	beq.n	80004a6 <__udivmoddi4+0x2aa>
 8000480:	b156      	cbz	r6, 8000498 <__udivmoddi4+0x29c>
 8000482:	ebba 030e 	subs.w	r3, sl, lr
 8000486:	eb64 0405 	sbc.w	r4, r4, r5
 800048a:	fa04 f707 	lsl.w	r7, r4, r7
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	6037      	str	r7, [r6, #0]
 8000496:	6074      	str	r4, [r6, #4]
 8000498:	2100      	movs	r1, #0
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	4618      	mov	r0, r3
 80004a0:	e6f8      	b.n	8000294 <__udivmoddi4+0x98>
 80004a2:	4690      	mov	r8, r2
 80004a4:	e6e0      	b.n	8000268 <__udivmoddi4+0x6c>
 80004a6:	45c2      	cmp	sl, r8
 80004a8:	d2ea      	bcs.n	8000480 <__udivmoddi4+0x284>
 80004aa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ae:	eb69 0503 	sbc.w	r5, r9, r3
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7e4      	b.n	8000480 <__udivmoddi4+0x284>
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7d7      	b.n	800046a <__udivmoddi4+0x26e>
 80004ba:	4640      	mov	r0, r8
 80004bc:	e791      	b.n	80003e2 <__udivmoddi4+0x1e6>
 80004be:	4681      	mov	r9, r0
 80004c0:	e7be      	b.n	8000440 <__udivmoddi4+0x244>
 80004c2:	4601      	mov	r1, r0
 80004c4:	e778      	b.n	80003b8 <__udivmoddi4+0x1bc>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	e745      	b.n	8000358 <__udivmoddi4+0x15c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004d0:	f1a8 0802 	sub.w	r8, r8, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	e72b      	b.n	8000330 <__udivmoddi4+0x134>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_InitTick+0x2c>)
{
 80004e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f880 	bl	80005f0 <HAL_SYSTICK_Config>
 80004f0:	4604      	mov	r4, r0
 80004f2:	b938      	cbnz	r0, 8000504 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004f4:	4602      	mov	r2, r0
 80004f6:	4629      	mov	r1, r5
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f000 f844 	bl	8000588 <HAL_NVIC_SetPriority>
 8000500:	4620      	mov	r0, r4
 8000502:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000504:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000506:	bd38      	pop	{r3, r4, r5, pc}
 8000508:	20000004 	.word	0x20000004

0800050c <HAL_Init>:
{
 800050c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050e:	2003      	movs	r0, #3
 8000510:	f000 f828 	bl	8000564 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffe1 	bl	80004dc <HAL_InitTick>
 800051a:	4604      	mov	r4, r0
 800051c:	b918      	cbnz	r0, 8000526 <HAL_Init+0x1a>
    HAL_MspInit();
 800051e:	f001 fd93 	bl	8002048 <HAL_MspInit>
}
 8000522:	4620      	mov	r0, r4
 8000524:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000526:	2401      	movs	r4, #1
 8000528:	e7fb      	b.n	8000522 <HAL_Init+0x16>
	...

0800052c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800052c:	4a02      	ldr	r2, [pc, #8]	; (8000538 <HAL_IncTick+0xc>)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000024 	.word	0x20000024

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000024 	.word	0x20000024

08000548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
 800054a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff fff6 	bl	800053c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000550:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000552:	4605      	mov	r5, r0
  {
    wait++;
 8000554:	bf18      	it	ne
 8000556:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000558:	f7ff fff0 	bl	800053c <HAL_GetTick>
 800055c:	1b40      	subs	r0, r0, r5
 800055e:	4284      	cmp	r4, r0
 8000560:	d8fa      	bhi.n	8000558 <HAL_Delay+0x10>
  {
  }
}
 8000562:	bd38      	pop	{r3, r4, r5, pc}

08000564 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000566:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000568:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800056c:	041b      	lsls	r3, r3, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000574:	0200      	lsls	r0, r0, #8
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800057e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000580:	60d3      	str	r3, [r2, #12]
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	68dc      	ldr	r4, [r3, #12]
 800058e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000592:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000598:	2b04      	cmp	r3, #4
 800059a:	bf28      	it	cs
 800059c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	f04f 0501 	mov.w	r5, #1
 80005a4:	fa05 f303 	lsl.w	r3, r5, r3
 80005a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ac:	bf8c      	ite	hi
 80005ae:	3c03      	subhi	r4, #3
 80005b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b2:	4019      	ands	r1, r3
 80005b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b6:	fa05 f404 	lsl.w	r4, r5, r4
 80005ba:	3c01      	subs	r4, #1
 80005bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c0:	ea42 0201 	orr.w	r2, r2, r1
 80005c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	bfaf      	iteee	ge
 80005ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	f000 000f 	andlt.w	r0, r0, #15
 80005d2:	4b06      	ldrlt	r3, [pc, #24]	; (80005ec <HAL_NVIC_SetPriority+0x64>)
 80005d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	bfa5      	ittet	ge
 80005d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	e000ed14 	.word	0xe000ed14

080005f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f0:	3801      	subs	r0, #1
 80005f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f6:	d20a      	bcs.n	800060e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	21f0      	movs	r1, #240	; 0xf0
 8000600:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000608:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000e010 	.word	0xe000e010
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000620:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000622:	bf0c      	ite	eq
 8000624:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000628:	f022 0204 	bicne.w	r2, r2, #4
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	4770      	bx	lr
 8000630:	e000e010 	.word	0xe000e010

08000634 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000634:	4770      	bx	lr

08000636 <HAL_SYSTICK_IRQHandler>:
{
 8000636:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000638:	f7ff fffc 	bl	8000634 <HAL_SYSTICK_Callback>
 800063c:	bd08      	pop	{r3, pc}
	...

08000640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000644:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000646:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000648:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80007a4 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800064c:	4a53      	ldr	r2, [pc, #332]	; (800079c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800064e:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000650:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000654:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000656:	9c01      	ldr	r4, [sp, #4]
 8000658:	40dc      	lsrs	r4, r3
 800065a:	d102      	bne.n	8000662 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 800065c:	b005      	add	sp, #20
 800065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000662:	2401      	movs	r4, #1
 8000664:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000668:	9c01      	ldr	r4, [sp, #4]
 800066a:	ea14 050a 	ands.w	r5, r4, sl
 800066e:	f000 808f 	beq.w	8000790 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000672:	684c      	ldr	r4, [r1, #4]
 8000674:	f024 0b10 	bic.w	fp, r4, #16
 8000678:	f1bb 0f02 	cmp.w	fp, #2
 800067c:	d111      	bne.n	80006a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 800067e:	08df      	lsrs	r7, r3, #3
 8000680:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000684:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000688:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800068a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800068e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000692:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000696:	690e      	ldr	r6, [r1, #16]
 8000698:	fa06 f60e 	lsl.w	r6, r6, lr
 800069c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 80006a0:	623e      	str	r6, [r7, #32]
 80006a2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006a6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80006a8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006aa:	fa07 f70c 	lsl.w	r7, r7, ip
 80006ae:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006b0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006b4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006b6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ba:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006be:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80006c6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c8:	d811      	bhi.n	80006ee <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80006ca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80006cc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006d0:	68ce      	ldr	r6, [r1, #12]
 80006d2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80006d6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80006da:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006dc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006de:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80006e2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80006e6:	409e      	lsls	r6, r3
 80006e8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80006ec:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ee:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80006f0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006f2:	688e      	ldr	r6, [r1, #8]
 80006f4:	fa06 f60c 	lsl.w	r6, r6, ip
 80006f8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fa:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80006fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fe:	d547      	bpl.n	8000790 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000700:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000704:	f046 0601 	orr.w	r6, r6, #1
 8000708:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 800070c:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000710:	f023 0703 	bic.w	r7, r3, #3
 8000714:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000718:	f006 0601 	and.w	r6, r6, #1
 800071c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000720:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000722:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000728:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800072a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800072e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000732:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000736:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800073a:	d02b      	beq.n	8000794 <HAL_GPIO_Init+0x154>
 800073c:	4e18      	ldr	r6, [pc, #96]	; (80007a0 <HAL_GPIO_Init+0x160>)
 800073e:	42b0      	cmp	r0, r6
 8000740:	d02a      	beq.n	8000798 <HAL_GPIO_Init+0x158>
 8000742:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000746:	42b0      	cmp	r0, r6
 8000748:	bf14      	ite	ne
 800074a:	2607      	movne	r6, #7
 800074c:	2602      	moveq	r6, #2
 800074e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000752:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000756:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000758:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800075a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000760:	bf0c      	ite	eq
 8000762:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000764:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000766:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000768:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800076e:	bf0c      	ite	eq
 8000770:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000772:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000774:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000776:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000778:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800077c:	bf0c      	ite	eq
 800077e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000780:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8000782:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8000784:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000786:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000788:	bf54      	ite	pl
 800078a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800078c:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 800078e:	60d6      	str	r6, [r2, #12]
    position++;
 8000790:	3301      	adds	r3, #1
 8000792:	e760      	b.n	8000656 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000794:	2600      	movs	r6, #0
 8000796:	e7da      	b.n	800074e <HAL_GPIO_Init+0x10e>
 8000798:	2601      	movs	r6, #1
 800079a:	e7d8      	b.n	800074e <HAL_GPIO_Init+0x10e>
 800079c:	40010400 	.word	0x40010400
 80007a0:	48000400 	.word	0x48000400
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a8:	b10a      	cbz	r2, 80007ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007aa:	6181      	str	r1, [r0, #24]
 80007ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ae:	6281      	str	r1, [r0, #40]	; 0x28
 80007b0:	4770      	bx	lr

080007b2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80007b2:	6803      	ldr	r3, [r0, #0]
 80007b4:	699a      	ldr	r2, [r3, #24]
 80007b6:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80007b8:	bf44      	itt	mi
 80007ba:	2200      	movmi	r2, #0
 80007bc:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80007be:	699a      	ldr	r2, [r3, #24]
 80007c0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80007c2:	bf5e      	ittt	pl
 80007c4:	699a      	ldrpl	r2, [r3, #24]
 80007c6:	f042 0201 	orrpl.w	r2, r2, #1
 80007ca:	619a      	strpl	r2, [r3, #24]
 80007cc:	4770      	bx	lr

080007ce <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80007d2:	6805      	ldr	r5, [r0, #0]
 80007d4:	4323      	orrs	r3, r4
 80007d6:	0d64      	lsrs	r4, r4, #21
 80007d8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80007dc:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80007e0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80007e4:	6868      	ldr	r0, [r5, #4]
 80007e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80007ea:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80007ee:	4319      	orrs	r1, r3
 80007f0:	f044 0403 	orr.w	r4, r4, #3
 80007f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007f8:	ea20 0404 	bic.w	r4, r0, r4
 80007fc:	4321      	orrs	r1, r4
 80007fe:	6069      	str	r1, [r5, #4]
 8000800:	bd30      	pop	{r4, r5, pc}

08000802 <I2C_WaitOnFlagUntilTimeout>:
{
 8000802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000806:	9f06      	ldr	r7, [sp, #24]
 8000808:	4604      	mov	r4, r0
 800080a:	4688      	mov	r8, r1
 800080c:	4616      	mov	r6, r2
 800080e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000810:	6822      	ldr	r2, [r4, #0]
 8000812:	6993      	ldr	r3, [r2, #24]
 8000814:	ea38 0303 	bics.w	r3, r8, r3
 8000818:	bf0c      	ite	eq
 800081a:	2301      	moveq	r3, #1
 800081c:	2300      	movne	r3, #0
 800081e:	42b3      	cmp	r3, r6
 8000820:	d002      	beq.n	8000828 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000822:	2000      	movs	r0, #0
}
 8000824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000828:	1c6b      	adds	r3, r5, #1
 800082a:	d0f2      	beq.n	8000812 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800082c:	f7ff fe86 	bl	800053c <HAL_GetTick>
 8000830:	1bc0      	subs	r0, r0, r7
 8000832:	4285      	cmp	r5, r0
 8000834:	d301      	bcc.n	800083a <I2C_WaitOnFlagUntilTimeout+0x38>
 8000836:	2d00      	cmp	r5, #0
 8000838:	d1ea      	bne.n	8000810 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800083a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000842:	2320      	movs	r3, #32
 8000844:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800084e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000852:	2001      	movs	r0, #1
 8000854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000858 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000858:	6803      	ldr	r3, [r0, #0]
{
 800085a:	b570      	push	{r4, r5, r6, lr}
 800085c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800085e:	6998      	ldr	r0, [r3, #24]
 8000860:	f010 0010 	ands.w	r0, r0, #16
{
 8000864:	460d      	mov	r5, r1
 8000866:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000868:	d116      	bne.n	8000898 <I2C_IsAcknowledgeFailed+0x40>
 800086a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800086c:	1c69      	adds	r1, r5, #1
 800086e:	d014      	beq.n	800089a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000870:	f7ff fe64 	bl	800053c <HAL_GetTick>
 8000874:	1b80      	subs	r0, r0, r6
 8000876:	4285      	cmp	r5, r0
 8000878:	d300      	bcc.n	800087c <I2C_IsAcknowledgeFailed+0x24>
 800087a:	b96d      	cbnz	r5, 8000898 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800087c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000884:	2320      	movs	r3, #32
 8000886:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800088a:	2300      	movs	r3, #0
 800088c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8000890:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8000894:	2001      	movs	r0, #1
}
 8000896:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	6999      	ldr	r1, [r3, #24]
 800089c:	068a      	lsls	r2, r1, #26
 800089e:	d5e5      	bpl.n	800086c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008a0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008a2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008a4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008a6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008a8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80008aa:	f7ff ff82 	bl	80007b2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	6853      	ldr	r3, [r2, #4]
 80008b2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80008b6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80008ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80008be:	f023 0301 	bic.w	r3, r3, #1
 80008c2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80008c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80008cc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80008d0:	e7db      	b.n	800088a <I2C_IsAcknowledgeFailed+0x32>

080008d2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80008d2:	b570      	push	{r4, r5, r6, lr}
 80008d4:	4604      	mov	r4, r0
 80008d6:	460d      	mov	r5, r1
 80008d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	079b      	lsls	r3, r3, #30
 80008e0:	d501      	bpl.n	80008e6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80008e2:	2000      	movs	r0, #0
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80008e6:	4632      	mov	r2, r6
 80008e8:	4629      	mov	r1, r5
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff ffb4 	bl	8000858 <I2C_IsAcknowledgeFailed>
 80008f0:	b9a0      	cbnz	r0, 800091c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80008f2:	1c6a      	adds	r2, r5, #1
 80008f4:	d0f1      	beq.n	80008da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008f6:	f7ff fe21 	bl	800053c <HAL_GetTick>
 80008fa:	1b80      	subs	r0, r0, r6
 80008fc:	4285      	cmp	r5, r0
 80008fe:	d301      	bcc.n	8000904 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d1ea      	bne.n	80008da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000904:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800090c:	2320      	movs	r3, #32
 800090e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000918:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
}
 800091e:	bd70      	pop	{r4, r5, r6, pc}

08000920 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	4604      	mov	r4, r0
 8000924:	460d      	mov	r5, r1
 8000926:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	069b      	lsls	r3, r3, #26
 800092e:	d501      	bpl.n	8000934 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000930:	2000      	movs	r0, #0
 8000932:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000934:	4632      	mov	r2, r6
 8000936:	4629      	mov	r1, r5
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff ff8d 	bl	8000858 <I2C_IsAcknowledgeFailed>
 800093e:	b990      	cbnz	r0, 8000966 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000940:	f7ff fdfc 	bl	800053c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	4285      	cmp	r5, r0
 8000948:	d301      	bcc.n	800094e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d1ec      	bne.n	8000928 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800094e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000950:	f043 0320 	orr.w	r3, r3, #32
 8000954:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000956:	2320      	movs	r3, #32
 8000958:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000966:	2001      	movs	r0, #1
}
 8000968:	bd70      	pop	{r4, r5, r6, pc}

0800096a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800096a:	b570      	push	{r4, r5, r6, lr}
 800096c:	4604      	mov	r4, r0
 800096e:	460d      	mov	r5, r1
 8000970:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000972:	6823      	ldr	r3, [r4, #0]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	075b      	lsls	r3, r3, #29
 8000978:	d40e      	bmi.n	8000998 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800097a:	4632      	mov	r2, r6
 800097c:	4629      	mov	r1, r5
 800097e:	4620      	mov	r0, r4
 8000980:	f7ff ff6a 	bl	8000858 <I2C_IsAcknowledgeFailed>
 8000984:	b9f0      	cbnz	r0, 80009c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	699a      	ldr	r2, [r3, #24]
 800098a:	0691      	lsls	r1, r2, #26
 800098c:	d51c      	bpl.n	80009c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800098e:	699a      	ldr	r2, [r3, #24]
 8000990:	0752      	lsls	r2, r2, #29
 8000992:	d503      	bpl.n	800099c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8000994:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000996:	b10a      	cbz	r2, 800099c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8000998:	2000      	movs	r0, #0
 800099a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800099c:	2120      	movs	r1, #32
 800099e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80009a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80009aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80009ae:	f022 0201 	bic.w	r2, r2, #1
 80009b2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80009b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80009bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80009c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009c4:	2001      	movs	r0, #1
}
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80009c8:	f7ff fdb8 	bl	800053c <HAL_GetTick>
 80009cc:	1b80      	subs	r0, r0, r6
 80009ce:	4285      	cmp	r5, r0
 80009d0:	d301      	bcc.n	80009d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d1cd      	bne.n	8000972 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80009d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009d8:	f043 0320 	orr.w	r3, r3, #32
 80009dc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80009de:	2320      	movs	r3, #32
 80009e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80009e4:	2300      	movs	r3, #0
 80009e6:	e7eb      	b.n	80009c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

080009e8 <HAL_I2C_Init>:
{
 80009e8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80009ea:	4604      	mov	r4, r0
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d04a      	beq.n	8000a86 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80009f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009f8:	b91b      	cbnz	r3, 8000a02 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80009fa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80009fe:	f001 fb69 	bl	80020d4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a02:	2324      	movs	r3, #36	; 0x24
 8000a04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000a08:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a0a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	f022 0201 	bic.w	r2, r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a14:	6862      	ldr	r2, [r4, #4]
 8000a16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a1c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a1e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a28:	d124      	bne.n	8000a74 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a2e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a30:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a32:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a34:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a3c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a44:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a46:	6922      	ldr	r2, [r4, #16]
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	69a1      	ldr	r1, [r4, #24]
 8000a4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a50:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a52:	6a21      	ldr	r1, [r4, #32]
 8000a54:	69e2      	ldr	r2, [r4, #28]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	f042 0201 	orr.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a62:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a64:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a66:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a6c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000a72:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a74:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a78:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a7a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a7c:	bf04      	itt	eq
 8000a7e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000a82:	605a      	streq	r2, [r3, #4]
 8000a84:	e7d4      	b.n	8000a30 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000a86:	2001      	movs	r0, #1
}
 8000a88:	bd10      	pop	{r4, pc}
	...

08000a8c <HAL_I2C_Master_Transmit>:
{
 8000a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000a90:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a96:	2b20      	cmp	r3, #32
{
 8000a98:	4604      	mov	r4, r0
 8000a9a:	460e      	mov	r6, r1
 8000a9c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9e:	f040 8084 	bne.w	8000baa <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8000aa2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d07f      	beq.n	8000baa <HAL_I2C_Master_Transmit+0x11e>
 8000aaa:	2701      	movs	r7, #1
 8000aac:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ab0:	f7ff fd44 	bl	800053c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ab4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000ab6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ab8:	9000      	str	r0, [sp, #0]
 8000aba:	463a      	mov	r2, r7
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff fe9e 	bl	8000802 <I2C_WaitOnFlagUntilTimeout>
 8000ac6:	b118      	cbz	r0, 8000ad0 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
}
 8000aca:	b003      	add	sp, #12
 8000acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ad0:	2321      	movs	r3, #33	; 0x21
 8000ad2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ad6:	2310      	movs	r3, #16
 8000ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000adc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000ade:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ae2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000ae4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000aec:	6360      	str	r0, [r4, #52]	; 0x34
 8000aee:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000af0:	d926      	bls.n	8000b40 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000af2:	22ff      	movs	r2, #255	; 0xff
 8000af4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000af6:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000afc:	4631      	mov	r1, r6
 8000afe:	4620      	mov	r0, r4
 8000b00:	f7ff fe65 	bl	80007ce <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000b04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b06:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000b08:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b0a:	462a      	mov	r2, r5
 8000b0c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000b0e:	b9fb      	cbnz	r3, 8000b50 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b10:	f7ff ff06 	bl	8000920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1d7      	bne.n	8000ac8 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b24:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b28:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b32:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b36:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b3a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000b3e:	e7c4      	b.n	8000aca <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8000b40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000b42:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000b44:	b292      	uxth	r2, r2
 8000b46:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	e7d5      	b.n	8000afc <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b50:	f7ff febf 	bl	80008d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d1b7      	bne.n	8000ac8 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b5a:	6822      	ldr	r2, [r4, #0]
 8000b5c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8000b60:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000b62:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000b64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b66:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b70:	3a01      	subs	r2, #1
 8000b72:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b74:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000b76:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0c3      	beq.n	8000b04 <HAL_I2C_Master_Transmit+0x78>
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d1c1      	bne.n	8000b04 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b80:	9500      	str	r5, [sp, #0]
 8000b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	4620      	mov	r0, r4
 8000b88:	f7ff fe3b 	bl	8000802 <I2C_WaitOnFlagUntilTimeout>
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	d19b      	bne.n	8000ac8 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	2bff      	cmp	r3, #255	; 0xff
 8000b96:	d903      	bls.n	8000ba0 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b9c:	9000      	str	r0, [sp, #0]
 8000b9e:	e7ab      	b.n	8000af8 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8000ba0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000ba4:	b292      	uxth	r2, r2
 8000ba6:	8522      	strh	r2, [r4, #40]	; 0x28
 8000ba8:	e7ce      	b.n	8000b48 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000baa:	2002      	movs	r0, #2
 8000bac:	e78d      	b.n	8000aca <HAL_I2C_Master_Transmit+0x3e>
 8000bae:	bf00      	nop
 8000bb0:	80002000 	.word	0x80002000

08000bb4 <HAL_I2C_Master_Receive>:
{
 8000bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000bbe:	2b20      	cmp	r3, #32
{
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	460e      	mov	r6, r1
 8000bc4:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc6:	f040 8086 	bne.w	8000cd6 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8000bca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f000 8081 	beq.w	8000cd6 <HAL_I2C_Master_Receive+0x122>
 8000bd4:	2701      	movs	r7, #1
 8000bd6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000bda:	f7ff fcaf 	bl	800053c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000bde:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000be0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000be2:	9000      	str	r0, [sp, #0]
 8000be4:	463a      	mov	r2, r7
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff fe09 	bl	8000802 <I2C_WaitOnFlagUntilTimeout>
 8000bf0:	b118      	cbz	r0, 8000bfa <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000bf2:	2001      	movs	r0, #1
}
 8000bf4:	b003      	add	sp, #12
 8000bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000bfa:	2322      	movs	r3, #34	; 0x22
 8000bfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000c00:	2310      	movs	r3, #16
 8000c02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c06:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000c08:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000c0e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000c16:	6360      	str	r0, [r4, #52]	; 0x34
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000c1a:	d926      	bls.n	8000c6a <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000c20:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c26:	4631      	mov	r1, r6
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff fdd0 	bl	80007ce <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c30:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000c32:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c34:	462a      	mov	r2, r5
 8000c36:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000c38:	b9fb      	cbnz	r3, 8000c7a <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c3a:	f7ff fe71 	bl	8000920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d1d7      	bne.n	8000bf2 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	2120      	movs	r1, #32
 8000c46:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000c4e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000c52:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c5c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000c60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000c64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000c68:	e7c4      	b.n	8000bf4 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8000c6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000c6c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000c6e:	b292      	uxth	r2, r2
 8000c70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	e7d5      	b.n	8000c26 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c7a:	f7ff fe76 	bl	800096a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d1b7      	bne.n	8000bf2 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000c82:	6822      	ldr	r2, [r4, #0]
 8000c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c88:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8000c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000c8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000c8e:	3301      	adds	r3, #1
 8000c90:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000c9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ca0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000ca2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0c2      	beq.n	8000c2e <HAL_I2C_Master_Receive+0x7a>
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d1c0      	bne.n	8000c2e <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000cac:	9500      	str	r5, [sp, #0]
 8000cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff fda5 	bl	8000802 <I2C_WaitOnFlagUntilTimeout>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d19a      	bne.n	8000bf2 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2bff      	cmp	r3, #255	; 0xff
 8000cc2:	d903      	bls.n	8000ccc <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000cc8:	9000      	str	r0, [sp, #0]
 8000cca:	e7aa      	b.n	8000c22 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8000ccc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000cce:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	8522      	strh	r2, [r4, #40]	; 0x28
 8000cd4:	e7cd      	b.n	8000c72 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	e78c      	b.n	8000bf4 <HAL_I2C_Master_Receive+0x40>
 8000cda:	bf00      	nop
 8000cdc:	80002400 	.word	0x80002400

08000ce0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ce0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	2a20      	cmp	r2, #32
{
 8000ce8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cea:	d11d      	bne.n	8000d28 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d019      	beq.n	8000d28 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf4:	2324      	movs	r3, #36	; 0x24
 8000cf6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cfa:	6803      	ldr	r3, [r0, #0]
 8000cfc:	681c      	ldr	r4, [r3, #0]
 8000cfe:	f024 0401 	bic.w	r4, r4, #1
 8000d02:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d04:	681c      	ldr	r4, [r3, #0]
 8000d06:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000d0a:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d0c:	681c      	ldr	r4, [r3, #0]
 8000d0e:	4321      	orrs	r1, r4
 8000d10:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	f041 0101 	orr.w	r1, r1, #1
 8000d18:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d1a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d1c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000d28:	2002      	movs	r0, #2
  }
}
 8000d2a:	bd10      	pop	{r4, pc}

08000d2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d2c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d2e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000d32:	b2e4      	uxtb	r4, r4
 8000d34:	2c20      	cmp	r4, #32
 8000d36:	d11c      	bne.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d38:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d018      	beq.n	8000d72 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d40:	2324      	movs	r3, #36	; 0x24
 8000d42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d46:	6803      	ldr	r3, [r0, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f022 0201 	bic.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d50:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d52:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d56:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d5a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d64:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d66:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000d72:	2002      	movs	r0, #2
  }
}
 8000d74:	bd10      	pop	{r4, pc}
	...

08000d78 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d78:	4a02      	ldr	r2, [pc, #8]	; (8000d84 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4770      	bx	lr
 8000d84:	40007000 	.word	0x40007000

08000d88 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <HAL_PWREx_GetVoltageRange+0xc>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000d8c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40007000 	.word	0x40007000

08000d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d9a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da4:	d11c      	bne.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000daa:	d015      	beq.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000db6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db8:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000dba:	6811      	ldr	r1, [r2, #0]
 8000dbc:	2232      	movs	r2, #50	; 0x32
 8000dbe:	434a      	muls	r2, r1
 8000dc0:	490f      	ldr	r1, [pc, #60]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000dc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dca:	6958      	ldr	r0, [r3, #20]
 8000dcc:	0540      	lsls	r0, r0, #21
 8000dce:	d500      	bpl.n	8000dd2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000dd0:	b922      	cbnz	r2, 8000ddc <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dd2:	694b      	ldr	r3, [r1, #20]
 8000dd4:	055b      	lsls	r3, r3, #21
 8000dd6:	d40d      	bmi.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dd8:	2000      	movs	r0, #0
 8000dda:	4770      	bx	lr
        wait_loop_index--;
 8000ddc:	3a01      	subs	r2, #1
 8000dde:	e7f4      	b.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de4:	bf1f      	itttt	ne
 8000de6:	681a      	ldrne	r2, [r3, #0]
 8000de8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000dec:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000df0:	601a      	strne	r2, [r3, #0]
 8000df2:	e7f1      	b.n	8000dd8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000df4:	2003      	movs	r0, #3
}
 8000df6:	4770      	bx	lr
 8000df8:	40007000 	.word	0x40007000
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	000f4240 	.word	0x000f4240

08000e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e06:	4d1e      	ldr	r5, [pc, #120]	; (8000e80 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000e08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e0a:	00da      	lsls	r2, r3, #3
{
 8000e0c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e0e:	d518      	bpl.n	8000e42 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000e10:	f7ff ffba 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e14:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e18:	d123      	bne.n	8000e62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000e1a:	2c80      	cmp	r4, #128	; 0x80
 8000e1c:	d929      	bls.n	8000e72 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000e1e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000e20:	bf8c      	ite	hi
 8000e22:	2002      	movhi	r0, #2
 8000e24:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f023 0307 	bic.w	r3, r3, #7
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000e38:	1a18      	subs	r0, r3, r0
 8000e3a:	bf18      	it	ne
 8000e3c:	2001      	movne	r0, #1
 8000e3e:	b003      	add	sp, #12
 8000e40:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e4a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000e54:	f7ff ff98 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e58:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e60:	e7d8      	b.n	8000e14 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000e62:	2c80      	cmp	r4, #128	; 0x80
 8000e64:	d807      	bhi.n	8000e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8000e66:	d008      	beq.n	8000e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8000e68:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000e6c:	4258      	negs	r0, r3
 8000e6e:	4158      	adcs	r0, r3
 8000e70:	e7d9      	b.n	8000e26 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e72:	2000      	movs	r0, #0
 8000e74:	e7d7      	b.n	8000e26 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e76:	2003      	movs	r0, #3
 8000e78:	e7d5      	b.n	8000e26 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	e7d3      	b.n	8000e26 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e8c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8e:	f012 020c 	ands.w	r2, r2, #12
 8000e92:	d005      	beq.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x18>
 8000e94:	2a0c      	cmp	r2, #12
 8000e96:	d115      	bne.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e98:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000e9c:	2901      	cmp	r1, #1
 8000e9e:	d118      	bne.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ea0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ea4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ea6:	bf55      	itete	pl
 8000ea8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000eac:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000eae:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000eb2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000eb6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000eba:	b382      	cbz	r2, 8000f1e <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000ebc:	2a0c      	cmp	r2, #12
 8000ebe:	d009      	beq.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x4c>
 8000ec0:	2000      	movs	r0, #0
  return sysclockfreq;
 8000ec2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000ec4:	2a04      	cmp	r2, #4
 8000ec6:	d029      	beq.n	8000f1c <HAL_RCC_GetSysClockFreq+0x94>
 8000ec8:	2a08      	cmp	r2, #8
 8000eca:	4817      	ldr	r0, [pc, #92]	; (8000f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000ecc:	bf18      	it	ne
 8000ece:	2000      	movne	r0, #0
 8000ed0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000ed2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ed4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ed6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000ed8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000edc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8000ee0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ee2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x6c>
 8000ee8:	2903      	cmp	r1, #3
 8000eea:	d012      	beq.n	8000f12 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000eec:	68d9      	ldr	r1, [r3, #12]
 8000eee:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000ef2:	e003      	b.n	8000efc <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ef4:	68d9      	ldr	r1, [r3, #12]
 8000ef6:	480d      	ldr	r0, [pc, #52]	; (8000f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ef8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000efc:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000efe:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f02:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000f06:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f08:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f0a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000f0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f10:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f12:	68d9      	ldr	r1, [r3, #12]
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f16:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f1a:	e7ef      	b.n	8000efc <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000
 8000f24:	08002304 	.word	0x08002304
 8000f28:	007a1200 	.word	0x007a1200
 8000f2c:	00f42400 	.word	0x00f42400

08000f30 <HAL_RCC_OscConfig>:
{
 8000f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000f34:	4605      	mov	r5, r0
 8000f36:	b908      	cbnz	r0, 8000f3c <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e046      	b.n	8000fca <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f3c:	4ca8      	ldr	r4, [pc, #672]	; (80011e0 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f3e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f40:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f42:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f44:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f46:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f4e:	d572      	bpl.n	8001036 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f50:	b11e      	cbz	r6, 8000f5a <HAL_RCC_OscConfig+0x2a>
 8000f52:	2e0c      	cmp	r6, #12
 8000f54:	d151      	bne.n	8000ffa <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f56:	2f01      	cmp	r7, #1
 8000f58:	d14f      	bne.n	8000ffa <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	0798      	lsls	r0, r3, #30
 8000f5e:	d502      	bpl.n	8000f66 <HAL_RCC_OscConfig+0x36>
 8000f60:	69ab      	ldr	r3, [r5, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0e8      	beq.n	8000f38 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	6a28      	ldr	r0, [r5, #32]
 8000f6a:	0719      	lsls	r1, r3, #28
 8000f6c:	bf56      	itet	pl
 8000f6e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000f72:	6823      	ldrmi	r3, [r4, #0]
 8000f74:	091b      	lsrpl	r3, r3, #4
 8000f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f7a:	4283      	cmp	r3, r0
 8000f7c:	d228      	bcs.n	8000fd0 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f7e:	f7ff ff41 	bl	8000e04 <RCC_SetFlashLatencyFromMSIRange>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d1d8      	bne.n	8000f38 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	6a2a      	ldr	r2, [r5, #32]
 8000f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f96:	4313      	orrs	r3, r2
 8000f98:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	69ea      	ldr	r2, [r5, #28]
 8000f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fa6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa8:	f7ff ff6e 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	4a8d      	ldr	r2, [pc, #564]	; (80011e4 <HAL_RCC_OscConfig+0x2b4>)
 8000fb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	4b8a      	ldr	r3, [pc, #552]	; (80011e8 <HAL_RCC_OscConfig+0x2b8>)
 8000fbe:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fa8b 	bl	80004dc <HAL_InitTick>
        if(status != HAL_OK)
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d035      	beq.n	8001036 <HAL_RCC_OscConfig+0x106>
}
 8000fca:	b003      	add	sp, #12
 8000fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6023      	str	r3, [r4, #0]
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe2:	6863      	ldr	r3, [r4, #4]
 8000fe4:	69ea      	ldr	r2, [r5, #28]
 8000fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fee:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff0:	f7ff ff08 	bl	8000e04 <RCC_SetFlashLatencyFromMSIRange>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d0d7      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x78>
 8000ff8:	e79e      	b.n	8000f38 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ffa:	69ab      	ldr	r3, [r5, #24]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d03a      	beq.n	8001076 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001008:	f7ff fa98 	bl	800053c <HAL_GetTick>
 800100c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	079a      	lsls	r2, r3, #30
 8001012:	d528      	bpl.n	8001066 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6023      	str	r3, [r4, #0]
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	6a2a      	ldr	r2, [r5, #32]
 8001020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001024:	4313      	orrs	r3, r2
 8001026:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	69ea      	ldr	r2, [r5, #28]
 800102c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001034:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001036:	682b      	ldr	r3, [r5, #0]
 8001038:	07d8      	lsls	r0, r3, #31
 800103a:	d42d      	bmi.n	8001098 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	0799      	lsls	r1, r3, #30
 8001040:	d46b      	bmi.n	800111a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	0718      	lsls	r0, r3, #28
 8001046:	f100 80a0 	bmi.w	800118a <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	0759      	lsls	r1, r3, #29
 800104e:	f100 80cd 	bmi.w	80011ec <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	0699      	lsls	r1, r3, #26
 8001056:	f100 8136 	bmi.w	80012c6 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800105a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 815c 	bne.w	800131a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001062:	2000      	movs	r0, #0
 8001064:	e7b1      	b.n	8000fca <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001066:	f7ff fa69 	bl	800053c <HAL_GetTick>
 800106a:	eba0 0008 	sub.w	r0, r0, r8
 800106e:	2802      	cmp	r0, #2
 8001070:	d9cd      	bls.n	800100e <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e7a9      	b.n	8000fca <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800107e:	f7ff fa5d 	bl	800053c <HAL_GetTick>
 8001082:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	079b      	lsls	r3, r3, #30
 8001088:	d5d5      	bpl.n	8001036 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800108a:	f7ff fa57 	bl	800053c <HAL_GetTick>
 800108e:	eba0 0008 	sub.w	r0, r0, r8
 8001092:	2802      	cmp	r0, #2
 8001094:	d9f6      	bls.n	8001084 <HAL_RCC_OscConfig+0x154>
 8001096:	e7ec      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001098:	2e08      	cmp	r6, #8
 800109a:	d003      	beq.n	80010a4 <HAL_RCC_OscConfig+0x174>
 800109c:	2e0c      	cmp	r6, #12
 800109e:	d108      	bne.n	80010b2 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80010a0:	2f03      	cmp	r7, #3
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	039a      	lsls	r2, r3, #14
 80010a8:	d5c8      	bpl.n	800103c <HAL_RCC_OscConfig+0x10c>
 80010aa:	686b      	ldr	r3, [r5, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1c5      	bne.n	800103c <HAL_RCC_OscConfig+0x10c>
 80010b0:	e742      	b.n	8000f38 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	686b      	ldr	r3, [r5, #4]
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d110      	bne.n	80010dc <HAL_RCC_OscConfig+0x1ac>
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010c2:	f7ff fa3b 	bl	800053c <HAL_GetTick>
 80010c6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	039b      	lsls	r3, r3, #14
 80010cc:	d4b6      	bmi.n	800103c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fa35 	bl	800053c <HAL_GetTick>
 80010d2:	eba0 0008 	sub.w	r0, r0, r8
 80010d6:	2864      	cmp	r0, #100	; 0x64
 80010d8:	d9f6      	bls.n	80010c8 <HAL_RCC_OscConfig+0x198>
 80010da:	e7ca      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d104      	bne.n	80010ec <HAL_RCC_OscConfig+0x1bc>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	e7e6      	b.n	80010ba <HAL_RCC_OscConfig+0x18a>
 80010ec:	6822      	ldr	r2, [r4, #0]
 80010ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010f2:	6022      	str	r2, [r4, #0]
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010fa:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001100:	f7ff fa1c 	bl	800053c <HAL_GetTick>
 8001104:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	0398      	lsls	r0, r3, #14
 800110a:	d597      	bpl.n	800103c <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fa16 	bl	800053c <HAL_GetTick>
 8001110:	eba0 0008 	sub.w	r0, r0, r8
 8001114:	2864      	cmp	r0, #100	; 0x64
 8001116:	d9f6      	bls.n	8001106 <HAL_RCC_OscConfig+0x1d6>
 8001118:	e7ab      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800111a:	2e04      	cmp	r6, #4
 800111c:	d003      	beq.n	8001126 <HAL_RCC_OscConfig+0x1f6>
 800111e:	2e0c      	cmp	r6, #12
 8001120:	d110      	bne.n	8001144 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001122:	2f02      	cmp	r7, #2
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	0559      	lsls	r1, r3, #21
 800112a:	d503      	bpl.n	8001134 <HAL_RCC_OscConfig+0x204>
 800112c:	68eb      	ldr	r3, [r5, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f43f af02 	beq.w	8000f38 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	692a      	ldr	r2, [r5, #16]
 8001138:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800113c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001140:	6063      	str	r3, [r4, #4]
 8001142:	e77e      	b.n	8001042 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001144:	68eb      	ldr	r3, [r5, #12]
 8001146:	b17b      	cbz	r3, 8001168 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff f9f4 	bl	800053c <HAL_GetTick>
 8001154:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	055a      	lsls	r2, r3, #21
 800115a:	d4eb      	bmi.n	8001134 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff f9ee 	bl	800053c <HAL_GetTick>
 8001160:	1bc0      	subs	r0, r0, r7
 8001162:	2802      	cmp	r0, #2
 8001164:	d9f7      	bls.n	8001156 <HAL_RCC_OscConfig+0x226>
 8001166:	e784      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800116e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001170:	f7ff f9e4 	bl	800053c <HAL_GetTick>
 8001174:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	055b      	lsls	r3, r3, #21
 800117a:	f57f af62 	bpl.w	8001042 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800117e:	f7ff f9dd 	bl	800053c <HAL_GetTick>
 8001182:	1bc0      	subs	r0, r0, r7
 8001184:	2802      	cmp	r0, #2
 8001186:	d9f6      	bls.n	8001176 <HAL_RCC_OscConfig+0x246>
 8001188:	e773      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	696b      	ldr	r3, [r5, #20]
 800118c:	b19b      	cbz	r3, 80011b6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 800118e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800119a:	f7ff f9cf 	bl	800053c <HAL_GetTick>
 800119e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011a0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011a4:	079a      	lsls	r2, r3, #30
 80011a6:	f53f af50 	bmi.w	800104a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff f9c7 	bl	800053c <HAL_GetTick>
 80011ae:	1bc0      	subs	r0, r0, r7
 80011b0:	2802      	cmp	r0, #2
 80011b2:	d9f5      	bls.n	80011a0 <HAL_RCC_OscConfig+0x270>
 80011b4:	e75d      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80011b6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80011c2:	f7ff f9bb 	bl	800053c <HAL_GetTick>
 80011c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011cc:	079b      	lsls	r3, r3, #30
 80011ce:	f57f af3c 	bpl.w	800104a <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff f9b3 	bl	800053c <HAL_GetTick>
 80011d6:	1bc0      	subs	r0, r0, r7
 80011d8:	2802      	cmp	r0, #2
 80011da:	d9f5      	bls.n	80011c8 <HAL_RCC_OscConfig+0x298>
 80011dc:	e749      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	080022e9 	.word	0x080022e9
 80011e8:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ee:	00d8      	lsls	r0, r3, #3
 80011f0:	d429      	bmi.n	8001246 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80011fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001204:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001208:	4f71      	ldr	r7, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x4a0>)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	05d9      	lsls	r1, r3, #23
 800120e:	d51d      	bpl.n	800124c <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	68ab      	ldr	r3, [r5, #8]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d12b      	bne.n	800126e <HAL_RCC_OscConfig+0x33e>
 8001216:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001222:	f7ff f98b 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800122a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800122c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001230:	079b      	lsls	r3, r3, #30
 8001232:	d542      	bpl.n	80012ba <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001234:	f1b8 0f00 	cmp.w	r8, #0
 8001238:	f43f af0b 	beq.w	8001052 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 800123c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800123e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001242:	65a3      	str	r3, [r4, #88]	; 0x58
 8001244:	e705      	b.n	8001052 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 8001246:	f04f 0800 	mov.w	r8, #0
 800124a:	e7dd      	b.n	8001208 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001254:	f7ff f972 	bl	800053c <HAL_GetTick>
 8001258:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	05da      	lsls	r2, r3, #23
 800125e:	d4d7      	bmi.n	8001210 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001260:	f7ff f96c 	bl	800053c <HAL_GetTick>
 8001264:	eba0 0009 	sub.w	r0, r0, r9
 8001268:	2802      	cmp	r0, #2
 800126a:	d9f6      	bls.n	800125a <HAL_RCC_OscConfig+0x32a>
 800126c:	e701      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126e:	2b05      	cmp	r3, #5
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x350>
 8001272:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800127e:	e7ca      	b.n	8001216 <HAL_RCC_OscConfig+0x2e6>
 8001280:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800128c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001290:	f022 0204 	bic.w	r2, r2, #4
 8001294:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1c2      	bne.n	8001222 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 800129c:	f7ff f94e 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012aa:	0798      	lsls	r0, r3, #30
 80012ac:	d5c2      	bpl.n	8001234 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff f945 	bl	800053c <HAL_GetTick>
 80012b2:	1bc0      	subs	r0, r0, r7
 80012b4:	4548      	cmp	r0, r9
 80012b6:	d9f6      	bls.n	80012a6 <HAL_RCC_OscConfig+0x376>
 80012b8:	e6db      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff f93f 	bl	800053c <HAL_GetTick>
 80012be:	1bc0      	subs	r0, r0, r7
 80012c0:	4548      	cmp	r0, r9
 80012c2:	d9b3      	bls.n	800122c <HAL_RCC_OscConfig+0x2fc>
 80012c4:	e6d5      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012c8:	b19b      	cbz	r3, 80012f2 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 80012ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80012d6:	f7ff f931 	bl	800053c <HAL_GetTick>
 80012da:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012e0:	079a      	lsls	r2, r3, #30
 80012e2:	f53f aeba 	bmi.w	800105a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e6:	f7ff f929 	bl	800053c <HAL_GetTick>
 80012ea:	1bc0      	subs	r0, r0, r7
 80012ec:	2802      	cmp	r0, #2
 80012ee:	d9f5      	bls.n	80012dc <HAL_RCC_OscConfig+0x3ac>
 80012f0:	e6bf      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 80012f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80012fe:	f7ff f91d 	bl	800053c <HAL_GetTick>
 8001302:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001304:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001308:	079b      	lsls	r3, r3, #30
 800130a:	f57f aea6 	bpl.w	800105a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800130e:	f7ff f915 	bl	800053c <HAL_GetTick>
 8001312:	1bc0      	subs	r0, r0, r7
 8001314:	2802      	cmp	r0, #2
 8001316:	d9f5      	bls.n	8001304 <HAL_RCC_OscConfig+0x3d4>
 8001318:	e6ab      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800131a:	2e0c      	cmp	r6, #12
 800131c:	f43f ae0c 	beq.w	8000f38 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001320:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001328:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800132a:	d136      	bne.n	800139a <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 800132c:	f7ff f906 	bl	800053c <HAL_GetTick>
 8001330:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	0198      	lsls	r0, r3, #6
 8001336:	d42a      	bmi.n	800138e <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001338:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800133a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800133c:	06db      	lsls	r3, r3, #27
 800133e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001342:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001344:	4313      	orrs	r3, r2
 8001346:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001348:	3a01      	subs	r2, #1
 800134a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800134e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001350:	0852      	lsrs	r2, r2, #1
 8001352:	3a01      	subs	r2, #1
 8001354:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001358:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800135a:	0852      	lsrs	r2, r2, #1
 800135c:	3a01      	subs	r2, #1
 800135e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001362:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800136c:	68e3      	ldr	r3, [r4, #12]
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001372:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001374:	f7ff f8e2 	bl	800053c <HAL_GetTick>
 8001378:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	0199      	lsls	r1, r3, #6
 800137e:	f53f ae70 	bmi.w	8001062 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff f8db 	bl	800053c <HAL_GetTick>
 8001386:	1b40      	subs	r0, r0, r5
 8001388:	2802      	cmp	r0, #2
 800138a:	d9f6      	bls.n	800137a <HAL_RCC_OscConfig+0x44a>
 800138c:	e671      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff f8d5 	bl	800053c <HAL_GetTick>
 8001392:	1b80      	subs	r0, r0, r6
 8001394:	2802      	cmp	r0, #2
 8001396:	d9cc      	bls.n	8001332 <HAL_RCC_OscConfig+0x402>
 8001398:	e66b      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800139e:	bf5e      	ittt	pl
 80013a0:	68e3      	ldrpl	r3, [r4, #12]
 80013a2:	f023 0303 	bicpl.w	r3, r3, #3
 80013a6:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80013a8:	68e3      	ldr	r3, [r4, #12]
 80013aa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80013b4:	f7ff f8c2 	bl	800053c <HAL_GetTick>
 80013b8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	019b      	lsls	r3, r3, #6
 80013be:	f57f ae50 	bpl.w	8001062 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff f8bb 	bl	800053c <HAL_GetTick>
 80013c6:	1b40      	subs	r0, r0, r5
 80013c8:	2802      	cmp	r0, #2
 80013ca:	d9f6      	bls.n	80013ba <HAL_RCC_OscConfig+0x48a>
 80013cc:	e651      	b.n	8001072 <HAL_RCC_OscConfig+0x142>
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000

080013d4 <HAL_RCC_ClockConfig>:
{
 80013d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d8:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80013da:	4604      	mov	r4, r0
 80013dc:	b910      	cbnz	r0, 80013e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013de:	2001      	movs	r0, #1
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <HAL_RCC_ClockConfig+0x114>)
 80013e6:	6813      	ldr	r3, [r2, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d329      	bcc.n	8001444 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	07d9      	lsls	r1, r3, #31
 80013f4:	d431      	bmi.n	800145a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f6:	6821      	ldr	r1, [r4, #0]
 80013f8:	078a      	lsls	r2, r1, #30
 80013fa:	d45b      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4a3a      	ldr	r2, [pc, #232]	; (80014e8 <HAL_RCC_ClockConfig+0x114>)
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	429e      	cmp	r6, r3
 8001406:	d35d      	bcc.n	80014c4 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	f011 0f04 	tst.w	r1, #4
 800140c:	4d37      	ldr	r5, [pc, #220]	; (80014ec <HAL_RCC_ClockConfig+0x118>)
 800140e:	d164      	bne.n	80014da <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	070b      	lsls	r3, r1, #28
 8001412:	d506      	bpl.n	8001422 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001414:	68ab      	ldr	r3, [r5, #8]
 8001416:	6922      	ldr	r2, [r4, #16]
 8001418:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800141c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001420:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001422:	f7ff fd31 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8001426:	68ab      	ldr	r3, [r5, #8]
 8001428:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <HAL_RCC_ClockConfig+0x11c>)
 800142a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800142e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	40d8      	lsrs	r0, r3
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HAL_RCC_ClockConfig+0x120>)
 800143c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff b84c 	b.w	80004dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001444:	6813      	ldr	r3, [r2, #0]
 8001446:	f023 0307 	bic.w	r3, r3, #7
 800144a:	430b      	orrs	r3, r1
 800144c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4299      	cmp	r1, r3
 8001456:	d1c2      	bne.n	80013de <HAL_RCC_ClockConfig+0xa>
 8001458:	e7ca      	b.n	80013f0 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145a:	6862      	ldr	r2, [r4, #4]
 800145c:	4d23      	ldr	r5, [pc, #140]	; (80014ec <HAL_RCC_ClockConfig+0x118>)
 800145e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001460:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001462:	d11b      	bne.n	800149c <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001464:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001468:	d0b9      	beq.n	80013de <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800146a:	68ab      	ldr	r3, [r5, #8]
 800146c:	f023 0303 	bic.w	r3, r3, #3
 8001470:	4313      	orrs	r3, r2
 8001472:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001474:	f7ff f862 	bl	800053c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800147c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	68ab      	ldr	r3, [r5, #8]
 8001480:	6862      	ldr	r2, [r4, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800148a:	d0b4      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148c:	f7ff f856 	bl	800053c <HAL_GetTick>
 8001490:	1bc0      	subs	r0, r0, r7
 8001492:	4540      	cmp	r0, r8
 8001494:	d9f3      	bls.n	800147e <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8001496:	2003      	movs	r0, #3
}
 8001498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149c:	2a02      	cmp	r2, #2
 800149e:	d102      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80014a4:	e7e0      	b.n	8001468 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014a6:	b912      	cbnz	r2, 80014ae <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a8:	f013 0f02 	tst.w	r3, #2
 80014ac:	e7dc      	b.n	8001468 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014b2:	e7d9      	b.n	8001468 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_RCC_ClockConfig+0x118>)
 80014b6:	68a0      	ldr	r0, [r4, #8]
 80014b8:	6893      	ldr	r3, [r2, #8]
 80014ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014be:	4303      	orrs	r3, r0
 80014c0:	6093      	str	r3, [r2, #8]
 80014c2:	e79b      	b.n	80013fc <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f023 0307 	bic.w	r3, r3, #7
 80014ca:	4333      	orrs	r3, r6
 80014cc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	429e      	cmp	r6, r3
 80014d6:	d182      	bne.n	80013de <HAL_RCC_ClockConfig+0xa>
 80014d8:	e796      	b.n	8001408 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014da:	68ab      	ldr	r3, [r5, #8]
 80014dc:	68e2      	ldr	r2, [r4, #12]
 80014de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014e2:	4313      	orrs	r3, r2
 80014e4:	60ab      	str	r3, [r5, #8]
 80014e6:	e793      	b.n	8001410 <HAL_RCC_ClockConfig+0x3c>
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	080022e9 	.word	0x080022e9
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetHCLKFreq>:
}
 80014f8:	4b01      	ldr	r3, [pc, #4]	; (8001500 <HAL_RCC_GetHCLKFreq+0x8>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001506:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001512:	6810      	ldr	r0, [r2, #0]
 8001514:	f003 031f 	and.w	r3, r3, #31
}
 8001518:	40d8      	lsrs	r0, r3
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	080022f9 	.word	0x080022f9
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x18>)
 800152a:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001536:	6810      	ldr	r0, [r2, #0]
 8001538:	f003 031f 	and.w	r3, r3, #31
}
 800153c:	40d8      	lsrs	r0, r3
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	080022f9 	.word	0x080022f9
 8001548:	20000004 	.word	0x20000004

0800154c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <RCCEx_PLLSAI1_Config+0x114>)
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	f012 0f03 	tst.w	r2, #3
{
 8001556:	4605      	mov	r5, r0
 8001558:	460e      	mov	r6, r1
 800155a:	461c      	mov	r4, r3
 800155c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800155e:	d039      	beq.n	80015d4 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	4282      	cmp	r2, r0
 8001568:	d14b      	bne.n	8001602 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800156a:	2a00      	cmp	r2, #0
 800156c:	d049      	beq.n	8001602 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800156e:	68db      	ldr	r3, [r3, #12]
       ||
 8001570:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001572:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001576:	3301      	adds	r3, #1
       ||
 8001578:	4293      	cmp	r3, r2
 800157a:	d142      	bne.n	8001602 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001582:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001584:	f7fe ffda 	bl	800053c <HAL_GetTick>
 8001588:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	011a      	lsls	r2, r3, #4
 800158e:	d441      	bmi.n	8001614 <RCCEx_PLLSAI1_Config+0xc8>
 8001590:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001592:	2e00      	cmp	r6, #0
 8001594:	d045      	beq.n	8001622 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001596:	2e01      	cmp	r6, #1
 8001598:	d14f      	bne.n	800163a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800159a:	6922      	ldr	r2, [r4, #16]
 800159c:	6928      	ldr	r0, [r5, #16]
 800159e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015a2:	0840      	lsrs	r0, r0, #1
 80015a4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80015a8:	3801      	subs	r0, #1
 80015aa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80015ae:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80015b2:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ba:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7fe ffbe 	bl	800053c <HAL_GetTick>
 80015c0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	d545      	bpl.n	8001654 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80015c8:	6923      	ldr	r3, [r4, #16]
 80015ca:	69aa      	ldr	r2, [r5, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	6123      	str	r3, [r4, #16]
 80015d0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80015d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d010      	beq.n	80015fa <RCCEx_PLLSAI1_Config+0xae>
 80015d8:	2803      	cmp	r0, #3
 80015da:	d014      	beq.n	8001606 <RCCEx_PLLSAI1_Config+0xba>
 80015dc:	2801      	cmp	r0, #1
 80015de:	d110      	bne.n	8001602 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	079f      	lsls	r7, r3, #30
 80015e4:	d5f5      	bpl.n	80015d2 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80015e6:	68e3      	ldr	r3, [r4, #12]
 80015e8:	686a      	ldr	r2, [r5, #4]
 80015ea:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80015ee:	3a01      	subs	r2, #1
 80015f0:	4318      	orrs	r0, r3
 80015f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80015f6:	60e0      	str	r0, [r4, #12]
 80015f8:	e7c0      	b.n	800157c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001600:	d1f1      	bne.n	80015e6 <RCCEx_PLLSAI1_Config+0x9a>
 8001602:	2001      	movs	r0, #1
 8001604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	0391      	lsls	r1, r2, #14
 800160a:	d4ec      	bmi.n	80015e6 <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001612:	e7f5      	b.n	8001600 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001614:	f7fe ff92 	bl	800053c <HAL_GetTick>
 8001618:	1bc0      	subs	r0, r0, r7
 800161a:	2802      	cmp	r0, #2
 800161c:	d9b5      	bls.n	800158a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800161e:	2003      	movs	r0, #3
 8001620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001622:	6922      	ldr	r2, [r4, #16]
 8001624:	68e9      	ldr	r1, [r5, #12]
 8001626:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800162a:	06c9      	lsls	r1, r1, #27
 800162c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001630:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001634:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001636:	6123      	str	r3, [r4, #16]
 8001638:	e7bc      	b.n	80015b4 <RCCEx_PLLSAI1_Config+0x68>
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	6968      	ldr	r0, [r5, #20]
 800163e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001642:	0840      	lsrs	r0, r0, #1
 8001644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001648:	3801      	subs	r0, #1
 800164a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800164e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001652:	e7f0      	b.n	8001636 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001654:	f7fe ff72 	bl	800053c <HAL_GetTick>
 8001658:	1b80      	subs	r0, r0, r6
 800165a:	2802      	cmp	r0, #2
 800165c:	d9b1      	bls.n	80015c2 <RCCEx_PLLSAI1_Config+0x76>
 800165e:	e7de      	b.n	800161e <RCCEx_PLLSAI1_Config+0xd2>
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001668:	6805      	ldr	r5, [r0, #0]
 800166a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800166e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001670:	d00e      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001672:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001674:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001678:	d053      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800167a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800167e:	d055      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001680:	2900      	cmp	r1, #0
 8001682:	d15e      	bne.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001684:	3004      	adds	r0, #4
 8001686:	f7ff ff61 	bl	800154c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800168a:	4605      	mov	r5, r0
 800168c:	2800      	cmp	r0, #0
 800168e:	d04d      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	039e      	lsls	r6, r3, #14
 8001694:	d563      	bpl.n	800175e <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001696:	4e93      	ldr	r6, [pc, #588]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001698:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800169a:	00d8      	lsls	r0, r3, #3
 800169c:	f140 8116 	bpl.w	80018cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 80016a0:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a2:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80018e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80016a6:	f8d8 3000 	ldr.w	r3, [r8]
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 80016b2:	f7fe ff43 	bl	800053c <HAL_GetTick>
 80016b6:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80016b8:	f8d8 3000 	ldr.w	r3, [r8]
 80016bc:	05d9      	lsls	r1, r3, #23
 80016be:	d542      	bpl.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d147      	bne.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80016c4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80016c8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016cc:	d014      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80016ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d011      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016d4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80016d8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80016dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016e0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80016e4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80016ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80016f4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80016f8:	07da      	lsls	r2, r3, #31
 80016fa:	d509      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 80016fc:	f7fe ff1e 	bl	800053c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001704:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800170a:	079b      	lsls	r3, r3, #30
 800170c:	f140 80c0 	bpl.w	8001890 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001710:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001714:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171a:	4313      	orrs	r3, r2
 800171c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001720:	e018      	b.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001722:	4a70      	ldr	r2, [pc, #448]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001724:	68d3      	ldr	r3, [r2, #12]
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800172c:	4a6d      	ldr	r2, [pc, #436]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800172e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001730:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001734:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001738:	430b      	orrs	r3, r1
 800173a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800173e:	2500      	movs	r5, #0
 8001740:	e7a6      	b.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001742:	2501      	movs	r5, #1
 8001744:	e7a4      	b.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7fe fef9 	bl	800053c <HAL_GetTick>
 800174a:	eba0 0009 	sub.w	r0, r0, r9
 800174e:	2802      	cmp	r0, #2
 8001750:	d9b2      	bls.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001752:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001754:	b11f      	cbz	r7, 800175e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001756:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	07df      	lsls	r7, r3, #31
 8001762:	d508      	bpl.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001764:	495f      	ldr	r1, [pc, #380]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001766:	6a20      	ldr	r0, [r4, #32]
 8001768:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800176c:	f022 0203 	bic.w	r2, r2, #3
 8001770:	4302      	orrs	r2, r0
 8001772:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001776:	079e      	lsls	r6, r3, #30
 8001778:	d508      	bpl.n	800178c <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800177a:	495a      	ldr	r1, [pc, #360]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800177c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800177e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001782:	f022 020c 	bic.w	r2, r2, #12
 8001786:	4302      	orrs	r2, r0
 8001788:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800178c:	0698      	lsls	r0, r3, #26
 800178e:	d508      	bpl.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001790:	4954      	ldr	r1, [pc, #336]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001794:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001798:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800179c:	4302      	orrs	r2, r0
 800179e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80017a2:	0599      	lsls	r1, r3, #22
 80017a4:	d508      	bpl.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017a6:	494f      	ldr	r1, [pc, #316]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80017aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017ae:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80017b2:	4302      	orrs	r2, r0
 80017b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80017b8:	055a      	lsls	r2, r3, #21
 80017ba:	d508      	bpl.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80017bc:	4949      	ldr	r1, [pc, #292]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80017c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017c4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017c8:	4302      	orrs	r2, r0
 80017ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017ce:	065f      	lsls	r7, r3, #25
 80017d0:	d508      	bpl.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017d2:	4944      	ldr	r1, [pc, #272]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80017d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017de:	4302      	orrs	r2, r0
 80017e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017e4:	05de      	lsls	r6, r3, #23
 80017e6:	d508      	bpl.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017e8:	493e      	ldr	r1, [pc, #248]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80017ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80017ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80017f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017f4:	4302      	orrs	r2, r0
 80017f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80017fa:	0498      	lsls	r0, r3, #18
 80017fc:	d50f      	bpl.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80017fe:	4a39      	ldr	r2, [pc, #228]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001800:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001802:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001806:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800180a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800180c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001814:	d144      	bne.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001816:	68d3      	ldr	r3, [r2, #12]
 8001818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800181c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	0359      	lsls	r1, r3, #13
 8001822:	d50f      	bpl.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001824:	4a2f      	ldr	r2, [pc, #188]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001826:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001828:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800182c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001830:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001832:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001836:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800183a:	d13c      	bne.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800183c:	68d3      	ldr	r3, [r2, #12]
 800183e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001842:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	045a      	lsls	r2, r3, #17
 8001848:	d512      	bpl.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800184a:	4926      	ldr	r1, [pc, #152]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800184c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800184e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001852:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001856:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001858:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800185c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001860:	d106      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001862:	2102      	movs	r1, #2
 8001864:	1d20      	adds	r0, r4, #4
 8001866:	f7ff fe71 	bl	800154c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800186a:	2800      	cmp	r0, #0
 800186c:	bf18      	it	ne
 800186e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	d508      	bpl.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001878:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800187a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800187e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001882:	430b      	orrs	r3, r1
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001888:	4628      	mov	r0, r5
 800188a:	b003      	add	sp, #12
 800188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7fe fe54 	bl	800053c <HAL_GetTick>
 8001894:	eba0 0008 	sub.w	r0, r0, r8
 8001898:	4548      	cmp	r0, r9
 800189a:	f67f af34 	bls.w	8001706 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800189e:	e758      	b.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80018a0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80018a4:	d1bb      	bne.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018a6:	2101      	movs	r1, #1
 80018a8:	1d20      	adds	r0, r4, #4
 80018aa:	f7ff fe4f 	bl	800154c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80018ae:	2800      	cmp	r0, #0
 80018b0:	bf18      	it	ne
 80018b2:	4605      	movne	r5, r0
 80018b4:	e7b3      	b.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80018b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80018ba:	d1c3      	bne.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80018bc:	2101      	movs	r1, #1
 80018be:	1d20      	adds	r0, r4, #4
 80018c0:	f7ff fe44 	bl	800154c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	bf18      	it	ne
 80018c8:	4605      	movne	r5, r0
 80018ca:	e7bb      	b.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	65b3      	str	r3, [r6, #88]	; 0x58
 80018d4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018de:	2701      	movs	r7, #1
 80018e0:	e6df      	b.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40007000 	.word	0x40007000

080018ec <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80018ec:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80018ee:	6813      	ldr	r3, [r2, #0]
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80018fc:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018fe:	69c1      	ldr	r1, [r0, #28]
{
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001904:	6883      	ldr	r3, [r0, #8]
 8001906:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001908:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800190a:	4303      	orrs	r3, r0
 800190c:	6960      	ldr	r0, [r4, #20]
 800190e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001910:	4882      	ldr	r0, [pc, #520]	; (8001b1c <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001912:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001914:	4028      	ands	r0, r5
 8001916:	4303      	orrs	r3, r0
 8001918:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800191a:	6853      	ldr	r3, [r2, #4]
 800191c:	68e0      	ldr	r0, [r4, #12]
 800191e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001922:	4303      	orrs	r3, r0
 8001924:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001926:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001928:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800192a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800192c:	bf1c      	itt	ne
 800192e:	6a23      	ldrne	r3, [r4, #32]
 8001930:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001932:	6893      	ldr	r3, [r2, #8]
 8001934:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001938:	4303      	orrs	r3, r0
 800193a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <UART_SetConfig+0x228>)
 800193e:	429a      	cmp	r2, r3
 8001940:	d114      	bne.n	800196c <UART_SetConfig+0x70>
 8001942:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001946:	4a78      	ldr	r2, [pc, #480]	; (8001b28 <UART_SetConfig+0x22c>)
 8001948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001950:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	f040 80aa 	bne.w	8001aae <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 800195a:	2b08      	cmp	r3, #8
 800195c:	d820      	bhi.n	80019a0 <UART_SetConfig+0xa4>
 800195e:	e8df f003 	tbb	[pc, r3]
 8001962:	8f77      	.short	0x8f77
 8001964:	1f9b1f92 	.word	0x1f9b1f92
 8001968:	1f1f      	.short	0x1f1f
 800196a:	9e          	.byte	0x9e
 800196b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <UART_SetConfig+0x230>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d107      	bne.n	8001982 <UART_SetConfig+0x86>
 8001972:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001976:	4a6e      	ldr	r2, [pc, #440]	; (8001b30 <UART_SetConfig+0x234>)
 8001978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	e7e6      	b.n	8001950 <UART_SetConfig+0x54>
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <UART_SetConfig+0x224>)
 8001984:	429a      	cmp	r2, r3
 8001986:	f040 80c2 	bne.w	8001b0e <UART_SetConfig+0x212>
 800198a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800198e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001992:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001996:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800199a:	d02a      	beq.n	80019f2 <UART_SetConfig+0xf6>
 800199c:	d806      	bhi.n	80019ac <UART_SetConfig+0xb0>
 800199e:	b315      	cbz	r5, 80019e6 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 80019a0:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80019a6:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80019a8:	4610      	mov	r0, r2
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019ac:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80019b0:	d006      	beq.n	80019c0 <UART_SetConfig+0xc4>
 80019b2:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 80019b6:	d1f3      	bne.n	80019a0 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80019b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019bc:	2508      	movs	r5, #8
 80019be:	e001      	b.n	80019c4 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80019c0:	485c      	ldr	r0, [pc, #368]	; (8001b34 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019c2:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80019c4:	6862      	ldr	r2, [r4, #4]
 80019c6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80019ca:	4283      	cmp	r3, r0
 80019cc:	d8e8      	bhi.n	80019a0 <UART_SetConfig+0xa4>
 80019ce:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80019d2:	d8e5      	bhi.n	80019a0 <UART_SetConfig+0xa4>
        switch (clocksource)
 80019d4:	2d08      	cmp	r5, #8
 80019d6:	d838      	bhi.n	8001a4a <UART_SetConfig+0x14e>
 80019d8:	e8df f005 	tbb	[pc, r5]
 80019dc:	3726370f 	.word	0x3726370f
 80019e0:	3737372e 	.word	0x3737372e
 80019e4:	31          	.byte	0x31
 80019e5:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80019e6:	f7ff fd8d 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1ea      	bne.n	80019c4 <UART_SetConfig+0xc8>
 80019ee:	4602      	mov	r2, r0
 80019f0:	e7d7      	b.n	80019a2 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80019f2:	f7ff fa49 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
        break;
 80019f6:	2504      	movs	r5, #4
 80019f8:	e7f7      	b.n	80019ea <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019fa:	f7ff fd83 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019fe:	6862      	ldr	r2, [r4, #4]
 8001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a04:	0856      	lsrs	r6, r2, #1
 8001a06:	2700      	movs	r7, #0
 8001a08:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	4630      	mov	r0, r6
 8001a10:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a12:	f7fe fbdb 	bl	80001cc <__aeabi_uldivmod>
            break;
 8001a16:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <UART_SetConfig+0x23c>)
 8001a1a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	d8be      	bhi.n	80019a0 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	60d8      	str	r0, [r3, #12]
 8001a26:	e7bc      	b.n	80019a2 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001a28:	4844      	ldr	r0, [pc, #272]	; (8001b3c <UART_SetConfig+0x240>)
 8001a2a:	0855      	lsrs	r5, r2, #1
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a32:	f141 0100 	adc.w	r1, r1, #0
 8001a36:	e7ec      	b.n	8001a12 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a38:	f7ff fa26 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8001a3c:	e7df      	b.n	80019fe <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001a3e:	0850      	lsrs	r0, r2, #1
 8001a40:	2100      	movs	r1, #0
 8001a42:	2300      	movs	r3, #0
 8001a44:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001a48:	e7f3      	b.n	8001a32 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8001a4a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	e7e3      	b.n	8001a18 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a50:	f7ff fd58 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a54:	6861      	ldr	r1, [r4, #4]
 8001a56:	084a      	lsrs	r2, r1, #1
 8001a58:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a60:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a62:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a64:	f1a3 0010 	sub.w	r0, r3, #16
 8001a68:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001a6c:	4288      	cmp	r0, r1
 8001a6e:	d897      	bhi.n	80019a0 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001a70:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001a74:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a76:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	60c3      	str	r3, [r0, #12]
 8001a7e:	e790      	b.n	80019a2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a80:	f7ff fd52 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001a84:	e7e6      	b.n	8001a54 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a86:	6860      	ldr	r0, [r4, #4]
 8001a88:	0843      	lsrs	r3, r0, #1
 8001a8a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001a8e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a92:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a96:	e7e3      	b.n	8001a60 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a98:	f7ff f9f6 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8001a9c:	e7da      	b.n	8001a54 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001a9e:	6860      	ldr	r0, [r4, #4]
 8001aa0:	0843      	lsrs	r3, r0, #1
 8001aa2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001aa6:	e7f4      	b.n	8001a92 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001aa8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e7da      	b.n	8001a64 <UART_SetConfig+0x168>
    switch (clocksource)
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d830      	bhi.n	8001b14 <UART_SetConfig+0x218>
 8001ab2:	e8df f003 	tbb	[pc, r3]
 8001ab6:	1805      	.short	0x1805
 8001ab8:	2f242f1b 	.word	0x2f242f1b
 8001abc:	2f2f      	.short	0x2f2f
 8001abe:	27          	.byte	0x27
 8001abf:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ac0:	f7ff fd20 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ac4:	6862      	ldr	r2, [r4, #4]
 8001ac6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ace:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ad0:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ad2:	f1a3 0010 	sub.w	r0, r3, #16
 8001ad6:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ada:	4288      	cmp	r0, r1
 8001adc:	f63f af60 	bhi.w	80019a0 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001ae0:	6821      	ldr	r1, [r4, #0]
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e75d      	b.n	80019a2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ae6:	f7ff fd1f 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001aea:	e7eb      	b.n	8001ac4 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001aec:	6860      	ldr	r0, [r4, #4]
 8001aee:	0843      	lsrs	r3, r0, #1
 8001af0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001af4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001af8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001afc:	e7e7      	b.n	8001ace <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001afe:	f7ff f9c3 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8001b02:	e7df      	b.n	8001ac4 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	0843      	lsrs	r3, r0, #1
 8001b08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b0c:	e7f4      	b.n	8001af8 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b0e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001b12:	d0c9      	beq.n	8001aa8 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8001b14:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e7db      	b.n	8001ad2 <UART_SetConfig+0x1d6>
 8001b1a:	bf00      	nop
 8001b1c:	efff69f3 	.word	0xefff69f3
 8001b20:	40008000 	.word	0x40008000
 8001b24:	40013800 	.word	0x40013800
 8001b28:	080022d8 	.word	0x080022d8
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	080022dc 	.word	0x080022dc
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	000ffcff 	.word	0x000ffcff
 8001b3c:	f4240000 	.word	0xf4240000

08001b40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b42:	07da      	lsls	r2, r3, #31
{
 8001b44:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b46:	d506      	bpl.n	8001b56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001b48:	6801      	ldr	r1, [r0, #0]
 8001b4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001b4c:	684a      	ldr	r2, [r1, #4]
 8001b4e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b52:	4322      	orrs	r2, r4
 8001b54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001b56:	079c      	lsls	r4, r3, #30
 8001b58:	d506      	bpl.n	8001b68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001b5a:	6801      	ldr	r1, [r0, #0]
 8001b5c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b5e:	684a      	ldr	r2, [r1, #4]
 8001b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b64:	4322      	orrs	r2, r4
 8001b66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001b68:	0759      	lsls	r1, r3, #29
 8001b6a:	d506      	bpl.n	8001b7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001b6c:	6801      	ldr	r1, [r0, #0]
 8001b6e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001b70:	684a      	ldr	r2, [r1, #4]
 8001b72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b76:	4322      	orrs	r2, r4
 8001b78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001b7a:	071a      	lsls	r2, r3, #28
 8001b7c:	d506      	bpl.n	8001b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001b7e:	6801      	ldr	r1, [r0, #0]
 8001b80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001b82:	684a      	ldr	r2, [r1, #4]
 8001b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b88:	4322      	orrs	r2, r4
 8001b8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001b8c:	06dc      	lsls	r4, r3, #27
 8001b8e:	d506      	bpl.n	8001b9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001b90:	6801      	ldr	r1, [r0, #0]
 8001b92:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001b94:	688a      	ldr	r2, [r1, #8]
 8001b96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b9a:	4322      	orrs	r2, r4
 8001b9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001b9e:	0699      	lsls	r1, r3, #26
 8001ba0:	d506      	bpl.n	8001bb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ba2:	6801      	ldr	r1, [r0, #0]
 8001ba4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ba6:	688a      	ldr	r2, [r1, #8]
 8001ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bac:	4322      	orrs	r2, r4
 8001bae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001bb0:	065a      	lsls	r2, r3, #25
 8001bb2:	d50f      	bpl.n	8001bd4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bb4:	6801      	ldr	r1, [r0, #0]
 8001bb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001bb8:	684a      	ldr	r2, [r1, #4]
 8001bba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001bbe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bc0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001bc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001bc6:	d105      	bne.n	8001bd4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001bc8:	684a      	ldr	r2, [r1, #4]
 8001bca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001bcc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001bd0:	4322      	orrs	r2, r4
 8001bd2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	d506      	bpl.n	8001be6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001bd8:	6802      	ldr	r2, [r0, #0]
 8001bda:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001bdc:	6853      	ldr	r3, [r2, #4]
 8001bde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001be2:	430b      	orrs	r3, r1
 8001be4:	6053      	str	r3, [r2, #4]
 8001be6:	bd10      	pop	{r4, pc}

08001be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bec:	9d06      	ldr	r5, [sp, #24]
 8001bee:	4604      	mov	r4, r0
 8001bf0:	460f      	mov	r7, r1
 8001bf2:	4616      	mov	r6, r2
 8001bf4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf6:	6821      	ldr	r1, [r4, #0]
 8001bf8:	69ca      	ldr	r2, [r1, #28]
 8001bfa:	ea37 0302 	bics.w	r3, r7, r2
 8001bfe:	bf0c      	ite	eq
 8001c00:	2201      	moveq	r2, #1
 8001c02:	2200      	movne	r2, #0
 8001c04:	42b2      	cmp	r2, r6
 8001c06:	d002      	beq.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001c08:	2000      	movs	r0, #0
}
 8001c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	1c6b      	adds	r3, r5, #1
 8001c10:	d0f2      	beq.n	8001bf8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c12:	b99d      	cbnz	r5, 8001c3c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001c26:	2320      	movs	r3, #32
 8001c28:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001c2c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001c30:	2300      	movs	r3, #0
 8001c32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001c36:	2003      	movs	r0, #3
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c3c:	f7fe fc7e 	bl	800053c <HAL_GetTick>
 8001c40:	eba0 0008 	sub.w	r0, r0, r8
 8001c44:	4285      	cmp	r5, r0
 8001c46:	d2d6      	bcs.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0xe>
 8001c48:	e7e4      	b.n	8001c14 <UART_WaitOnFlagUntilTimeout+0x2c>

08001c4a <HAL_UART_Transmit>:
{
 8001c4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c4e:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c50:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001c54:	2b20      	cmp	r3, #32
{
 8001c56:	4604      	mov	r4, r0
 8001c58:	460d      	mov	r5, r1
 8001c5a:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001c5c:	d14a      	bne.n	8001cf4 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	d046      	beq.n	8001cf0 <HAL_UART_Transmit+0xa6>
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	d044      	beq.n	8001cf0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001c66:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d042      	beq.n	8001cf4 <HAL_UART_Transmit+0xaa>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c78:	2321      	movs	r3, #33	; 0x21
 8001c7a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001c7e:	f7fe fc5d 	bl	800053c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001c82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001c86:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001c88:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001c8c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c90:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001c92:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c94:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001c96:	b952      	cbnz	r2, 8001cae <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff ffa4 	bl	8001be8 <UART_WaitOnFlagUntilTimeout>
 8001ca0:	b958      	cbnz	r0, 8001cba <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001ca8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001cac:	e006      	b.n	8001cbc <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff ff98 	bl	8001be8 <UART_WaitOnFlagUntilTimeout>
 8001cb8:	b118      	cbz	r0, 8001cc2 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8001cba:	2003      	movs	r0, #3
}
 8001cbc:	b002      	add	sp, #8
 8001cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	6822      	ldr	r2, [r4, #0]
 8001cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cca:	d10d      	bne.n	8001ce8 <HAL_UART_Transmit+0x9e>
 8001ccc:	6923      	ldr	r3, [r4, #16]
 8001cce:	b95b      	cbnz	r3, 8001ce8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001cd0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001cda:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8001ce6:	e7d1      	b.n	8001c8c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001ce8:	782b      	ldrb	r3, [r5, #0]
 8001cea:	8513      	strh	r3, [r2, #40]	; 0x28
 8001cec:	3501      	adds	r5, #1
 8001cee:	e7f4      	b.n	8001cda <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7e3      	b.n	8001cbc <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	e7e1      	b.n	8001cbc <HAL_UART_Transmit+0x72>

08001cf8 <UART_CheckIdleState>:
{
 8001cf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cfa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	2600      	movs	r6, #0
 8001cfe:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8001d00:	f7fe fc1c 	bl	800053c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001d0a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d0c:	d417      	bmi.n	8001d3e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	075b      	lsls	r3, r3, #29
 8001d14:	d50a      	bpl.n	8001d2c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	462b      	mov	r3, r5
 8001d20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff5f 	bl	8001be8 <UART_WaitOnFlagUntilTimeout>
 8001d2a:	b9a0      	cbnz	r0, 8001d56 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8001d2c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d2e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d30:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8001d34:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8001d3c:	e00c      	b.n	8001d58 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4632      	mov	r2, r6
 8001d46:	4603      	mov	r3, r0
 8001d48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff ff4b 	bl	8001be8 <UART_WaitOnFlagUntilTimeout>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d0db      	beq.n	8001d0e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d56:	2003      	movs	r0, #3
}
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}

08001d5c <HAL_UART_Init>:
{
 8001d5c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d5e:	4604      	mov	r4, r0
 8001d60:	b360      	cbz	r0, 8001dbc <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d62:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001d66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d6a:	b91b      	cbnz	r3, 8001d74 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d6c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001d70:	f000 f9d8 	bl	8002124 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001d74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d76:	2324      	movs	r3, #36	; 0x24
 8001d78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff fdb9 	bl	80018fc <UART_SetConfig>
 8001d8a:	2801      	cmp	r0, #1
 8001d8c:	d016      	beq.n	8001dbc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d90:	b113      	cbz	r3, 8001d98 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff fed4 	bl	8001b40 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001da8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001db0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001db2:	601a      	str	r2, [r3, #0]
}
 8001db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001db8:	f7ff bf9e 	b.w	8001cf8 <UART_CheckIdleState>
}
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	bd10      	pop	{r4, pc}

08001dc0 <airq5_writeData>:
static void MX_I2C1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void airq5_writeData(uint8_t reg, uint16_t _data)
{
 8001dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t writeReg[ 3 ];

    writeReg[ 0 ] = reg;
    writeReg[ 1 ] = _data >> 8;
 8001dc2:	0a0b      	lsrs	r3, r1, #8
 8001dc4:	f88d 300d 	strb.w	r3, [sp, #13]
    writeReg[ 2 ] = _data & 0x00FF;

    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <airq5_writeData+0x28>)
    writeReg[ 2 ] = _data & 0x00FF;
 8001dca:	f88d 100e 	strb.w	r1, [sp, #14]
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001dce:	7819      	ldrb	r1, [r3, #0]
    writeReg[ 0 ] = reg;
 8001dd0:	f88d 000c 	strb.w	r0, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	aa03      	add	r2, sp, #12
 8001dda:	2301      	movs	r3, #1
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <airq5_writeData+0x2c>)
 8001dde:	f7fe fe55 	bl	8000a8c <HAL_I2C_Master_Transmit>
}
 8001de2:	b005      	add	sp, #20
 8001de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de8:	20000003 	.word	0x20000003
 8001dec:	20000028 	.word	0x20000028

08001df0 <airq5_readData>:

uint16_t airq5_readData(uint8_t reg)
{
 8001df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t readReg[ 2 ];
    uint16_t dataValue;

    writeReg[ 0 ] = reg;

    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001df2:	4d0d      	ldr	r5, [pc, #52]	; (8001e28 <airq5_readData+0x38>)
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <airq5_readData+0x3c>)
    writeReg[ 0 ] = reg;
 8001df6:	aa04      	add	r2, sp, #16
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001df8:	2664      	movs	r6, #100	; 0x64
    writeReg[ 0 ] = reg;
 8001dfa:	f802 0d08 	strb.w	r0, [r2, #-8]!
    HAL_I2C_Master_Transmit(&hi2c1, address_for_write, writeReg, 1,100);
 8001dfe:	7819      	ldrb	r1, [r3, #0]
 8001e00:	9600      	str	r6, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	4628      	mov	r0, r5
 8001e06:	f7fe fe41 	bl	8000a8c <HAL_I2C_Master_Transmit>
 8001e0a:	aa04      	add	r2, sp, #16

    dataValue = readReg[ 0 ];
    dataValue = dataValue << 8;
    dataValue = dataValue | readReg[ 1 ];
    HAL_I2C_Master_Receive(&hi2c1, address_for_read, readReg, 2, 100);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <airq5_readData+0x40>)
 8001e0e:	f832 4d04 	ldrh.w	r4, [r2, #-4]!
 8001e12:	7819      	ldrb	r1, [r3, #0]
 8001e14:	9600      	str	r6, [sp, #0]
 8001e16:	2302      	movs	r3, #2
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7fe fecb 	bl	8000bb4 <HAL_I2C_Master_Receive>
 8001e1e:	ba64      	rev16	r4, r4
 8001e20:	b2a4      	uxth	r4, r4
    return dataValue;
}
 8001e22:	4620      	mov	r0, r4
 8001e24:	b004      	add	sp, #16
 8001e26:	bd70      	pop	{r4, r5, r6, pc}
 8001e28:	20000028 	.word	0x20000028
 8001e2c:	20000003 	.word	0x20000003
 8001e30:	20000002 	.word	0x20000002

08001e34 <airq5_readSensorData>:
{
    _dataConfig = config;
}

uint16_t airq5_readSensorData(uint16_t channel_data)
{
 8001e34:	b508      	push	{r3, lr}
	uint16_t setConfig;
	uint16_t getData;

	setConfig = _dataConfig;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <airq5_readSensorData+0x1c>)
 8001e38:	8819      	ldrh	r1, [r3, #0]
	setConfig = setConfig | channel_data;
    airq5_writeData(_AIRQ5_REG_POINTER_CONFIG, setConfig );
 8001e3a:	4301      	orrs	r1, r0
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff ffbf 	bl	8001dc0 <airq5_writeData>
    getData = airq5_readData( _AIRQ5_REG_POINTER_CONVERT );
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff ffd4 	bl	8001df0 <airq5_readData>

    getData = getData >> 4;

    return getData;
}
 8001e48:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8001e4c:	bd08      	pop	{r3, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000

08001e54 <applicationTask>:
                            _AIRQ5_CONFIG_COMP_LAT_NOT_LATCH |
                            _AIRQ5_CONFIG_COMP_QUE_0CONV );
}

uint8_t applicationTask()
{
 8001e54:	b510      	push	{r4, lr}
      uint8_t CO_sensorData = airq5_readSensorData(_AIRQ5_DATA_CHANNEL_CO);
 8001e56:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 8001e5a:	f7ff ffeb 	bl	8001e34 <airq5_readSensorData>
 8001e5e:	4604      	mov	r4, r0
      HAL_Delay( 200 );
 8001e60:	20c8      	movs	r0, #200	; 0xc8
 8001e62:	f7fe fb71 	bl	8000548 <HAL_Delay>
      return CO_sensorData;
}
 8001e66:	b2e0      	uxtb	r0, r4
 8001e68:	bd10      	pop	{r4, pc}
	...

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8001e70:	f7fe ff82 	bl	8000d78 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <SystemClock_Config+0xac>)
 8001e76:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e7a:	f023 0318 	bic.w	r3, r3, #24
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e82:	2314      	movs	r3, #20
 8001e84:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e86:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001e88:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e8a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e8c:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e8e:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e90:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001e92:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e94:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e96:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e9a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e9c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ea0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ea2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ea4:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ea6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ea8:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f7ff f841 	bl	8000f30 <HAL_RCC_OscConfig>
 8001eae:	b100      	cbz	r0, 8001eb2 <SystemClock_Config+0x46>
 8001eb0:	e7fe      	b.n	8001eb0 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eba:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebc:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec2:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ec4:	f7ff fa86 	bl	80013d4 <HAL_RCC_ClockConfig>
 8001ec8:	b100      	cbz	r0, 8001ecc <SystemClock_Config+0x60>
 8001eca:	e7fe      	b.n	8001eca <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001ecc:	2343      	movs	r3, #67	; 0x43
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ece:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed0:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed2:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001ed6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed8:	f7ff fbc4 	bl	8001664 <HAL_RCCEx_PeriphCLKConfig>
 8001edc:	b100      	cbz	r0, 8001ee0 <SystemClock_Config+0x74>
 8001ede:	e7fe      	b.n	8001ede <SystemClock_Config+0x72>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ee0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee4:	f7fe ff58 	bl	8000d98 <HAL_PWREx_ControlVoltageScaling>
 8001ee8:	4604      	mov	r4, r0
 8001eea:	b100      	cbz	r0, 8001eee <SystemClock_Config+0x82>
 8001eec:	e7fe      	b.n	8001eec <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001eee:	f7ff fb03 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001efa:	f7fe fb79 	bl	80005f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001efe:	2004      	movs	r0, #4
 8001f00:	f7fe fb8c 	bl	800061c <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f04:	f7ff fcf2 	bl	80018ec <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f08:	4622      	mov	r2, r4
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7fe fb3a 	bl	8000588 <HAL_NVIC_SetPriority>
}
 8001f14:	b02c      	add	sp, #176	; 0xb0
 8001f16:	bd10      	pop	{r4, pc}
 8001f18:	40021000 	.word	0x40021000

08001f1c <main>:
{
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	b088      	sub	sp, #32
  HAL_Init();
 8001f22:	f7fe faf3 	bl	800050c <HAL_Init>
  SystemClock_Config();
 8001f26:	f7ff ffa1 	bl	8001e6c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <main+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f2c:	483e      	ldr	r0, [pc, #248]	; (8002028 <main+0x10c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  huart2.Instance = USART2;
 8001f30:	4c3e      	ldr	r4, [pc, #248]	; (800202c <main+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	f042 0204 	orr.w	r2, r2, #4
 8001f36:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f3a:	f002 0204 	and.w	r2, r2, #4
 8001f3e:	9200      	str	r2, [sp, #0]
 8001f40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f4c:	f002 0201 	and.w	r2, r2, #1
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f56:	f042 0202 	orr.w	r2, r2, #2
 8001f5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f6e:	f7fe fc1b 	bl	80007a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 8001f72:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001f74:	482c      	ldr	r0, [pc, #176]	; (8002028 <main+0x10c>)
  GPIO_InitStruct.Pin = LD3_Pin;
 8001f76:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001f78:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f7fe fb5e 	bl	8000640 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <main+0x114>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8001f88:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	270c      	movs	r7, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8e:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8001f90:	e884 0108 	stmia.w	r4, {r3, r8}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f94:	60e5      	str	r5, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	6125      	str	r5, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	6167      	str	r7, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	61a5      	str	r5, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	61e5      	str	r5, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f9e:	6225      	str	r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa0:	6265      	str	r5, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa2:	f7ff fedb 	bl	8001d5c <HAL_UART_Init>
 8001fa6:	b100      	cbz	r0, 8001faa <main+0x8e>
 8001fa8:	e7fe      	b.n	8001fa8 <main+0x8c>
  huart1.Instance = USART1;
 8001faa:	4b22      	ldr	r3, [pc, #136]	; (8002034 <main+0x118>)
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <main+0x11c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fb2:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb4:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb6:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb8:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fba:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fbc:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8001fbe:	e883 0104 	stmia.w	r3, {r2, r8}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc2:	615f      	str	r7, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fc4:	f7ff feca 	bl	8001d5c <HAL_UART_Init>
 8001fc8:	b100      	cbz	r0, 8001fcc <main+0xb0>
 8001fca:	e7fe      	b.n	8001fca <main+0xae>
  hi2c1.Instance = I2C1;
 8001fcc:	4d1b      	ldr	r5, [pc, #108]	; (800203c <main+0x120>)
  hi2c1.Init.Timing = 0x00000E14;
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <main+0x124>)
  hi2c1.Init.OwnAddress1 = 0;
 8001fd0:	60a8      	str	r0, [r5, #8]
  hi2c1.Init.Timing = 0x00000E14;
 8001fd2:	f640 6314 	movw	r3, #3604	; 0xe14
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd6:	6128      	str	r0, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fd8:	6168      	str	r0, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fda:	61a8      	str	r0, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fdc:	61e8      	str	r0, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe0:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x00000E14;
 8001fe2:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe6:	60ee      	str	r6, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fe8:	f7fe fcfe 	bl	80009e8 <HAL_I2C_Init>
 8001fec:	4601      	mov	r1, r0
 8001fee:	b100      	cbz	r0, 8001ff2 <main+0xd6>
 8001ff0:	e7fe      	b.n	8001ff0 <main+0xd4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f7fe fe74 	bl	8000ce0 <HAL_I2CEx_ConfigAnalogFilter>
 8001ff8:	4601      	mov	r1, r0
 8001ffa:	b100      	cbz	r0, 8001ffe <main+0xe2>
 8001ffc:	e7fe      	b.n	8001ffc <main+0xe0>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ffe:	4628      	mov	r0, r5
 8002000:	f7fe fe94 	bl	8000d2c <HAL_I2CEx_ConfigDigitalFilter>
 8002004:	b100      	cbz	r0, 8002008 <main+0xec>
 8002006:	e7fe      	b.n	8002006 <main+0xea>
    _dataConfig = config;
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <main+0x128>)
 800200a:	f248 5283 	movw	r2, #34179	; 0x8583
 800200e:	801a      	strh	r2, [r3, #0]
	  uint8_t CO=applicationTask();
 8002010:	f7ff ff20 	bl	8001e54 <applicationTask>
	  HAL_UART_Transmit(&huart2, CO, 1, 100);
 8002014:	2364      	movs	r3, #100	; 0x64
 8002016:	4601      	mov	r1, r0
 8002018:	2201      	movs	r2, #1
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff fe15 	bl	8001c4a <HAL_UART_Transmit>
 8002020:	e7f6      	b.n	8002010 <main+0xf4>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	48000400 	.word	0x48000400
 800202c:	200000ec 	.word	0x200000ec
 8002030:	40004400 	.word	0x40004400
 8002034:	20000074 	.word	0x20000074
 8002038:	40013800 	.word	0x40013800
 800203c:	20000028 	.word	0x20000028
 8002040:	40005400 	.word	0x40005400
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_MspInit+0x88>)
{
 800204a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	661a      	str	r2, [r3, #96]	; 0x60
 8002054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002056:	f002 0201 	and.w	r2, r2, #1
 800205a:	9200      	str	r2, [sp, #0]
 800205c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002064:	659a      	str	r2, [r3, #88]	; 0x58
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002072:	f7fe fa77 	bl	8000564 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	4611      	mov	r1, r2
 800207a:	f06f 000b 	mvn.w	r0, #11
 800207e:	f7fe fa83 	bl	8000588 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	4611      	mov	r1, r2
 8002086:	f06f 000a 	mvn.w	r0, #10
 800208a:	f7fe fa7d 	bl	8000588 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	4611      	mov	r1, r2
 8002092:	f06f 0009 	mvn.w	r0, #9
 8002096:	f7fe fa77 	bl	8000588 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	4611      	mov	r1, r2
 800209e:	f06f 0004 	mvn.w	r0, #4
 80020a2:	f7fe fa71 	bl	8000588 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	4611      	mov	r1, r2
 80020aa:	f06f 0003 	mvn.w	r0, #3
 80020ae:	f7fe fa6b 	bl	8000588 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	4611      	mov	r1, r2
 80020b6:	f06f 0001 	mvn.w	r0, #1
 80020ba:	f7fe fa65 	bl	8000588 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	4611      	mov	r1, r2
 80020c2:	f04f 30ff 	mov.w	r0, #4294967295
 80020c6:	f7fe fa5f 	bl	8000588 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	b003      	add	sp, #12
 80020cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80020d6:	6802      	ldr	r2, [r0, #0]
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_I2C_MspInit+0x44>)
 80020da:	429a      	cmp	r2, r3
 80020dc:	d118      	bne.n	8002110 <HAL_I2C_MspInit+0x3c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e2:	2312      	movs	r3, #18
 80020e4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ee:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	eb0d 0103 	add.w	r1, sp, r3
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	f7fe faa2 	bl	8000640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_I2C_MspInit+0x4c>)
 80020fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002100:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002104:	659a      	str	r2, [r3, #88]	; 0x58
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002110:	b007      	add	sp, #28
 8002112:	f85d fb04 	ldr.w	pc, [sp], #4
 8002116:	bf00      	nop
 8002118:	40005400 	.word	0x40005400
 800211c:	48000400 	.word	0x48000400
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002124:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <HAL_UART_MspInit+0x8c>)
 800212a:	4293      	cmp	r3, r2
{
 800212c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 800212e:	d11b      	bne.n	8002168 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_UART_MspInit+0x90>)
 8002132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002138:	661a      	str	r2, [r3, #96]	; 0x60
 800213a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002144:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002148:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002156:	2307      	movs	r3, #7
 8002158:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800215a:	a903      	add	r1, sp, #12
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f7fe fa6e 	bl	8000640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002164:	b008      	add	sp, #32
 8002166:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_UART_MspInit+0x94>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d1fa      	bne.n	8002164 <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_UART_MspInit+0x90>)
 8002170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002172:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002176:	659a      	str	r2, [r3, #88]	; 0x58
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002182:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002186:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800218a:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800218e:	a903      	add	r1, sp, #12
 8002190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002194:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800219c:	f7fe fa50 	bl	8000640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80021a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80021ac:	9407      	str	r4, [sp, #28]
 80021ae:	e7d4      	b.n	800215a <HAL_UART_MspInit+0x36>
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40004400 	.word	0x40004400

080021bc <NMI_Handler>:
 80021bc:	4770      	bx	lr

080021be <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80021be:	e7fe      	b.n	80021be <HardFault_Handler>

080021c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler>

080021c2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler>

080021c4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler>

080021c6 <SVC_Handler>:
 80021c6:	4770      	bx	lr

080021c8 <DebugMon_Handler>:
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ce:	f7fe f9ad 	bl	800052c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80021d6:	f7fe ba2e 	b.w	8000636 <HAL_SYSTICK_IRQHandler>
	...

080021dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <SystemInit+0x40>)
 80021de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SystemInit+0x44>)
 80021ec:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80021ee:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80021f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80021fe:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002202:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002208:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002210:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002212:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002218:	608b      	str	r3, [r1, #8]
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	40021000 	.word	0x40021000

08002224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002228:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800222a:	e003      	b.n	8002234 <LoopCopyDataInit>

0800222c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800222e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002230:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002232:	3104      	adds	r1, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002234:	480b      	ldr	r0, [pc, #44]	; (8002264 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002238:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800223a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800223c:	d3f6      	bcc.n	800222c <CopyDataInit>
	ldr	r2, =_sbss
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002240:	e002      	b.n	8002248 <LoopFillZerobss>

08002242 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002242:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002244:	f842 3b04 	str.w	r3, [r2], #4

08002248 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <LoopForever+0x16>)
	cmp	r2, r3
 800224a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800224c:	d3f9      	bcc.n	8002242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800224e:	f7ff ffc5 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002252:	f000 f811 	bl	8002278 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002256:	f7ff fe61 	bl	8001f1c <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800225c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002260:	08002344 	.word	0x08002344
	ldr	r0, =_sdata
 8002264:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002268:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 800226c:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8002270:	20000164 	.word	0x20000164

08002274 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_IRQHandler>
	...

08002278 <__libc_init_array>:
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	4e0d      	ldr	r6, [pc, #52]	; (80022b0 <__libc_init_array+0x38>)
 800227c:	4c0d      	ldr	r4, [pc, #52]	; (80022b4 <__libc_init_array+0x3c>)
 800227e:	1ba4      	subs	r4, r4, r6
 8002280:	10a4      	asrs	r4, r4, #2
 8002282:	2500      	movs	r5, #0
 8002284:	42a5      	cmp	r5, r4
 8002286:	d109      	bne.n	800229c <__libc_init_array+0x24>
 8002288:	4e0b      	ldr	r6, [pc, #44]	; (80022b8 <__libc_init_array+0x40>)
 800228a:	4c0c      	ldr	r4, [pc, #48]	; (80022bc <__libc_init_array+0x44>)
 800228c:	f000 f818 	bl	80022c0 <_init>
 8002290:	1ba4      	subs	r4, r4, r6
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	2500      	movs	r5, #0
 8002296:	42a5      	cmp	r5, r4
 8002298:	d105      	bne.n	80022a6 <__libc_init_array+0x2e>
 800229a:	bd70      	pop	{r4, r5, r6, pc}
 800229c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a0:	4798      	blx	r3
 80022a2:	3501      	adds	r5, #1
 80022a4:	e7ee      	b.n	8002284 <__libc_init_array+0xc>
 80022a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022aa:	4798      	blx	r3
 80022ac:	3501      	adds	r5, #1
 80022ae:	e7f2      	b.n	8002296 <__libc_init_array+0x1e>
 80022b0:	0800233c 	.word	0x0800233c
 80022b4:	0800233c 	.word	0x0800233c
 80022b8:	0800233c 	.word	0x0800233c
 80022bc:	08002340 	.word	0x08002340

080022c0 <_init>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr

080022cc <_fini>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr
